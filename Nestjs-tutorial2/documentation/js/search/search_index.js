var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AddCreditCardDto.html",[0,0.066,1,3.403]],["body/classes/AddCreditCardDto.html",[0,0.111,1,6.184,2,2.149,3,0.104,4,0.092,5,0.092,6,5.369,7,5.45,8,0.435,9,1.517,10,6.184,11,0.421,12,0.008,13,1.365,14,1.368,15,3.129,16,0.587,17,6.153,18,0.197,19,3.615,20,3.615,21,2.622,22,0.127,23,0.873,24,0.006,25,0.006]],["title/entities/Address.html",[26,1.734,27,2.887]],["body/entities/Address.html",[0,0.068,3,0.078,4,0.07,5,0.07,8,0.33,9,1.267,11,0.55,12,0.008,13,1.497,14,1.789,16,0.768,18,0.203,22,0.078,23,0.661,24,0.005,25,0.005,26,2.431,27,4.593,28,2.37,29,4.128,30,4.123,31,6.358,32,6.358,33,2.341,34,6.358,35,1.165,36,3.402,37,4.793,38,4.661,39,4.661,40,1.888,41,4.053,42,4.661,43,4.661,44,4.128,45,6.324,46,4.661,47,5.601,48,1.792,49,3.777]],["title/controllers/AppController.html",[50,1.318,51,3.403]],["body/controllers/AppController.html",[0,0.088,3,0.101,4,0.09,5,0.09,8,0.425,12,0.008,13,1.345,14,1.335,16,0.573,18,0.239,22,0.101,24,0.006,25,0.006,50,2.179,51,5.625,52,1.717,53,5.321,54,1.526,55,7.513,56,6.007,57,1.204,58,0.654,59,5.754,60,5.321,61,2.869,62,1.611,63,1.392,64,6.007]],["title/modules/AppModule.html",[65,1.003,66,3.403]],["body/modules/AppModule.html",[0,0.033,3,0.038,4,0.034,5,0.034,11,0.153,12,0.008,16,0.214,18,0.283,22,0.038,24,0.003,25,0.003,35,0.413,51,1.692,52,0.641,54,0.459,57,0.449,58,0.244,59,1.591,60,1.987,65,0.812,66,6.928,67,0.783,68,1.44,69,1.987,70,1.987,71,4.023,72,4.46,73,4.46,74,4.46,75,4.46,76,4.46,77,4.225,78,4.46,79,4.225,80,4.46,81,4.46,82,4.46,83,4.46,84,4.225,85,4.46,86,4.46,87,4.225,88,4.46,89,3.55,90,4.46,91,4.46,92,3.55,93,1.516,94,0.931,95,0.907,96,2.243,97,1.733,98,2.243,99,3.653,100,5.327,101,2.243,102,0.449,103,0.348,104,2.243,105,1.507,106,2.243,107,2.243,108,1.799,109,2.27,110,0.748,111,2.243,112,1.987,113,2.243,114,1.507,115,1.818,116,2.243,117,1.987,118,2.243,119,1.987,120,2.243,121,2.243,122,2.243,123,1.818,124,2.243,125,2.243,126,1.987,127,1.591,128,2.243,129,1.591,130,2.243,131,1.818,132,2.243,133,2.243,134,2.243,135,2.243,136,2.243,137,2.243,138,1.692,139,2.243,140,2.243,141,2.243,142,2.243,143,2.243,144,2.243,145,2.243,146,8.701,147,2.243,148,2.243,149,2.243,150,2.243,151,2.243,152,2.96,153,2.243,154,2.243,155,1.818,156,2.243,157,1.987,158,2.243,159,2.243,160,2.243,161,2.243,162,2.243,163,2.243,164,2.243,165,2.243,166,2.243,167,2.243,168,5.864,169,2.243,170,2.243,171,2.243,172,2.243,173,2.243,174,1.987,175,1.987,176,2.243,177,2.243,178,1.987,179,1.987,180,2.243,181,2.243,182,2.243,183,1.591,184,0.553,185,1.818,186,1.692,187,1.987,188,2.243,189,1.507,190,0.884,191,2.243]],["title/injectables/AppService.html",[59,3.2,192,0.654]],["body/injectables/AppService.html",[0,0.092,3,0.106,4,0.094,5,0.094,8,0.444,12,0.008,13,1.383,16,0.6,18,0.201,22,0.106,24,0.007,25,0.007,54,1.568,55,7.631,57,1.258,58,0.684,59,5.437,63,1.455,192,1.112,193,1.875,194,5.563,195,6.281,196,6.281,197,6.281]],["title/controllers/AuthenticationController.html",[50,1.318,198,3.403]],["body/controllers/AuthenticationController.html",[0,0.043,3,0.049,4,0.044,5,0.044,8,0.207,11,0.423,12,0.008,14,1.375,16,0.59,18,0.255,22,0.076,23,0.415,24,0.004,25,0.004,35,1.139,36,2.568,50,0.855,52,0.837,54,0.923,57,1.239,58,0.319,62,1.476,63,1.433,95,1.183,102,1.239,103,0.959,184,1.921,198,4.151,199,2.592,200,1.356,201,2.076,202,4.51,203,4.51,204,3.031,205,3.655,206,2.926,207,3.918,208,2.926,209,2.926,210,3.007,211,1.318,212,2.926,213,5.504,214,2.926,215,2.926,216,2.926,217,2.926,218,2.926,219,2.592,220,4.387,221,4.51,222,2.926,223,3.995,224,1.356,225,1.488,226,1.071,227,2.372,228,1.441,229,2.076,230,2.926,231,1.652,232,1.791,233,3.698,234,1.441,235,3.522,236,2.926,237,2.41,238,1.652,239,2.547,240,2.207,241,2.592,242,1.318,243,2.76,244,1.441,245,2.207,246,2.926,247,2.207,248,2.926,249,2.592,250,2.926,251,1.791,252,2.592,253,2.592,254,2.592,255,3.655,256,2.207,257,2.076,258,2.592,259,3.995,260,3.904,261,0.855,262,1.716,263,2.076,264,2.926,265,1.994,266,1.972,267,2.926,268,2.926,269,2.926,270,2.372,271,2.926,272,2.372,273,2.372,274,2.926,275,2.926,276,2.926,277,2.926,278,2.926,279,2.926,280,2.592,281,2.592,282,2.926,283,2.926,284,2.592,285,2.926,286,2.926,287,2.926,288,2.926,289,2.926,290,2.372,291,2.926,292,2.926,293,2.592,294,2.926,295,2.926,296,2.926,297,2.926,298,2.926,299,3.995,300,4.664,301,2.592,302,3.957,303,3.655,304,1.718,305,2.207,306,2.592,307,2.926,308,2.372,309,3.655,310,2.592,311,2.592,312,1.966,313,1.538,314,2.926,315,2.926,316,2.926,317,2.592,318,2.926,319,2.926,320,2.926,321,2.926,322,2.926]],["title/modules/AuthenticationModule.html",[65,1.003,71,2.887]],["body/modules/AuthenticationModule.html",[0,0.054,3,0.062,4,0.055,5,0.055,12,0.008,18,0.282,22,0.062,24,0.005,25,0.005,52,1.528,58,0.4,65,1.188,67,1.281,68,2.106,71,5.827,77,5.162,92,4.338,93,2.218,94,1.523,95,1.483,97,2.364,108,3.104,109,2.951,110,1.224,114,2.465,183,2.603,184,0.905,189,2.465,190,2.106,198,4.754,204,2.465,239,4.871,240,2.767,243,3.27,323,3.25,324,3.669,325,3.25,326,3.25,327,5.449,328,5.449,329,5.449,330,5.162,331,5.449,332,3.669,333,4.754,334,2.809,335,5.344,336,2.072,337,3.669,338,3.669,339,3.25,340,2.603,341,3.669,342,3.669,343,3.669,344,3.669,345,2.603,346,3.669,347,3.669,348,3.669,349,2.603,350,2.974,351,3.669,352,2.974,353,3.669]],["title/injectables/AuthenticationServices.html",[192,0.654,239,2.547]],["body/injectables/AuthenticationServices.html",[0,0.053,3,0.038,4,0.034,5,0.034,8,0.159,11,0.453,12,0.008,13,1.479,16,0.66,18,0.222,22,0.038,23,0.318,24,0.003,25,0.003,30,3.728,35,1.221,36,1.776,40,1.877,54,0.747,57,1.328,58,0.244,62,1.239,63,1.457,102,1.328,103,1.028,109,2.825,110,0.748,155,1.818,157,3.235,184,1.892,192,0.53,193,0.67,201,1.591,204,1.507,205,2.96,211,1.35,219,3.235,220,3.778,223,3.235,237,2.753,238,1.267,239,2.063,241,1.987,256,1.692,257,1.591,260,1.591,261,1.067,262,1.961,265,2.193,266,1.87,302,2.957,304,3.443,311,3.235,312,2.455,340,1.591,349,3.278,352,2.96,354,1.987,355,3.653,356,5.327,357,4.621,358,3.653,359,3.653,360,4.621,361,1.987,362,5.871,363,2.243,364,3.653,365,6.287,366,2.243,367,1.799,368,2.243,369,2.243,370,4.718,371,2.243,372,1.317,373,4.16,374,2.96,375,3.653,376,2.243,377,3.653,378,2.243,379,2.243,380,2.243,381,5.327,382,2.243,383,5.194,384,1.987,385,2.96,386,3.409,387,1.692,388,1.818,389,2.243,390,3.653,391,2.243,392,1.818,393,2.338,394,3.653,395,2.243,396,1.373,397,2.243,398,2.235,399,2.828,400,1.818,401,1.987,402,2.399,403,2.048,404,1.591,405,2.243,406,4.621,407,2.243,408,2.243,409,4.621,410,2.243,411,2.243,412,2.243,413,1.987,414,1.591,415,1.987,416,3.235,417,3.235,418,3.653,419,1.987,420,3.105,421,3.235,422,3.653,423,2.243,424,2.243,425,5.327,426,2.243,427,3.653,428,4.093,429,4.621,430,3.653,431,2.243,432,1.818,433,2.243,434,1.987,435,1.987,436,1.818]],["title/interfaces/BookProperties.html",[437,1.923,438,3.403]],["body/interfaces/BookProperties.html",[3,0.104,4,0.093,5,0.093,8,0.437,9,1.52,11,0.586,12,0.008,13,1.545,22,0.104,24,0.006,25,0.006,40,1.844,437,2.633,438,5.724,439,3.489,440,5.472,441,8.567,442,8.567,443,6.722,444,6.179,445,6.179]],["title/interfaces/CarProperties.html",[437,1.923,446,3.403]],["body/interfaces/CarProperties.html",[3,0.107,4,0.095,5,0.095,8,0.45,9,1.548,11,0.528,12,0.008,13,1.626,22,0.107,24,0.007,25,0.007,437,2.71,439,3.591,446,5.826,447,5.633,448,8.652,449,8.652]],["title/controllers/CategoriesController.html",[50,1.318,450,3.403]],["body/controllers/CategoriesController.html",[0,0.054,3,0.062,4,0.056,5,0.056,8,0.262,11,0.476,12,0.008,14,1.643,16,0.705,18,0.255,22,0.062,23,0.525,24,0.005,25,0.005,33,2.268,35,1.282,50,1.082,52,1.059,54,1.101,57,1.48,58,0.404,61,1.769,62,0.994,63,1.712,102,1.394,103,1.079,184,2.049,200,1.717,211,1.852,224,2.495,226,1.971,228,1.824,242,1.669,244,1.824,313,1.948,450,4.059,451,3.282,452,2.794,453,4.767,454,4.767,455,6.162,456,4.767,457,5.614,458,3.282,459,4.934,460,2.628,461,3.705,462,4.196,463,3.705,464,5.67,465,4.767,466,3.705,467,3.705,468,3.705,469,4.767,470,3.705,471,3.705,472,4.934,473,4.767,474,3.705,475,3.003,476,3.818,477,3.282,478,2.017,479,1.424,480,2.017,481,3.282,482,4.259,483,3.282,484,3.282,485,3.282,486,3.705,487,3.705,488,3.705,489,3.705,490,3.705,491,3.705,492,3.282,493,3.705,494,3.705,495,3.705]],["title/classes/CategoriesNotFoundException.html",[0,0.066,496,3.403]],["body/classes/CategoriesNotFoundException.html",[0,0.089,2,2.132,3,0.103,4,0.092,5,0.092,11,0.417,12,0.008,16,0.583,18,0.196,22,0.103,23,0.866,24,0.006,25,0.006,33,1.99,35,1.124,40,2.439,58,0.665,102,1.223,103,0.947,261,1.783,496,6.162,497,5.406,498,3.597,499,6.162,500,7.532,501,6.104,502,7.532,503,5.406,504,4.947]],["title/entities/Category.html",[26,1.734,462,2.456]],["body/entities/Category.html",[0,0.071,3,0.081,4,0.072,5,0.072,8,0.341,9,1.297,11,0.534,12,0.008,13,1.167,14,1.735,16,0.745,18,0.208,22,0.081,23,0.684,24,0.006,25,0.006,26,2.488,28,2.452,30,4.076,33,2.382,37,4.125,40,1.932,41,4.125,48,1.854,103,1.133,226,3.135,462,3.976,505,4.272,506,7.305,507,5.181,508,4.882,509,7.305,510,4.824,511,4.824,512,4.824,513,4.272,514,6.472,515,6.472,516,4.882,517,4.824,518,3.909,519,5.733]],["title/modules/CategoryModule.html",[65,1.003,72,3.2]],["body/modules/CategoryModule.html",[0,0.084,3,0.096,4,0.086,5,0.086,12,0.008,18,0.276,22,0.096,24,0.006,25,0.006,52,2.066,58,0.622,65,1.607,67,1.995,68,2.849,72,6.227,93,2.999,94,2.371,95,2.31,97,2.143,190,2.849,450,5.979,462,3.11,479,2.196,482,5.899,483,5.06,520,5.06,521,5.06,522,5.713,523,3.11,524,5.713,525,5.06,526,5.713]],["title/controllers/ChargeController.html",[50,1.318,527,3.403]],["body/controllers/ChargeController.html",[0,0.074,3,0.086,4,0.076,5,0.076,8,0.359,11,0.348,12,0.008,14,1.13,16,0.485,18,0.266,22,0.086,23,0.721,24,0.006,25,0.006,35,0.936,50,1.485,52,1.453,54,1.371,57,1.018,58,0.554,61,2.427,62,1.363,63,1.178,102,1.018,103,0.788,184,1.849,200,2.356,207,3.925,210,3.195,211,1.485,224,3.106,225,3.407,226,2.453,228,2.503,242,2.289,244,2.503,266,1.62,313,2.671,460,3.605,480,2.766,527,5.054,528,4.501,529,6.64,530,7.497,531,5.082,532,6.011,533,5.082,534,5.082,535,3.252,536,4.081,537,3.833,538,5.082,539,5.082,540,5.082,541,5.082,542,4.119]],["title/modules/ChargeModule.html",[65,1.003,73,3.2]],["body/modules/ChargeModule.html",[0,0.086,3,0.099,4,0.088,5,0.088,12,0.008,18,0.258,22,0.099,24,0.006,25,0.006,52,2.106,58,0.642,65,1.638,67,2.057,68,2.904,73,6.275,89,4.995,93,3.057,94,2.444,95,2.382,97,2.764,129,4.178,190,2.322,527,6.064,543,5.891,544,5.891,545,5.891,546,5.891]],["title/classes/ChatGateway.html",[0,0.066,547,3.403]],["body/classes/ChatGateway.html",[0,0.058,2,1.374,3,0.066,4,0.059,5,0.059,8,0.278,9,1.126,11,0.517,12,0.008,13,1.183,14,1.458,16,0.722,18,0.21,22,0.066,24,0.005,25,0.005,35,1.318,54,1.15,57,1.314,61,1.879,62,1.056,63,0.912,102,1.433,103,1.109,184,2.079,211,1.15,261,1.15,265,1.958,266,2.412,547,4.24,548,3.486,549,6.969,550,5.621,551,6.558,552,5.621,553,3.936,554,5.287,555,5.621,556,6.558,557,5.621,558,7.964,559,3.936,560,3.936,561,5.621,562,3.936,563,3.597,564,3.936,565,5.621,566,3.936,567,5.621,568,5.621,569,3.936,570,5.621,571,3.19,572,3.19,573,3.486,574,6.558,575,3.777,576,3.334,577,3.936,578,3.936,579,3.936,580,5.621,581,3.936,582,3.936]],["title/modules/ChatModule.html",[65,1.003,74,3.2]],["body/modules/ChatModule.html",[0,0.078,3,0.09,4,0.08,5,0.08,12,0.008,18,0.277,22,0.09,24,0.006,25,0.006,52,1.53,58,0.583,65,1.541,67,1.869,68,2.732,71,5.522,74,6.314,93,2.876,94,2.22,95,2.163,97,2.6,115,4.337,190,2.732,479,2.057,523,2.912,547,5.227,554,5.798,573,4.739,576,2.72,583,4.739,584,4.739,585,5.351,586,5.351,587,5.351,588,4.739,589,5.351]],["title/injectables/ChatService.html",[192,0.654,554,3.031]],["body/injectables/ChatService.html",[0,0.056,3,0.064,4,0.057,5,0.057,8,0.269,11,0.44,12,0.008,13,1.159,16,0.672,18,0.268,22,0.064,24,0.005,25,0.005,35,1.184,36,3.081,48,1.46,54,1.121,57,1.288,58,0.414,62,1.019,63,1.49,102,1.288,103,0.997,184,2.061,192,0.795,193,1.134,201,2.694,211,1.878,239,3.974,261,1.601,262,1.709,263,3.887,265,2.101,266,2.05,302,3.506,402,1.71,403,1.46,416,3.364,478,2.067,479,1.46,554,3.682,558,6.609,563,3.506,571,3.078,572,3.078,575,5.014,576,1.931,588,3.364,590,3.364,591,7.037,592,5.479,593,5.479,594,3.364,595,6.428,596,3.699,597,3.798,598,3.798,599,5.479,600,3.798,601,5.479,602,3.798,603,3.364,604,3.798,605,3.798,606,3.798,607,3.798,608,3.798,609,5.479,610,3.798,611,3.798,612,3.798,613,5.479,614,3.798,615,3.798,616,3.798,617,2.694]],["title/classes/CheckVerificationCodeDto.html",[0,0.066,618,3.403]],["body/classes/CheckVerificationCodeDto.html",[0,0.111,2,2.167,3,0.104,4,0.093,5,0.093,8,0.439,9,1.524,11,0.424,12,0.008,13,1.372,14,1.379,15,3.154,16,0.592,18,0.199,19,3.633,20,3.633,21,2.644,22,0.128,23,0.88,24,0.007,25,0.007,618,6.206,619,5.495,620,6.206,621,6.204]],["title/classes/ConfirmEmailDto.html",[0,0.066,622,3.403]],["body/classes/ConfirmEmailDto.html",[0,0.111,2,2.167,3,0.104,4,0.093,5,0.093,8,0.439,9,1.524,11,0.424,12,0.008,13,1.372,14,1.379,15,3.154,16,0.592,18,0.199,19,3.633,20,3.633,21,2.644,22,0.128,23,0.88,24,0.007,25,0.007,304,4.831,622,6.206,623,5.495,624,6.204]],["title/classes/CreateCategoryDto.html",[0,0.066,459,3.2]],["body/classes/CreateCategoryDto.html",[0,0.111,2,2.167,3,0.104,4,0.093,5,0.093,8,0.439,9,1.524,11,0.424,12,0.008,13,1.372,14,1.379,15,3.154,16,0.592,18,0.199,19,3.633,20,3.633,21,2.644,22,0.128,23,0.88,24,0.007,25,0.007,103,1.276,459,5.837,625,5.495,626,6.204]],["title/classes/CreateChargeDto.html",[0,0.066,532,3.403]],["body/classes/CreateChargeDto.html",[0,0.108,2,2.073,3,0.1,4,0.089,5,0.089,8,0.42,9,1.483,10,6.085,11,0.506,12,0.008,13,1.335,14,1.646,15,3.018,16,0.707,18,0.19,19,3.535,20,3.535,21,2.53,22,0.1,24,0.006,25,0.006,40,2.21,532,5.584,627,5.258,628,7.146,629,5.723,630,5.937,631,5.937]],["title/classes/CreateLogDto.html",[0,0.066,632,3.403]],["body/classes/CreateLogDto.html",[0,0.089,2,2.115,3,0.102,4,0.091,5,0.091,8,0.428,9,1.502,11,0.557,12,0.008,13,1.607,16,0.777,22,0.126,23,0.859,24,0.006,25,0.006,576,4.139,632,6.14,633,5.363,634,5.47,635,6.14,636,6.055,637,6.055,638,6.055]],["title/classes/CreateProductCategoryDto.html",[0,0.066,639,3.2]],["body/classes/CreateProductCategoryDto.html",[0,0.112,2,2.194,3,0.106,4,0.094,5,0.094,8,0.444,9,1.536,11,0.43,12,0.008,13,1.383,14,1.396,15,3.193,16,0.6,18,0.201,19,3.66,20,3.66,21,2.677,22,0.106,24,0.007,25,0.007,103,1.283,639,5.437,640,5.563,641,6.281]],["title/classes/CreateProductDto.html",[0,0.066,642,3.2]],["body/classes/CreateProductDto.html",[0,0.115,2,1.958,3,0.094,4,0.084,5,0.084,8,0.397,9,1.431,11,0.566,12,0.008,13,1.288,14,1.588,15,2.851,16,0.682,18,0.252,19,3.411,20,3.411,21,2.39,22,0.12,23,0.795,24,0.006,25,0.006,103,1.219,414,3.978,462,4.278,642,5.575,643,4.967,644,6.241,645,5.608,646,5.608,647,5.608,648,7.142,649,5.608]],["title/classes/CreateUserDto.html",[0,0.066,650,3.403]],["body/classes/CreateUserDto.html",[0,0.089,2,2.115,3,0.102,4,0.091,5,0.091,8,0.428,9,1.502,11,0.557,12,0.008,13,1.607,16,0.777,22,0.126,23,0.859,24,0.006,25,0.006,103,1.262,367,4.009,396,4.981,650,6.14,651,5.363,652,6.055,653,6.055,654,6.055]],["title/controllers/CreditCardsController.html",[50,1.318,655,3.403]],["body/controllers/CreditCardsController.html",[0,0.058,1,5.421,3,0.067,4,0.06,5,0.06,6,5.098,8,0.281,11,0.451,12,0.008,14,1.466,16,0.63,18,0.261,22,0.067,23,0.564,24,0.005,25,0.005,35,1.215,50,1.162,52,1.137,54,1.159,57,1.321,58,0.433,61,1.899,62,1.067,63,1.312,102,1.321,103,1.023,131,3.223,184,2.084,200,1.843,207,4.221,210,3.539,211,1.654,224,3.057,225,3.353,226,2.074,227,3.223,228,1.958,242,1.791,244,1.958,266,1.268,270,3.223,313,3.467,460,2.821,480,2.165,535,2.545,536,3.59,537,2.999,542,4.59,655,4.271,656,3.522,657,5.663,658,6.596,659,5.663,660,6.596,661,3.977,662,3.977,663,7.187,664,3.977,665,3.977,666,3.977,667,3.977,668,5.421,669,3.977,670,3.977,671,2.999,672,3.977,673,3.977,674,3.977,675,3.977,676,3.977,677,5.663,678,3.977,679,3.977,680,3.977,681,3.977,682,3.977]],["title/modules/CreditCardsModule.html",[65,1.003,75,3.2]],["body/modules/CreditCardsModule.html",[0,0.086,3,0.099,4,0.088,5,0.088,6,4.162,12,0.008,18,0.257,22,0.099,24,0.006,25,0.006,52,2.101,58,0.639,65,1.634,67,2.049,68,2.897,75,6.269,89,4.99,93,3.05,94,2.435,95,2.372,97,2.757,129,4.162,190,2.313,655,6.053,683,5.868,684,5.868,685,5.868,686,5.868]],["title/injectables/CustomLogger.html",[192,0.654,687,3.2]],["body/injectables/CustomLogger.html",[0,0.044,3,0.05,4,0.045,5,0.045,8,0.211,9,0.919,11,0.507,12,0.008,13,1.668,16,0.707,18,0.216,22,0.05,23,0.424,24,0.004,25,0.004,35,1.311,54,0.938,57,1.351,58,0.326,62,1.496,102,1.426,103,1.104,105,4.783,109,3.158,110,0.997,192,0.665,193,0.892,261,1.339,262,1.739,265,0.892,399,4.356,498,2.19,576,4.338,634,6.091,635,5.087,687,3.956,688,2.648,689,5.578,690,5.618,691,4.585,692,3.413,693,4.585,694,4.061,695,2.99,696,5.54,697,6.254,698,4.585,699,4.585,700,2.99,701,5.368,702,4.585,703,6.254,704,2.99,705,4.585,706,2.99,707,4.585,708,2.99,709,4.585,710,2.99,711,2.99,712,2.99,713,2.423,714,2.99,715,2.648,716,2.99,717,2.99,718,2.99,719,2.99,720,2.99,721,2.648,722,2.99,723,2.99,724,6.745,725,2.99,726,2.99,727,4.585]],["title/classes/DatabaseLogger.html",[0,0.066,728,3.403]],["body/classes/DatabaseLogger.html",[0,0.039,2,0.926,3,0.107,4,0.04,5,0.04,8,0.187,9,0.837,11,0.485,12,0.008,13,1.541,16,0.701,18,0.134,22,0.045,23,0.592,24,0.004,25,0.004,35,1.306,40,1.542,48,1.019,54,0.854,57,1.42,58,0.289,62,1.386,63,1.828,102,1.754,103,1.099,105,4.285,211,0.774,262,2.113,372,1.556,393,1.696,398,1.622,399,4.145,403,1.605,576,3.242,635,4.421,692,4.145,694,5.192,701,5.835,728,3.896,729,2.348,730,3.149,731,5.166,732,4.81,733,4.175,734,4.175,735,5.166,736,5.166,737,4.175,738,4.175,739,4.175,740,2.65,741,4.175,742,7.425,743,2.65,744,4.175,745,2.65,746,4.175,747,2.65,748,6.27,749,2.65,750,2.65,751,2.65,752,2.65,753,5.862,754,4.175,755,2.65,756,4.175,757,2.65,758,2.65,759,6.774,760,2.65,761,2.65,762,2.65,763,4.175,764,2.65,765,4.576,766,2.65,767,2.348,768,2.65]],["title/modules/DatabaseModule.html",[65,1.003,76,3.2]],["body/modules/DatabaseModule.html",[0,0.07,3,0.081,4,0.072,5,0.072,11,0.328,12,0.008,18,0.295,22,0.081,24,0.006,25,0.006,27,4.124,28,2.437,36,2.477,58,0.522,65,1.433,67,1.674,76,4.571,97,2.417,108,3.174,109,3.318,110,1.599,152,3.885,183,3.4,186,3.615,189,3.221,226,2.36,396,2.933,403,1.843,462,3.508,479,1.843,518,3.885,523,2.609,576,3.277,692,3.944,728,5.492,732,3.615,769,4.793,770,2.814,771,4.793,772,4.245,773,4.124,774,4.245,775,4.124,776,4.245,777,3.783,778,4.793,779,3.944,780,4.245,781,4.793,782,4.331,783,4.793,784,4.793,785,4.793,786,4.793,787,4.793,788,4.793,789,4.245,790,4.793,791,4.793,792,4.245,793,4.793,794,4.793,795,2.519]],["title/controllers/EmailConfirmationController.html",[50,1.318,796,3.403]],["body/controllers/EmailConfirmationController.html",[0,0.067,3,0.078,4,0.069,5,0.069,8,0.326,11,0.429,12,0.008,14,1.394,16,0.599,18,0.257,22,0.078,24,0.005,25,0.005,35,1.155,50,1.345,52,1.316,54,1.283,57,1.257,58,0.502,62,1.235,102,1.257,103,0.973,184,2.039,200,2.134,207,3.771,210,2.673,224,2.134,225,2.341,226,1.686,228,2.267,231,2.6,232,2.817,235,4.565,242,2.074,244,2.267,251,2.817,261,1.345,262,1.436,265,1.374,266,2.274,313,2.42,367,3.088,480,2.506,535,2.946,622,5.776,796,4.73,797,4.078,798,6.783,799,5.555,800,5.555,801,4.604,802,6.272,803,4.604,804,6.272,805,4.604,806,6.272,807,4.604,808,4.604,809,4.604,810,4.078,811,4.078,812,4.604,813,4.604,814,4.604,815,4.604,816,4.604,817,4.604,818,4.604]],["title/modules/EmailConfirmationModule.html",[65,1.003,77,3.031]],["body/modules/EmailConfirmationModule.html",[0,0.072,3,0.083,4,0.074,5,0.074,12,0.008,18,0.276,22,0.083,24,0.006,25,0.006,52,1.87,58,0.534,65,1.454,67,1.712,68,2.578,77,6.054,92,4.755,93,2.715,94,2.034,95,1.982,97,2.454,108,3.222,110,1.635,114,3.294,190,2.578,235,5.806,334,3.439,339,4.341,340,3.477,796,5.554,810,4.341,819,4.341,820,4.341,821,4.341,822,4.341,823,5.659,824,4.902,825,4.341,826,4.902,827,4.902]],["title/injectables/EmailConfirmationService.html",[192,0.654,235,2.887]],["body/injectables/EmailConfirmationService.html",[0,0.044,3,0.05,4,0.045,5,0.045,8,0.211,11,0.46,12,0.008,13,1.412,16,0.643,18,0.228,22,0.05,24,0.004,25,0.004,27,1.906,30,3.716,35,1.24,36,1.757,40,1.661,54,0.935,57,1.25,58,0.324,62,1.674,63,1.059,102,1.349,103,1.044,109,3.153,110,0.993,174,2.638,175,2.638,184,1.931,192,0.663,193,0.889,211,0.87,235,2.925,237,2.733,238,1.682,257,2.112,261,1.335,262,1.947,265,2.209,266,2.147,304,3.664,340,2.112,349,3.243,352,2.414,362,6.295,367,3.644,373,2.112,393,1.906,398,1.822,399,1.822,402,3.032,403,2.588,404,3.243,420,4.194,421,2.638,432,3.705,434,2.638,798,4.928,800,4.049,828,2.638,829,4.572,830,4.572,831,4.572,832,2.978,833,4.735,834,4.196,835,2.978,836,4.572,837,2.978,838,4.572,839,2.978,840,4.572,841,2.978,842,4.572,843,2.978,844,2.925,845,3.448,846,2.978,847,2.978,848,4.572,849,3.448,850,2.978,851,3.448,852,2.978,853,2.978,854,2.978,855,2.978,856,2.638,857,2.638,858,2.414,859,2.638,860,4.572,861,5.564,862,4.049,863,2.978,864,2.978,865,2.638,866,2.978,867,2.978,868,2.978,869,2.978,870,2.978,871,2.978,872,2.978]],["title/modules/EmailModule.html",[65,1.003,823,3.031]],["body/modules/EmailModule.html",[0,0.083,3,0.096,4,0.085,5,0.085,12,0.008,18,0.254,22,0.096,24,0.006,25,0.006,52,1.627,58,0.62,65,1.603,67,1.988,68,2.842,93,2.992,94,2.362,95,2.301,97,2.135,108,3.551,110,1.898,190,2.842,334,3.79,823,5.985,833,5.933,873,5.041,874,5.041,875,5.041,876,5.692,877,5.692]],["title/controllers/EmailModuleController.html",[50,1.318,878,3.656]],["body/controllers/EmailModuleController.html",[0,0.079,3,0.091,4,0.081,5,0.081,8,0.382,11,0.37,12,0.008,14,1.202,16,0.516,18,0.262,22,0.091,23,0.767,24,0.006,25,0.006,35,0.996,50,1.58,52,1.546,54,1.428,57,1.084,58,0.589,62,1.451,102,1.084,103,0.839,184,1.906,200,2.507,224,2.507,226,1.98,228,2.663,242,2.436,244,2.663,261,1.58,262,1.687,313,2.843,367,2.663,480,2.944,811,4.79,878,5.655,879,4.79,880,6.978,881,6.181,882,4.79,883,5.79,884,5.408,885,5.408,886,6.181,887,5.191,888,4.79,889,4.79,890,5.408,891,5.408,892,5.408]],["title/classes/EmailScheduleDto.html",[0,0.066,883,3.2]],["body/classes/EmailScheduleDto.html",[0,0.101,2,1.849,3,0.089,4,0.079,5,0.079,8,0.374,9,1.379,11,0.554,12,0.008,13,1.602,14,1.8,15,3.5,16,0.773,18,0.17,19,3.652,20,3.652,21,2.256,22,0.116,23,0.751,24,0.006,25,0.006,508,5.768,563,4.894,858,6.198,883,5.425,893,4.69,894,7.648,895,5.295,896,7.648,897,5.295,898,6.774,899,5.295,900,5.295]],["title/modules/EmailSchedulingModule.html",[65,1.003,78,3.2]],["body/modules/EmailSchedulingModule.html",[0,0.083,3,0.096,4,0.085,5,0.085,12,0.008,18,0.267,22,0.096,24,0.006,25,0.006,52,1.621,58,0.618,65,1.599,67,1.98,68,2.835,78,6.389,93,2.985,94,2.353,95,2.293,97,2.698,190,2.835,823,5.887,825,5.023,887,5.887,888,5.023,901,5.023,902,5.023,903,5.671,904,5.671,905,7.193,906,5.671]],["title/injectables/EmailSchedulingService.html",[192,0.654,887,3.031]],["body/injectables/EmailSchedulingService.html",[0,0.069,3,0.08,4,0.071,5,0.071,8,0.335,11,0.437,12,0.008,16,0.61,18,0.26,22,0.08,23,0.671,24,0.005,25,0.005,35,1.177,54,1.307,57,0.948,58,0.516,62,1.714,102,1.28,103,0.991,105,3.181,123,3.836,192,0.927,193,1.413,261,1.867,262,1.993,265,1.908,403,2.457,508,3.57,833,5.335,851,3.57,857,4.192,858,3.836,881,5.66,882,5.66,883,5.495,886,5.66,887,4.294,889,4.192,907,4.192,908,4.733,909,7.235,910,7.747,911,4.733,912,4.733,913,6.391,914,4.733,915,4.733,916,4.733,917,4.733,918,5.179,919,4.733,920,4.733,921,6.391,922,4.733,923,4.733,924,4.733,925,4.733]],["title/injectables/EmailService.html",[192,0.654,833,2.887]],["body/injectables/EmailService.html",[0,0.072,3,0.083,4,0.074,5,0.074,8,0.349,9,1.316,11,0.505,12,0.008,16,0.705,18,0.253,22,0.083,23,0.7,24,0.006,25,0.006,35,1.21,36,1.896,54,1.344,57,0.988,58,0.537,61,2.356,62,1.323,63,1.143,102,1.316,103,1.019,109,3.595,110,1.645,192,0.953,193,1.473,261,1.441,262,2.304,833,4.205,926,4.37,927,7.388,928,6.57,929,3.315,930,6.57,931,6.57,932,7.388,933,4.933,934,4.933,935,7.388,936,6.57,937,4.37,938,4.933,939,4.933,940,4.933,941,4.933,942,3.998,943,4.933,944,4.933,945,4.933,946,4.933]],["title/classes/ExceptionsLoggerFilter.html",[0,0.066,947,3.656]],["body/classes/ExceptionsLoggerFilter.html",[0,0.084,2,1.995,3,0.096,4,0.086,5,0.086,8,0.404,11,0.391,12,0.008,16,0.545,18,0.232,22,0.096,24,0.006,25,0.006,35,1.053,54,1.479,57,1.145,58,0.622,102,1.145,103,0.886,105,4.856,186,6.284,398,5.098,402,2.573,498,3.451,947,5.857,948,5.06,949,7.928,950,7.227,951,8.331,952,5.713,953,7.227,954,5.06,955,5.713,956,5.713]],["title/injectables/ExcludeNullInterceptor.html",[192,0.654,957,3.403]],["body/injectables/ExcludeNullInterceptor.html",[0,0.078,3,0.09,4,0.08,5,0.08,8,0.378,11,0.366,12,0.008,16,0.511,18,0.261,22,0.09,24,0.006,25,0.006,35,0.986,54,1.418,57,1.072,58,0.583,63,1.24,102,1.072,103,0.83,192,1.005,193,1.597,634,4.657,730,4.036,957,5.227,958,4.739,959,7.687,960,5.351,961,6.589,962,7.201,963,8.131,964,5.351,965,6.808,966,4.657,967,6.93,968,4.337,969,5.351,970,5.351,971,5.617,972,5.351,973,5.351,974,4.739]],["title/modules/FileModule.html",[65,1.003,79,3.031]],["body/modules/FileModule.html",[0,0.081,3,0.093,4,0.083,5,0.083,12,0.008,18,0.273,22,0.093,24,0.006,25,0.006,58,0.604,65,1.577,67,1.937,68,2.795,79,5.95,93,2.943,94,2.302,95,2.242,97,2.08,108,3.493,110,1.85,190,2.795,334,3.728,479,2.132,523,3.019,773,3.549,975,4.912,976,4.912,977,4.912,978,6.208,979,5.546,980,5.546,981,4.912,982,5.546]],["title/injectables/FileService.html",[192,0.654,978,3.031]],["body/injectables/FileService.html",[0,0.048,3,0.056,4,0.05,5,0.089,8,0.234,11,0.45,12,0.008,13,1.07,16,0.629,18,0.246,22,0.083,23,0.469,24,0.004,25,0.004,33,1.935,35,1.213,40,2.209,48,1.272,54,1.013,57,1.189,58,0.361,62,0.888,63,0.767,102,1.32,103,1.021,109,3.27,110,1.104,184,1.99,192,0.718,193,0.988,211,0.967,224,1.534,261,1.447,262,1.544,265,2.29,266,2.516,403,2.281,478,1.801,479,1.272,596,3.462,742,6.218,773,2.118,849,2.496,966,3.987,978,3.987,981,2.931,983,2.931,984,4.386,985,5.934,986,4.952,987,3.309,988,3.309,989,4.952,990,4.952,991,3.309,992,6.218,993,3.309,994,3.309,995,4.952,996,3.987,997,5.338,998,3.309,999,4.386,1000,7.275,1001,2.682,1002,2.682,1003,2.931,1004,4.809,1005,3.309,1006,2.931,1007,2.931,1008,5.256,1009,5.934,1010,4.426,1011,4.386,1012,3.309,1013,2.931,1014,3.309,1015,3.309,1016,3.309,1017,4.952,1018,4.386,1019,3.309,1020,3.309,1021,3.309]],["title/classes/FindOneParams.html",[0,0.066,464,3.031]],["body/classes/FindOneParams.html",[0,0.112,2,2.194,3,0.106,4,0.094,5,0.094,8,0.444,9,1.536,11,0.43,12,0.008,13,1.383,14,1.396,16,0.6,18,0.201,21,2.677,22,0.106,23,0.891,24,0.007,25,0.007,33,2.698,464,5.559,1022,5.563,1023,8.273,1024,6.281]],["title/controllers/GoogleAuthenticationController.html",[50,1.318,1025,3.403]],["body/controllers/GoogleAuthenticationController.html",[0,0.071,3,0.082,4,0.073,5,0.073,8,0.344,11,0.333,12,0.008,14,1.083,16,0.465,18,0.251,22,0.082,24,0.006,25,0.006,35,0.897,36,2.504,50,1.423,52,1.392,54,1.333,57,0.976,58,0.531,62,1.306,63,1.129,102,0.976,103,0.755,184,1.81,200,2.257,201,4.621,210,3.658,211,1.423,224,3.019,225,3.312,226,2.687,231,2.75,232,2.98,234,2.398,251,2.98,261,1.423,262,1.519,265,1.454,266,1.553,300,4.913,302,3.116,303,5.279,309,3.947,1025,4.913,1026,4.314,1027,4.314,1028,5.949,1029,4.87,1030,5.911,1031,4.87,1032,6.514,1033,4.87,1034,4.932,1035,4.314,1036,4.87,1037,4.87,1038,4.87]],["title/modules/GoogleAuthenticationModule.html",[65,1.003,80,3.2]],["body/modules/GoogleAuthenticationModule.html",[0,0.075,3,0.087,4,0.077,5,0.077,12,0.008,18,0.274,22,0.087,24,0.006,25,0.006,52,1.933,58,0.561,65,1.503,67,1.799,68,2.665,71,5.465,80,6.394,92,4.822,93,2.805,94,2.138,95,2.083,97,2.536,108,3.329,110,1.718,114,3.461,115,4.175,190,2.665,334,2.708,1025,5.692,1034,5.738,1035,4.562,1039,4.562,1040,5.151,1041,4.562,1042,5.151,1043,5.151]],["title/injectables/GoogleAuthenticationService.html",[192,0.654,1034,3.031]],["body/injectables/GoogleAuthenticationService.html",[0,0.041,3,0.047,4,0.042,5,0.042,8,0.197,9,0.869,11,0.494,12,0.008,13,1.464,16,0.689,18,0.232,22,0.047,24,0.004,25,0.004,35,1.273,36,3.121,54,0.887,57,1.307,58,0.303,62,1.43,63,1.602,102,1.385,103,1.158,109,3.076,110,0.928,184,2.075,192,0.629,193,0.83,211,1.906,237,2.636,238,1.571,239,3.398,261,1.267,262,1.662,263,3.78,265,2.456,266,2.302,300,4.539,301,2.464,302,1.78,303,4.878,304,3.83,305,2.098,306,2.464,308,2.254,367,3.213,393,1.78,398,1.702,399,2.654,402,1.953,403,2.049,536,1.514,603,2.464,770,1.633,834,3.271,859,2.464,942,3.514,1027,2.464,1028,3.514,1034,2.914,1044,2.464,1045,5.33,1046,4.337,1047,4.337,1048,4.337,1049,4.337,1050,2.782,1051,4.337,1052,4.337,1053,2.782,1054,4.337,1055,2.782,1056,4.337,1057,2.782,1058,4.337,1059,2.782,1060,4.337,1061,2.782,1062,4.337,1063,3.271,1064,2.464,1065,2.464,1066,2.782,1067,2.782,1068,4.337,1069,2.782,1070,4.337,1071,2.782,1072,2.782,1073,2.782,1074,2.782,1075,4.337,1076,2.782,1077,2.782,1078,2.782,1079,2.464,1080,2.782,1081,2.464,1082,2.782,1083,2.782,1084,2.782,1085,2.782,1086,2.782,1087,2.782,1088,2.782,1089,2.782,1090,2.782,1091,2.782,1092,2.782]],["title/injectables/HttpCacheInterceptor.html",[192,0.654,1093,3.403]],["body/injectables/HttpCacheInterceptor.html",[0,0.079,3,0.091,4,0.081,5,0.081,8,0.382,11,0.37,12,0.008,13,1.259,16,0.516,18,0.173,22,0.091,24,0.006,25,0.006,35,0.996,54,1.428,57,1.084,58,0.589,63,1.617,102,1.084,103,0.839,192,1.012,193,1.614,210,2.305,265,2.083,312,4.689,498,3.332,634,3.634,961,6.616,1093,5.263,1094,4.79,1095,6.843,1096,6.978,1097,6.978,1098,5.408,1099,6.978,1100,6.843,1101,5.408,1102,5.408,1103,4.79,1104,5.408,1105,5.408,1106,6.978,1107,5.408]],["title/classes/ImageProcessor.html",[0,0.066,1108,3.403]],["body/classes/ImageProcessor.html",[0,0.066,2,1.57,3,0.076,4,0.067,5,0.067,8,0.436,11,0.307,12,0.008,14,0.999,16,0.429,18,0.263,22,0.104,23,0.637,24,0.005,25,0.005,35,0.828,54,1.262,57,0.901,63,1.042,102,0.901,103,0.697,127,3.188,184,1.738,234,3.038,265,2.45,266,1.433,403,1.728,918,6.44,966,3.02,996,3.02,1108,5.313,1109,3.981,1110,6.17,1111,6.17,1112,8.407,1113,6.17,1114,4.495,1115,4.495,1116,4.495,1117,3.643,1118,6.17,1119,3.981,1120,5.465,1121,5.465,1122,6.17,1123,3.981,1124,4.495,1125,3.39,1126,3.643,1127,4.495,1128,4.495,1129,4.495,1130,4.495,1131,4.495,1132,4.495,1133,4.495,1134,4.495,1135,4.495,1136,4.495,1137,4.495,1138,4.495,1139,4.495,1140,4.495,1141,4.495,1142,4.495,1143,3.981,1144,4.495,1145,4.495]],["title/injectables/JwtAuthenticationGuard.html",[192,0.654,242,2.032]],["body/injectables/JwtAuthenticationGuard.html",[0,0.094,3,0.108,4,0.097,5,0.097,12,0.008,18,0.25,22,0.108,23,0.913,24,0.007,25,0.007,58,0.702,192,1.129,193,1.923,242,3.505,243,3.941,272,5.22,273,5.22,336,3.637,498,3.076,1146,3.941,1147,5.705,1148,4.858,1149,5.22,1150,6.441]],["title/injectables/JwtRefreshGuard.html",[192,0.654,245,3.403]],["body/injectables/JwtRefreshGuard.html",[0,0.095,3,0.109,4,0.097,5,0.097,12,0.008,18,0.251,22,0.109,23,0.921,24,0.007,25,0.007,58,0.708,192,1.135,193,1.939,204,4.365,245,5.901,304,3.813,336,3.668,498,3.102,1146,3.975,1148,4.899,1149,5.264,1151,5.753]],["title/injectables/JwtRefreshTokenStrategy.html",[192,0.654,327,3.2]],["body/injectables/JwtRefreshTokenStrategy.html",[0,0.063,3,0.073,4,0.065,5,0.065,8,0.305,11,0.41,12,0.008,16,0.573,18,0.267,22,0.073,24,0.005,25,0.005,35,1.105,54,1.227,57,0.865,58,0.47,62,1.609,63,1.39,102,1.202,103,0.93,109,3.455,110,1.44,184,1.701,192,0.87,193,1.288,204,5.007,210,3.543,211,1.261,234,2.125,237,3.641,238,2.437,243,3.671,261,1.752,262,1.871,265,1.288,304,2.534,305,4.525,327,4.255,336,2.437,386,4.769,387,3.255,420,4.633,435,3.823,498,2.061,795,2.269,929,2.9,1146,4.219,1152,3.823,1153,4.525,1154,4.316,1155,5.999,1156,4.316,1157,3.498,1158,4.255,1159,3.061,1160,4.525,1161,3.255,1162,3.498,1163,3.498,1164,4.316,1165,3.498,1166,4.316,1167,4.316,1168,4.316,1169,4.316]],["title/injectables/JwtTwoFactorGuard.html",[192,0.654,1170,3.403]],["body/injectables/JwtTwoFactorGuard.html",[0,0.095,3,0.109,4,0.097,5,0.097,12,0.008,18,0.25,22,0.109,23,0.917,24,0.007,25,0.007,58,0.705,192,1.132,193,1.931,336,3.652,345,5.535,498,3.089,1146,3.958,1148,4.878,1149,5.242,1170,5.885,1171,5.729,1172,5.729]],["title/injectables/JwtTwoFactorStrategy.html",[192,0.654,328,3.2]],["body/injectables/JwtTwoFactorStrategy.html",[0,0.064,3,0.073,4,0.065,5,0.065,8,0.307,11,0.412,12,0.008,16,0.575,18,0.267,22,0.073,24,0.005,25,0.005,35,1.11,36,2.659,54,1.232,57,0.87,58,0.473,62,1.615,63,1.603,102,1.207,103,0.934,109,3.461,110,1.448,184,1.706,192,0.874,193,1.296,210,2.947,211,1.268,234,2.138,237,3.647,238,2.451,243,3.686,261,1.759,262,1.878,265,1.296,266,1.384,310,3.845,328,4.272,336,2.451,345,5.299,350,3.518,386,4.78,387,3.274,420,2.917,436,3.518,498,2.073,929,2.917,1146,4.232,1153,4.543,1157,3.518,1158,4.272,1159,3.079,1160,4.543,1161,3.274,1162,3.518,1163,3.518,1165,3.518,1172,3.845,1173,3.845,1174,4.341,1175,5.335,1176,4.341,1177,3.845,1178,4.341]],["title/injectables/LocalAuthentication.html",[192,0.654,247,3.403]],["body/injectables/LocalAuthentication.html",[0,0.095,3,0.109,4,0.097,5,0.097,12,0.008,18,0.251,22,0.109,24,0.007,25,0.007,58,0.708,192,1.135,193,1.939,247,5.901,272,5.264,273,5.264,336,3.668,498,3.102,1148,4.899,1158,4.608,1179,5.753,1180,6.496,1181,5.264]],["title/injectables/LocalStrategy.html",[192,0.654,329,3.2]],["body/injectables/LocalStrategy.html",[0,0.074,3,0.085,4,0.076,5,0.076,8,0.356,11,0.455,12,0.008,13,1.53,16,0.635,18,0.265,22,0.085,24,0.006,25,0.006,35,1.226,36,1.934,54,1.362,57,1.008,58,0.548,61,2.403,63,1.166,102,1.334,103,1.032,184,1.84,192,0.966,193,1.502,239,4.483,240,3.795,261,1.47,263,4.722,329,4.722,336,2.841,367,3.278,396,4.858,498,2.403,594,4.457,770,2.954,966,4.473,1153,5.021,1158,3.569,1159,3.569,1160,3.795,1161,3.795,1181,4.078,1182,4.457,1183,5.032,1184,6.657,1185,5.032,1186,4.457,1187,5.032,1188,5.032]],["title/entities/Log.html",[26,1.734,692,2.761]],["body/entities/Log.html",[0,0.072,3,0.083,4,0.074,5,0.074,8,0.348,9,1.314,11,0.56,12,0.008,13,1.52,14,1.822,16,0.782,18,0.158,22,0.083,23,0.697,24,0.006,25,0.006,26,2.52,28,2.5,30,4.088,33,2.405,37,4.859,40,1.957,41,4.165,48,1.89,508,4.945,576,3.75,634,4.956,635,5.563,692,4.513,1189,4.355,1190,7.376,1191,4.917,1192,7.376,1193,4.917,1194,4.917,1195,4.917,1196,4.917]],["title/modules/LoggerModule.html",[65,1.003,81,3.2]],["body/modules/LoggerModule.html",[0,0.078,3,0.09,4,0.08,5,0.08,12,0.008,18,0.277,22,0.09,24,0.006,25,0.006,58,0.581,65,1.537,67,1.862,68,2.725,81,6.377,93,2.869,94,2.213,95,2.156,97,2,108,3.405,110,1.778,190,2.725,334,3.635,479,2.05,523,2.902,687,6.55,690,5.792,692,3.263,715,4.723,1197,4.723,1198,4.723,1199,4.723,1200,5.332,1201,4.723,1202,5.332]],["title/injectables/LogsMiddleware.html",[138,3.403,192,0.654]],["body/injectables/LogsMiddleware.html",[0,0.066,3,0.076,4,0.068,5,0.068,8,0.32,9,1.241,11,0.309,12,0.008,16,0.591,18,0.199,22,0.076,23,0.879,24,0.005,25,0.005,35,0.833,54,1.267,57,0.906,58,0.493,62,1.895,63,1.637,102,0.906,103,0.701,105,3.038,138,5.33,192,0.899,193,1.35,210,3.239,225,3.15,229,5.392,233,5.108,234,2.227,262,2.204,265,2.109,372,2.655,403,2.381,576,2.299,730,3.41,732,5.733,765,4.005,767,4.005,962,6.733,1203,4.005,1204,6.195,1205,6.195,1206,7.601,1207,4.522,1208,6.195,1209,4.522,1210,6.195,1211,4.522,1212,5.487,1213,6.195,1214,7.601,1215,6.195,1216,4.522,1217,4.522,1218,4.522]],["title/injectables/LogsService.html",[192,0.654,690,3.031]],["body/injectables/LogsService.html",[0,0.074,3,0.085,4,0.076,5,0.076,8,0.356,11,0.455,12,0.008,16,0.635,18,0.265,22,0.085,23,0.714,24,0.006,25,0.006,35,1.226,48,1.934,54,1.362,57,1.008,58,0.548,63,1.166,102,1.334,103,1.032,184,1.84,192,0.966,193,1.502,211,1.47,261,1.945,262,1.569,265,1.502,266,2.123,478,2.739,479,1.934,596,4.173,632,5.988,690,4.473,692,4.074,795,2.645,1201,4.457,1219,4.457,1220,6.657,1221,5.032,1222,5.032,1223,6.657,1224,6.657,1225,5.032,1226,5.032,1227,5.032,1228,6.657,1229,5.032,1230,5.032,1231,4.457,1232,5.032]],["title/entities/Message.html",[26,1.734,576,2.294]],["body/entities/Message.html",[0,0.078,3,0.09,4,0.08,5,0.08,8,0.377,9,1.385,11,0.525,12,0.008,13,1.247,14,1.706,16,0.733,18,0.222,22,0.09,23,0.756,24,0.006,25,0.006,26,2.658,28,2.711,30,4.049,33,2.502,36,3.121,37,4.333,40,2.064,41,4.333,48,2.05,563,4.911,575,5.156,576,3.902,770,3.13,1233,4.723,1234,4.321,1235,5.332,1236,5.332,1237,5.332,1238,5.215]],["title/classes/ObjectWithDto.html",[0,0.066,644,3.403]],["body/classes/ObjectWithDto.html",[0,0.112,2,2.194,3,0.106,4,0.094,5,0.094,8,0.444,9,1.536,11,0.43,12,0.008,14,1.396,16,0.6,18,0.201,21,2.677,22,0.106,23,0.891,24,0.007,25,0.007,33,2.698,40,2.288,629,5.869,644,6.24,1239,5.563,1240,6.281]],["title/controllers/OptimizeController.html",[50,1.318,1241,3.403]],["body/controllers/OptimizeController.html",[0,0.059,3,0.068,4,0.061,5,0.061,8,0.287,11,0.393,12,0.008,13,1.204,14,1.278,16,0.549,18,0.255,22,0.068,24,0.005,25,0.005,33,2.176,35,1.059,50,1.187,52,1.161,54,1.176,57,1.152,58,0.443,62,1.09,63,1.546,102,1.152,103,0.892,127,2.881,184,1.961,200,1.883,211,1.679,226,1.487,229,2.881,231,2.294,233,5.342,234,2.831,261,1.187,262,1.267,265,2.286,266,2.128,476,2.881,918,5.408,1117,3.292,1125,5.033,1126,5.408,1241,4.336,1242,3.598,1243,3.598,1244,5.749,1245,5.749,1246,4.062,1247,5.749,1248,4.062,1249,4.062,1250,4.062,1251,4.062,1252,4.062,1253,4.062,1254,3.292,1255,4.062,1256,5.749,1257,4.062,1258,4.659,1259,4.062,1260,4.062,1261,4.062,1262,4.062,1263,4.062,1264,4.062,1265,4.062,1266,4.062,1267,4.062,1268,4.062,1269,4.062,1270,4.062,1271,4.062,1272,5.749,1273,4.062,1274,4.062,1275,3.292,1276,4.062,1277,4.062,1278,4.062]],["title/modules/OptimizeModule.html",[65,1.003,82,3.2]],["body/modules/OptimizeModule.html",[0,0.082,3,0.095,4,0.084,5,0.084,12,0.008,18,0.274,22,0.095,24,0.006,25,0.006,52,2.047,58,0.613,65,1.592,67,1.966,82,5.078,97,2.111,103,1.11,126,4.985,127,3.992,190,2.218,334,2.959,428,6.341,1108,4.245,1143,4.985,1241,5.938,1243,4.985,1279,5.629,1280,5.629,1281,4.985,1282,5.629,1283,5.629,1284,5.629,1285,5.629,1286,5.629]],["title/classes/PaginationParams.html",[0,0.066,1287,3.403]],["body/classes/PaginationParams.html",[0,0.11,2,1.799,3,0.087,4,0.077,5,0.077,8,0.364,9,1.355,11,0.595,12,0.008,14,1.678,16,0.72,18,0.217,21,2.195,22,0.087,24,0.006,25,0.006,35,1.573,40,2.666,414,3.654,629,5.683,1287,5.099,1288,4.562,1289,5.692,1290,5.692,1291,5.692,1292,6.761,1293,5.151,1294,5.151,1295,5.151,1296,5.151,1297,5.151,1298,6.494,1299,6.761,1300,5.151]],["title/entities/Post.html",[26,1.734,226,1.652]],["body/entities/Post.html",[0,0.06,3,0.07,4,0.062,5,0.062,8,0.411,9,1.165,11,0.527,12,0.008,13,1.442,14,1.713,16,0.735,18,0.216,22,0.07,23,0.585,24,0.005,25,0.005,26,2.235,28,2.099,30,4.096,33,2.195,36,2.962,37,4.35,40,1.736,41,3.801,48,1.587,226,2.465,452,5.078,462,4.564,513,3.656,516,4.386,519,5.151,563,2.642,575,5.177,770,2.423,772,3.656,795,3.842,1238,4.386,1301,3.656,1302,4.775,1303,4.775,1304,4.128,1305,5.815,1306,4.128,1307,5.815,1308,4.128,1309,4.128,1310,4.128,1311,5.815,1312,5.151,1313,4.128,1314,4.128,1315,5.815,1316,3.656,1317,4.128]],["title/interfaces/PostCountResult.html",[437,1.923,1318,3.403]],["body/interfaces/PostCountResult.html",[3,0.11,4,0.098,5,0.098,8,0.463,9,1.576,11,0.448,12,0.008,22,0.11,23,0.929,24,0.007,25,0.007,40,2.515,437,2.792,439,3.7,1318,6.355,1319,5.803,1320,7.083]],["title/classes/PostNotFoundException.html",[0,0.066,1321,3.403]],["body/classes/PostNotFoundException.html",[0,0.089,2,2.132,3,0.103,4,0.092,5,0.092,11,0.417,12,0.008,16,0.583,18,0.196,22,0.103,23,0.866,24,0.006,25,0.006,33,1.99,35,1.124,40,2.439,58,0.665,102,1.223,103,0.947,261,1.783,498,3.597,499,6.162,503,5.406,504,4.947,1321,6.162,1322,5.406,1323,7.532,1324,6.104,1325,6.672]],["title/interfaces/PostSearchBody.html",[437,1.923,1326,3.2]],["body/interfaces/PostSearchBody.html",[3,0.099,4,0.088,5,0.088,8,0.415,9,1.473,11,0.575,12,0.008,13,1.594,22,0.099,23,0.832,24,0.006,25,0.006,33,2.743,40,2.638,437,2.501,439,3.313,1302,5.967,1303,5.967,1326,5.693,1327,5.197,1328,7.451]],["title/interfaces/PostSearchResult.html",[437,1.923,1329,3.403]],["body/interfaces/PostSearchResult.html",[3,0.104,4,0.093,5,0.093,8,0.439,9,1.524,11,0.563,12,0.008,18,0.199,22,0.104,23,0.88,24,0.007,25,0.007,40,1.852,372,3.642,437,2.644,439,3.503,443,6.738,1312,5.495,1326,4.4,1329,6.206,1330,5.495,1331,7.797,1332,6.204,1333,6.204]],["title/injectables/PostSearchService.html",[192,0.654,1334,3.031]],["body/injectables/PostSearchService.html",[0,0.035,3,0.04,4,0.036,5,0.036,8,0.516,9,0.768,11,0.465,12,0.008,13,1.351,16,0.649,18,0.207,22,0.04,23,0.682,24,0.005,25,0.003,33,2.107,35,1.19,40,2.285,54,0.784,57,1.211,58,0.259,61,1.137,62,0.638,63,1.401,102,1.295,103,1.002,184,2.007,192,0.556,193,0.711,211,1.611,224,3.149,226,2.671,261,0.695,265,2.11,266,1.759,372,2.825,475,3.106,507,2.719,701,2.891,748,5.237,851,4.16,1010,1.599,1275,3.106,1289,4.16,1290,4.16,1291,4.873,1302,3.912,1303,3.912,1318,1.795,1320,4.9,1325,4.262,1326,2.719,1328,3.395,1329,1.795,1331,2.108,1334,2.575,1335,2.108,1336,3.833,1337,3.395,1338,3.833,1339,2.38,1340,6.461,1341,3.833,1342,3.833,1343,6.461,1344,2.38,1345,3.833,1346,2.38,1347,3.833,1348,2.38,1349,3.833,1350,2.38,1351,3.899,1352,3.833,1353,2.38,1354,1.929,1355,1.929,1356,2.38,1357,2.38,1358,2.38,1359,2.38,1360,6.047,1361,4.811,1362,3.833,1363,3.833,1364,3.833,1365,2.38,1366,3.833,1367,2.38,1368,4.885,1369,2.38,1370,2.38,1371,2.38,1372,2.38,1373,2.38,1374,2.38,1375,2.38,1376,2.38,1377,2.108,1378,2.108,1379,2.108,1380,2.38,1381,2.38,1382,2.38,1383,2.38,1384,2.108,1385,2.108,1386,2.38,1387,2.38,1388,2.38,1389,2.38,1390,2.108,1391,2.38,1392,2.38,1393,2.38,1394,3.833,1395,3.833,1396,2.38,1397,2.108,1398,4.811,1399,2.38,1400,2.38,1401,2.38,1402,3.833,1403,2.38,1404,2.38]],["title/controllers/PostsController.html",[50,1.318,1405,3.403]],["body/controllers/PostsController.html",[0,0.043,3,0.05,4,0.045,5,0.045,8,0.21,11,0.46,12,0.008,13,1.28,14,1.494,16,0.642,18,0.268,22,0.05,23,0.421,24,0.004,25,0.004,33,2.192,35,1.238,50,0.867,52,0.848,54,0.932,57,1.347,58,0.323,61,1.417,62,0.796,63,1.558,102,1.347,103,1.042,184,1.929,200,1.375,207,3.067,211,1.331,224,2.113,225,3.417,226,2.792,228,1.461,231,1.675,232,1.815,242,1.336,244,1.461,251,1.815,252,2.627,253,4.037,254,4.037,255,3.694,256,2.237,257,2.104,258,4.037,259,4.037,260,3.233,280,2.627,312,1.993,345,2.104,464,4.965,465,4.037,469,4.037,473,4.037,475,2.404,476,3.233,477,2.627,480,1.615,481,2.627,507,2.104,535,1.898,748,3.694,957,2.237,1093,2.237,1095,2.627,1100,2.627,1146,1.815,1170,2.237,1287,4.698,1289,4.698,1290,3.438,1291,4.186,1337,4.916,1379,2.627,1405,3.438,1406,2.627,1407,4.037,1408,4.037,1409,4.037,1410,4.916,1411,4.916,1412,2.627,1413,4.418,1414,2.966,1415,2.966,1416,2.627,1417,2.966,1418,2.966,1419,2.966,1420,2.966,1421,2.966,1422,2.966,1423,2.966,1424,4.698,1425,2.966,1426,2.966,1427,2.966,1428,3.73,1429,2.627,1430,2.627,1431,2.627,1432,4.037,1433,2.966,1434,2.966,1435,2.237,1436,2.627,1437,2.966,1438,2.966,1439,2.966,1440,2.966,1441,2.966,1442,2.404,1443,2.404,1444,2.966,1445,2.966,1446,2.966,1447,2.627,1448,2.966,1449,2.966,1450,2.966,1451,2.966,1452,2.966,1453,2.966,1454,2.966,1455,2.966,1456,2.966,1457,2.966,1458,2.966,1459,2.966,1460,2.966,1461,2.966]],["title/modules/PostsModule.html",[65,1.003,83,3.2]],["body/modules/PostsModule.html",[0,0.068,3,0.078,4,0.07,5,0.07,12,0.008,18,0.281,22,0.078,24,0.005,25,0.005,52,1.808,58,0.508,65,1.406,67,1.628,68,2.493,83,6.278,87,5.576,93,2.624,94,1.934,95,1.884,97,2.692,108,3.114,109,3.28,110,1.555,119,4.128,152,3.777,183,3.306,185,3.777,186,3.515,187,4.128,189,3.132,190,2.493,479,1.792,523,2.537,1334,5.576,1355,3.777,1405,5.414,1428,5.576,1429,4.128,1462,4.128,1463,4.661,1464,4.128,1465,4.661,1466,4.661,1467,4.661,1468,4.661,1469,4.128,1470,6.324,1471,3.777,1472,3.777,1473,5.601,1474,4.661,1475,4.661,1476,4.661,1477,4.661,1478,4.661]],["title/injectables/PostsService.html",[192,0.654,1428,3.031]],["body/injectables/PostsService.html",[0,0.028,3,0.033,4,0.029,5,0.029,8,0.137,9,0.649,11,0.446,12,0.008,13,0.879,16,0.667,18,0.236,22,0.033,23,0.459,24,0.004,25,0.003,33,2.208,35,1.201,36,2.505,40,2.637,48,0.745,54,0.663,57,1.306,58,0.211,62,1.119,63,1.441,102,1.306,103,1.011,184,2.074,189,1.303,192,0.47,193,0.579,211,1.711,226,2.688,261,0.946,262,1.827,265,2.086,266,2.53,372,1.138,402,1.879,403,2.084,478,1.056,479,0.745,575,3.642,596,2.562,617,3.457,696,4.317,701,5.271,732,3.676,770,1.138,851,3.147,1289,5.538,1290,4.915,1291,5.648,1320,4.748,1321,1.463,1334,3.275,1351,1.572,1355,1.572,1368,3.695,1377,1.718,1378,1.718,1384,1.718,1385,1.718,1390,1.718,1397,2.869,1407,2.869,1408,3.695,1409,2.869,1410,3.695,1411,4.801,1412,2.869,1413,3.457,1416,2.869,1428,2.177,1430,1.718,1431,4.317,1432,1.718,1435,1.463,1436,1.718,1442,1.572,1443,1.572,1469,1.718,1471,4.393,1472,1.572,1479,1.718,1480,4.874,1481,3.24,1482,4.172,1483,1.939,1484,4.172,1485,4.172,1486,3.24,1487,3.24,1488,1.939,1489,1.939,1490,1.939,1491,3.24,1492,1.939,1493,1.939,1494,4.874,1495,1.939,1496,3.24,1497,1.939,1498,1.939,1499,1.939,1500,3.24,1501,1.939,1502,3.24,1503,1.939,1504,1.939,1505,1.939,1506,1.939,1507,1.939,1508,1.939,1509,1.939,1510,1.939,1511,1.939,1512,1.939,1513,1.939,1514,1.939,1515,1.939,1516,1.939,1517,1.939,1518,4.801,1519,1.939,1520,1.939,1521,1.939,1522,1.939,1523,1.939,1524,1.718,1525,1.718,1526,1.939,1527,3.24,1528,1.939,1529,1.939,1530,1.572,1531,4.172,1532,1.939,1533,1.939,1534,1.939,1535,4.172,1536,1.939,1537,1.939,1538,1.939,1539,1.939,1540,1.939,1541,1.939,1542,3.24,1543,1.939,1544,1.939,1545,1.939,1546,1.939,1547,1.939]],["title/entities/PrivateFile.html",[26,1.734,775,2.887]],["body/entities/PrivateFile.html",[0,0.076,3,0.088,4,0.078,5,0.078,8,0.368,9,1.364,11,0.519,12,0.008,13,1.228,14,1.686,16,0.724,18,0.218,22,0.088,23,0.738,24,0.006,25,0.006,26,2.616,28,2.646,30,4.03,33,2.473,36,3.209,37,4.283,40,2.032,41,4.283,48,2,770,3.055,775,4.853,1010,5.096,1234,4.218,1238,5.133,1548,4.609,1549,7.394,1550,5.204,1551,5.204,1552,6.806,1553,5.204]],["title/injectables/PrivateFileService.html",[192,0.654,1554,3.031]],["body/injectables/PrivateFileService.html",[0,0.048,3,0.083,4,0.049,5,0.049,8,0.231,11,0.448,12,0.008,13,1.33,16,0.625,18,0.245,22,0.055,24,0.004,25,0.004,30,3.32,33,1.602,35,1.207,40,2.2,48,1.258,54,1.005,57,1.181,58,0.357,62,0.878,63,1.366,102,1.313,103,1.016,109,2.792,110,1.092,184,1.984,192,0.713,193,0.977,211,1.722,224,1.517,261,1.435,262,1.532,265,2.282,266,2.089,402,1.474,403,2.518,478,1.782,479,1.258,499,3.705,596,3.444,617,2.322,775,2.095,966,2.2,992,3.981,996,3.961,997,5.309,999,5.222,1000,7.123,1001,2.653,1002,2.653,1003,2.899,1004,4.778,1006,2.899,1007,2.899,1008,5.222,1010,4.953,1011,4.351,1013,2.899,1258,3.981,1549,4.351,1554,3.301,1555,2.899,1556,4.912,1557,3.981,1558,5.895,1559,3.274,1560,5.895,1561,3.274,1562,4.912,1563,4.912,1564,3.274,1565,4.912,1566,3.274,1567,3.274,1568,6.551,1569,3.274,1570,2.899,1571,3.274,1572,5.895,1573,3.274,1574,3.274,1575,5.895,1576,3.274,1577,3.274,1578,3.274,1579,3.274,1580,3.274]],["title/modules/PrivateFilesModule.html",[65,1.003,84,3.031]],["body/modules/PrivateFilesModule.html",[0,0.081,3,0.093,4,0.083,5,0.083,12,0.008,18,0.273,22,0.093,24,0.006,25,0.006,58,0.6,65,1.569,67,1.923,68,2.782,84,5.941,93,2.929,94,2.285,95,2.226,97,2.065,108,3.476,110,1.836,190,2.782,334,3.711,479,2.117,523,2.997,775,3.524,1554,6.201,1570,4.877,1581,4.877,1582,4.877,1583,4.877,1584,5.506,1585,5.506,1586,5.506]],["title/entities/Product.html",[26,1.734,777,2.648]],["body/entities/Product.html",[0,0.066,3,0.076,4,0.067,5,0.067,8,0.318,9,1.592,11,0.543,12,0.008,13,1.113,14,1.686,16,0.724,18,0.243,22,0.076,23,0.637,24,0.005,25,0.005,26,2.372,28,2.285,30,4.03,33,2.297,37,4.281,40,1.842,41,3.978,48,1.728,103,1.092,438,5.313,446,5.313,462,4.325,516,4.653,777,4.135,779,4.862,780,3.981,795,3.986,1234,3.643,1238,4.653,1587,3.981,1588,6.17,1589,5.465,1590,4.495,1591,4.495,1592,4.495,1593,4.495,1594,6.17,1595,4.495,1596,4.495,1597,4.495]],["title/controllers/ProductCategoriesController.html",[50,1.318,1598,3.403]],["body/controllers/ProductCategoriesController.html",[0,0.074,3,0.085,4,0.076,5,0.076,8,0.358,11,0.346,12,0.008,14,1.486,16,0.638,18,0.255,22,0.085,23,0.718,24,0.006,25,0.006,35,0.933,50,1.48,52,1.448,54,1.368,57,1.34,58,0.552,61,2.419,62,1.359,63,1.549,102,1.015,103,0.785,184,1.846,200,2.348,211,1.48,224,2.348,226,2.448,228,2.494,231,2.86,232,3.099,242,2.281,244,2.494,251,3.099,313,2.662,452,5.043,460,3.593,480,2.757,639,5.646,777,2.973,779,4.091,1598,5.043,1599,4.486,1600,5.419,1601,6.451,1602,5.065,1603,5.065,1604,5.065,1605,4.743,1606,4.486,1607,4.486,1608,5.065,1609,3.82,1610,5.065,1611,4.486,1612,5.065]],["title/modules/ProductCategoriesModule.html",[65,1.003,85,3.2]],["body/modules/ProductCategoriesModule.html",[0,0.09,3,0.104,4,0.093,5,0.093,12,0.008,18,0.282,22,0.104,24,0.006,25,0.006,52,2.17,58,0.673,65,1.687,67,2.158,85,5.383,97,2.317,190,2.435,479,2.375,523,3.363,779,3.781,1598,6.195,1605,5.383,1606,5.472,1613,6.179,1614,5.472,1615,6.179,1616,6.179]],["title/entities/ProductCategory.html",[26,1.734,779,2.761]],["body/entities/ProductCategory.html",[0,0.076,3,0.088,4,0.078,5,0.078,8,0.368,9,1.364,11,0.519,12,0.008,13,1.228,14,1.686,16,0.724,18,0.218,22,0.088,23,0.738,24,0.006,25,0.006,26,2.616,28,2.646,30,4.03,33,2.473,37,4.283,40,2.032,41,4.283,48,2,103,1.176,777,5.122,779,4.641,1617,4.609,1618,6.718,1619,5.204,1620,5.204,1621,4.609,1622,6.806,1623,5.204,1624,6.028,1625,5.204]],["title/injectables/ProductService.html",[192,0.654,1609,3.403]],["body/injectables/ProductService.html",[0,0.072,3,0.083,4,0.074,5,0.074,8,0.35,11,0.45,12,0.008,16,0.706,18,0.263,22,0.083,23,0.702,24,0.006,25,0.006,35,1.213,48,1.903,54,1.347,57,1.319,58,0.539,63,1.526,102,1.319,103,1.021,184,1.825,192,0.955,193,1.477,211,1.446,261,1.923,262,1.544,265,1.477,266,2.1,478,2.694,479,1.903,596,4.146,642,5.595,777,3.865,1600,5.336,1601,6.392,1609,4.966,1626,4.384,1627,4.949,1628,4.949,1629,6.585,1630,5.832,1631,4.949,1632,4.949,1633,4.384,1634,4.384,1635,4.949,1636,4.949,1637,6.585,1638,4.949,1639,4.949]],["title/controllers/ProductsController.html",[50,1.318,1640,3.403]],["body/controllers/ProductsController.html",[0,0.075,3,0.086,4,0.077,5,0.077,8,0.363,11,0.351,12,0.008,14,1.5,16,0.644,18,0.257,22,0.086,23,0.728,24,0.006,25,0.006,35,0.946,50,1.5,52,1.468,54,1.38,57,1.351,58,0.559,61,2.451,62,1.377,63,1.563,102,1.029,103,0.796,184,1.858,200,2.38,211,1.5,224,2.38,226,2.47,228,2.528,231,2.899,232,3.141,242,2.312,244,2.528,251,3.141,313,2.698,460,3.641,480,2.794,642,5.676,777,3.96,1600,5.467,1601,6.485,1611,4.547,1618,4.547,1630,4.547,1634,4.547,1640,5.088,1641,4.547,1642,5.134,1643,5.134,1644,6.673,1645,4.547,1646,5.134,1647,5.134,1648,5.134]],["title/modules/ProductsModule.html",[65,1.003,86,3.2]],["body/modules/ProductsModule.html",[0,0.09,3,0.104,4,0.093,5,0.093,12,0.008,18,0.282,22,0.104,24,0.006,25,0.006,52,2.17,58,0.673,65,1.687,67,2.158,86,5.383,97,2.317,190,2.435,479,2.375,523,3.363,777,3.627,1633,5.472,1640,6.195,1644,6.722,1645,5.472,1649,6.179,1650,6.179,1651,6.179]],["title/entities/PublicFile.html",[26,1.734,773,2.887]],["body/entities/PublicFile.html",[0,0.08,3,0.092,4,0.082,5,0.082,8,0.385,9,1.405,11,0.53,12,0.008,13,1.476,14,1.723,16,0.74,18,0.175,22,0.092,23,0.772,24,0.006,25,0.006,26,2.695,28,2.769,30,4.065,33,2.528,37,4.782,40,2.093,41,4.377,48,2.094,773,4.961,849,5.847,1010,5.209,1652,4.824,1653,5.447,1654,5.447,1655,5.447]],["title/classes/RegisterDto.html",[0,0.066,220,3.2]],["body/classes/RegisterDto.html",[0,0.099,2,1.811,3,0.087,4,0.078,5,0.078,8,0.367,9,1.361,11,0.549,12,0.008,13,1.595,14,1.786,15,2.637,16,0.767,18,0.166,19,3.836,20,3.836,21,2.21,22,0.114,23,0.735,24,0.006,25,0.006,103,1.174,220,5.371,367,3.729,396,4.633,898,6.706,1656,4.594,1657,5.711,1658,5.186,1659,5.186,1660,5.186,1661,5.186,1662,5.186,1663,6.791,1664,5.186,1665,5.186,1666,5.186,1667,5.186,1668,5.186]],["title/interfaces/RequestWithRawBody.html",[437,1.923,1669,3.403]],["body/interfaces/RequestWithRawBody.html",[3,0.106,4,0.095,5,0.095,8,0.446,9,1.54,11,0.431,12,0.008,18,0.202,22,0.106,23,0.894,24,0.007,25,0.007,210,3.532,234,3.106,437,2.688,439,3.561,498,3.67,996,5.569,1669,6.251,1670,5.586,1671,8.627]],["title/interfaces/RequestWithUser.html",[207,2.222,437,1.923]],["body/interfaces/RequestWithUser.html",[3,0.105,4,0.093,5,0.093,8,0.44,9,1.528,11,0.426,12,0.008,18,0.245,22,0.105,23,0.883,24,0.007,25,0.007,36,3.525,207,4.059,210,3.513,234,3.067,437,2.655,439,3.517,498,3.642,770,3.657,1672,5.517]],["title/modules/SearchModule.html",[65,1.003,87,3.031]],["body/modules/SearchModule.html",[0,0.085,3,0.097,4,0.087,5,0.087,12,0.008,18,0.256,22,0.097,24,0.006,25,0.006,58,0.63,65,1.618,67,2.018,87,4.891,97,2.73,108,3.924,109,3.565,110,1.927,183,4.099,184,1.425,189,3.883,334,3.037,396,3.536,789,5.118,942,4.683,1354,4.683,1673,5.779,1674,7.279,1675,5.779,1676,5.779,1677,5.779,1678,5.779,1679,5.779]],["title/classes/SetDefaultCreditCardDto.html",[0,0.066,668,3.403]],["body/classes/SetDefaultCreditCardDto.html",[0,0.111,2,2.149,3,0.104,4,0.092,5,0.092,6,5.369,8,0.435,9,1.517,10,6.184,11,0.421,12,0.008,13,1.365,14,1.368,15,3.129,16,0.587,18,0.197,19,3.615,20,3.615,21,2.622,22,0.127,23,0.873,24,0.006,25,0.006,668,6.184,1680,5.45,1681,6.153]],["title/controllers/SmsController.html",[50,1.318,1682,3.403]],["body/controllers/SmsController.html",[0,0.062,3,0.072,4,0.064,5,0.064,8,0.301,11,0.406,12,0.008,14,1.321,16,0.567,18,0.25,22,0.072,23,0.604,24,0.005,25,0.005,35,1.094,40,1.773,50,1.243,52,1.217,54,1.215,57,1.19,58,0.464,61,2.032,62,1.141,102,1.19,103,0.921,184,1.991,200,1.973,207,4.079,210,3.156,224,2.754,225,3.02,226,1.558,228,2.096,231,2.403,232,2.604,242,1.917,244,2.096,251,2.604,266,1.894,313,3.123,402,2.675,403,2.284,404,4.214,480,2.316,535,2.723,618,5.586,620,3.21,844,2.723,862,5.262,1682,4.48,1683,3.769,1684,3.769,1685,6.844,1686,5.262,1687,4.256,1688,7.407,1689,5.94,1690,6.844,1691,4.256,1692,4.256,1693,4.256,1694,5.94,1695,4.256,1696,4.256,1697,4.598,1698,3.769,1699,4.256,1700,4.256,1701,4.256,1702,5.94,1703,5.94,1704,4.256,1705,5.94,1706,4.256,1707,4.256,1708,3.449,1709,4.256]],["title/modules/SmsModule.html",[65,1.003,88,3.2]],["body/modules/SmsModule.html",[0,0.078,3,0.089,4,0.079,5,0.079,12,0.008,18,0.269,22,0.089,24,0.006,25,0.006,52,1.968,58,0.577,65,1.53,67,1.849,68,2.713,88,6.368,92,4.858,93,2.856,94,2.197,95,2.141,97,2.582,108,3.39,110,1.766,114,3.558,190,2.713,334,3.618,1682,5.768,1697,6.167,1698,4.69,1710,4.69,1711,4.69,1712,5.295,1713,4.69,1714,5.295,1715,5.295]],["title/injectables/SmsService.html",[192,0.654,1697,3.031]],["body/injectables/SmsService.html",[0,0.049,3,0.057,4,0.051,5,0.051,8,0.238,9,1.005,11,0.486,12,0.008,13,1.572,16,0.678,18,0.239,22,0.057,23,0.478,24,0.004,25,0.004,35,1.224,40,1.79,54,1.026,57,1.201,58,0.367,62,1.346,63,1.163,102,1.331,103,1.03,109,3.175,110,1.123,178,2.983,179,2.983,184,1.837,192,0.728,193,1.005,207,1.658,211,0.984,224,1.561,225,1.712,226,1.233,228,1.658,237,2.91,238,1.902,242,1.517,244,1.658,261,1.466,262,2.216,265,2.224,266,1.6,373,3.559,402,1.517,403,1.929,417,2.983,432,4.066,576,3.378,620,3.784,834,4.523,844,2.155,929,2.263,1146,2.061,1275,2.73,1657,5.619,1684,2.983,1686,4.444,1697,3.371,1716,2.983,1717,5.996,1718,5.996,1719,5.017,1720,5.017,1721,3.368,1722,6.645,1723,3.368,1724,5.017,1725,3.368,1726,5.017,1727,3.368,1728,5.017,1729,5.885,1730,2.983,1731,3.368,1732,3.368,1733,5.017,1734,3.368,1735,3.368,1736,3.368,1737,3.368,1738,5.017,1739,3.368,1740,3.368,1741,3.368,1742,3.368,1743,3.368,1744,3.368,1745,3.368,1746,3.368,1747,3.368,1748,3.368,1749,3.368,1750,3.368,1751,2.983,1752,3.368,1753,5.017,1754,3.368]],["title/entities/StripeEvent.html",[26,1.734,782,3.031]],["body/entities/StripeEvent.html",[0,0.09,3,0.104,4,0.093,5,0.093,8,0.437,9,1.52,11,0.423,12,0.008,13,1.369,14,1.374,16,0.59,18,0.198,22,0.104,23,0.876,24,0.006,25,0.006,26,2.917,28,3.141,30,3.699,33,2.678,48,2.375,782,5.519,1755,5.472,1756,8.214,1757,6.179]],["title/modules/StripeModule.html",[65,1.003,89,2.547]],["body/modules/StripeModule.html",[0,0.084,3,0.097,4,0.086,5,0.086,12,0.008,18,0.255,22,0.097,24,0.006,25,0.006,58,0.625,65,1.611,67,2.003,68,2.855,89,5.038,93,3.006,94,2.38,95,2.319,97,2.151,108,3.568,110,1.913,190,2.855,334,3.808,536,5.051,1758,5.08,1759,5.08,1760,5.08,1761,5.735,1762,5.735]],["title/injectables/StripeService.html",[192,0.654,536,2.456]],["body/injectables/StripeService.html",[0,0.034,3,0.039,4,0.035,5,0.035,8,0.163,9,0.747,10,5.438,11,0.518,12,0.008,13,1.645,16,0.707,18,0.173,22,0.039,23,0.326,24,0.003,25,0.003,30,3.897,35,1.328,40,1.404,54,0.763,57,1.398,58,0.251,61,1.099,63,1.617,102,1.445,103,1.175,109,2.711,110,0.767,131,1.865,184,2.134,192,0.541,193,0.687,211,2.038,261,0.672,262,1.466,265,0.687,266,1.189,317,2.038,367,2.663,393,2.386,398,2.282,399,2.282,400,1.865,402,2.435,403,2.284,420,3.634,529,4.165,536,2.03,628,4.165,795,1.96,799,2.038,844,1.472,929,1.546,996,3.16,1518,2.038,1751,2.038,1763,2.038,1764,5.053,1765,3.729,1766,3.729,1767,3.729,1768,3.729,1769,3.729,1770,3.729,1771,4.702,1772,3.729,1773,3.729,1774,6.895,1775,2.301,1776,2.301,1777,2.301,1778,3.729,1779,2.301,1780,3.303,1781,3.729,1782,2.301,1783,3.729,1784,2.301,1785,4.79,1786,3.729,1787,2.301,1788,3.729,1789,2.301,1790,2.301,1791,2.301,1792,4.165,1793,2.038,1794,2.301,1795,2.301,1796,2.301,1797,2.301,1798,2.301,1799,2.301,1800,2.301,1801,2.301,1802,2.301,1803,5.943,1804,3.729,1805,2.301,1806,2.301,1807,2.301,1808,2.301,1809,2.301,1810,4.702,1811,2.301,1812,2.301,1813,2.301,1814,2.301,1815,2.301,1816,2.301,1817,2.301,1818,2.301,1819,2.301,1820,2.301,1821,3.729,1822,2.301,1823,2.301,1824,2.301,1825,2.301,1826,3.729,1827,2.301,1828,2.301]],["title/controllers/StripeWebhookController.html",[50,1.318,1829,3.403]],["body/controllers/StripeWebhookController.html",[0,0.066,3,0.076,4,0.068,5,0.068,8,0.32,11,0.309,12,0.008,13,1.275,14,1.005,16,0.432,18,0.264,22,0.076,23,0.641,24,0.005,25,0.005,35,0.833,50,1.321,52,1.293,54,1.267,57,0.906,58,0.493,62,1.895,63,1.048,102,0.906,103,0.701,184,1.743,200,2.096,210,3.011,211,1.321,225,3.15,226,2.587,237,3.095,261,1.321,262,2.204,265,1.35,266,1.442,402,2.036,403,1.738,536,3.846,537,3.41,844,2.894,1669,5.733,1764,5.33,1780,7.284,1829,4.672,1830,4.005,1831,4.522,1832,7.067,1833,4.522,1834,4.522,1835,4.522,1836,4.005,1837,4.522,1838,5.012,1839,4.005,1840,4.522,1841,4.522,1842,4.522,1843,6.195,1844,4.522,1845,4.005,1846,4.005,1847,4.522,1848,6.195,1849,4.522,1850,4.522,1851,4.522]],["title/modules/StripeWebhookModule.html",[65,1.003,90,3.2]],["body/modules/StripeWebhookModule.html",[0,0.079,3,0.09,4,0.081,5,0.081,12,0.008,18,0.282,22,0.09,24,0.006,25,0.006,52,1.986,58,0.585,65,1.544,67,1.875,68,2.738,89,4.877,90,6.318,92,4.877,93,2.882,94,2.228,95,2.171,97,2.605,114,3.608,129,3.809,190,2.116,479,2.064,523,2.923,782,3.608,1829,5.807,1838,4.927,1839,4.756,1852,5.37,1853,5.37,1854,5.37,1855,5.37,1856,4.756,1857,5.37]],["title/controllers/SubscriptionsController.html",[50,1.318,1858,3.403]],["body/controllers/SubscriptionsController.html",[0,0.071,3,0.082,4,0.073,5,0.073,8,0.342,11,0.444,12,0.008,14,1.442,16,0.619,18,0.251,22,0.082,23,0.686,24,0.006,25,0.006,35,1.195,50,1.414,52,1.383,54,1.327,57,1.3,58,0.527,61,2.311,62,1.298,63,1.503,102,1.3,103,1.006,184,2.069,200,2.243,207,4.22,210,3.331,211,1.895,225,2.46,226,1.772,228,2.383,242,2.179,244,2.383,313,3.409,480,2.634,535,3.097,542,5.257,1858,4.892,1859,4.286,1860,4.286,1861,5.745,1862,5.745,1863,4.839,1864,4.839,1865,4.839,1866,4.839,1867,4.839,1868,4.839,1869,5.19,1870,4.286,1871,4.839,1872,4.839,1873,4.839,1874,4.839,1875,4.839,1876,4.839,1877,4.839]],["title/modules/SubscriptionsModule.html",[65,1.003,91,3.2]],["body/modules/SubscriptionsModule.html",[0,0.083,3,0.096,4,0.085,5,0.085,12,0.008,18,0.275,22,0.096,24,0.006,25,0.006,52,2.061,58,0.62,65,1.603,67,1.988,68,2.842,89,4.952,91,6.221,93,2.992,94,2.362,95,2.301,97,2.704,108,3.551,110,1.898,129,4.037,190,2.243,1858,5.969,1869,5.114,1870,5.041,1878,5.692,1879,5.692,1880,5.692,1881,5.692]],["title/interfaces/TokenPayload.html",[386,2.887,437,1.923]],["body/interfaces/TokenPayload.html",[3,0.105,4,0.094,5,0.094,8,0.442,9,1.532,11,0.523,12,0.008,22,0.105,23,0.887,24,0.007,25,0.007,35,1.409,40,2.465,370,7.62,373,6.102,386,5.285,437,2.666,439,3.532,1882,5.54,1883,6.229]],["title/classes/TokenVerificationDto.html",[0,0.066,1030,3.403]],["body/classes/TokenVerificationDto.html",[0,0.111,2,2.167,3,0.104,4,0.093,5,0.093,8,0.439,9,1.524,11,0.424,12,0.008,13,1.372,14,1.379,15,3.154,16,0.592,18,0.199,19,3.633,20,3.633,21,2.644,22,0.128,23,0.88,24,0.007,25,0.007,304,4.831,1030,6.206,1884,5.495,1885,6.204]],["title/classes/TwoFactorAuthenticationCodeDto.html",[0,0.066,1886,3.403]],["body/classes/TwoFactorAuthenticationCodeDto.html",[0,0.112,2,2.194,3,0.106,4,0.094,5,0.094,8,0.444,9,1.536,11,0.43,12,0.008,13,1.383,14,1.396,15,3.193,16,0.6,18,0.201,19,3.66,20,3.66,21,2.677,22,0.106,24,0.007,25,0.007,1886,5.781,1887,5.563,1888,6.705,1889,6.281]],["title/controllers/TwoFactorAuthenticationController.html",[50,1.318,333,3.403]],["body/controllers/TwoFactorAuthenticationController.html",[0,0.048,3,0.055,4,0.049,5,0.049,8,0.233,11,0.405,12,0.008,14,1.316,16,0.565,18,0.253,22,0.055,24,0.004,25,0.004,35,1.09,50,0.962,52,0.942,54,1.01,57,1.186,58,0.359,62,1.587,63,1.144,102,1.186,103,0.918,184,1.987,200,1.527,201,3.501,205,4,207,4.04,210,3.265,211,1.442,224,2.743,225,3.342,226,1.206,227,2.67,228,1.622,229,2.337,231,1.86,232,2.016,233,5.148,234,1.622,237,2.592,238,1.86,239,2.787,240,2.485,242,1.484,243,2.016,244,1.622,249,2.918,251,2.016,261,0.962,262,1.846,263,2.337,265,1.962,266,1.574,270,4,299,5.821,300,3.723,302,2.108,309,2.67,312,3.317,313,3.111,330,3.977,333,3.723,402,2.223,403,1.897,620,3.723,795,1.732,1028,4.797,1063,2.485,1708,2.67,1845,2.918,1886,5.778,1888,5.327,1890,2.918,1891,3.295,1892,5.242,1893,3.295,1894,3.295,1895,3.295,1896,3.295,1897,3.295,1898,3.295,1899,3.295,1900,4.936,1901,3.295,1902,3.295,1903,3.295,1904,3.295,1905,3.295,1906,3.295,1907,3.295,1908,4.372,1909,3.295,1910,3.295,1911,6.573,1912,4.936,1913,4.936,1914,3.295,1915,3.295,1916,3.295]],["title/injectables/TwoFactorAuthenticationService.html",[192,0.654,330,3.031]],["body/injectables/TwoFactorAuthenticationService.html",[0,0.056,3,0.064,4,0.057,5,0.057,8,0.269,11,0.481,12,0.008,13,1.402,16,0.672,18,0.257,22,0.064,24,0.005,25,0.005,30,3.764,35,1.296,36,3.303,54,1.121,57,1.288,58,0.414,62,1.47,63,1.49,102,1.41,103,1.091,109,3.415,110,1.267,184,1.917,192,0.795,193,1.134,211,1.601,233,4.729,234,1.87,237,3.405,238,2.144,261,1.601,262,1.709,265,1.636,266,1.211,304,2.229,308,3.078,330,3.682,349,4.992,361,3.364,770,2.229,1258,3.078,1888,5.21,1908,6.886,1917,3.364,1918,5.479,1919,6.428,1920,5.479,1921,3.798,1922,5.479,1923,3.798,1924,3.798,1925,3.798,1926,5.479,1927,3.798,1928,3.798,1929,3.364,1930,3.798,1931,3.364,1932,3.798,1933,3.798,1934,3.798,1935,3.798,1936,3.798,1937,3.798,1938,3.798,1939,3.798]],["title/classes/UpdateCategoryDto.html",[0,0.066,472,3.2]],["body/classes/UpdateCategoryDto.html",[0,0.107,2,2.026,3,0.098,4,0.087,5,0.087,8,0.41,9,1.462,11,0.499,12,0.008,13,1.316,14,1.622,16,0.697,18,0.186,19,3.484,20,3.484,21,2.472,22,0.123,23,0.823,24,0.006,25,0.006,33,2.603,40,2.178,103,1.238,472,5.663,629,5.176,1298,6.47,1940,5.138,1941,5.138,1942,5.801,1943,5.138,1944,5.801]],["title/entities/User.html",[26,1.734,36,1.734]],["body/entities/User.html",[0,0.054,3,0.039,4,0.034,5,0.07,8,0.162,9,0.743,11,0.563,12,0.008,13,1.47,14,1.831,16,0.786,18,0.204,22,0.039,23,0.84,24,0.003,25,0.003,26,1.427,27,4.277,28,1.163,30,4.159,33,1.527,35,1.502,36,1.8,37,4.493,40,1.108,41,2.644,44,2.026,47,4.148,48,0.879,103,0.726,210,0.975,226,2.447,255,3.007,256,3.532,260,1.622,281,2.026,293,2.026,367,2.306,374,5.642,396,3.297,413,2.026,414,1.622,415,2.026,507,3.322,516,4.064,518,1.853,773,3.448,774,2.026,775,3.791,776,2.026,795,4.404,1125,3.532,1316,5.619,1442,1.853,1443,1.853,1524,2.026,1525,2.026,1589,4.773,1621,3.287,1624,4.148,1657,3.532,1883,5.251,1945,2.026,1946,4.148,1947,4.148,1948,3.795,1949,3.795,1950,3.795,1951,3.795,1952,4.148,1953,3.795,1954,4.148,1955,2.287,1956,2.287,1957,2.287,1958,2.287,1959,6.344,1960,3.711,1961,2.287,1962,2.287,1963,2.287,1964,3.711,1965,2.287,1966,2.287,1967,5.388,1968,2.287,1969,2.287,1970,2.287,1971,2.287,1972,2.287,1973,2.287,1974,2.287,1975,2.287,1976,3.711,1977,2.287,1978,2.287,1979,2.287,1980,4.683,1981,2.287,1982,2.287,1983,2.287,1984,2.287,1985,2.287,1986,2.287,1987,2.287,1988,3.711,1989,4.683,1990,2.287,1991,2.287,1992,3.287,1993,2.287,1994,2.287,1995,2.287,1996,2.287]],["title/modules/UserModule.html",[65,1.003,92,2.547]],["body/modules/UserModule.html",[0,0.069,3,0.079,4,0.071,5,0.071,12,0.008,18,0.278,22,0.079,24,0.005,25,0.005,36,1.814,49,3.824,52,1.823,58,0.514,65,1.418,67,1.648,68,2.513,79,5.596,84,5.596,89,4.703,92,5.125,93,2.646,94,1.958,95,1.908,97,2.392,117,4.179,190,2.513,237,3.95,334,3.352,479,1.814,523,2.568,1997,4.179,1998,4.179,1999,4.719,2000,4.179,2001,4.719,2002,5.448,2003,4.179,2004,4.719,2005,4.719,2006,4.719,2007,4.719]],["title/injectables/UserService.html",[192,0.654,237,1.976]],["body/injectables/UserService.html",[0,0.02,3,0.024,4,0.021,5,0.067,8,0.099,11,0.504,12,0.008,13,1.5,16,0.703,18,0.189,22,0.024,24,0.002,25,0.002,33,1.454,35,1.357,36,2.697,40,2.542,48,0.538,49,1.134,54,0.501,57,1.454,58,0.152,62,0.657,63,1.655,102,1.476,103,1.197,184,2.155,192,0.355,193,0.418,211,2.008,237,1.073,257,0.993,260,0.993,261,0.716,262,1.391,265,2.167,266,2.58,284,1.239,305,2.959,349,1.738,367,2.9,373,5.475,383,2.17,384,1.239,385,1.986,392,1.134,393,0.895,398,0.856,399,0.856,402,1.767,403,1.508,419,1.239,478,0.762,479,0.538,504,1.134,536,2.876,596,2.062,617,0.993,650,2.959,742,2.648,795,2.062,849,1.848,978,3.55,992,3.976,996,3.296,997,4.545,1018,1.239,1063,1.848,1065,1.239,1079,2.17,1081,1.239,1125,1.055,1447,2.894,1530,1.134,1554,2.636,1557,1.986,1792,2.17,1892,2.17,1946,3.949,1947,2.894,1948,1.134,1949,1.134,1950,1.134,1951,1.134,1952,3.474,1953,3.613,1954,1.239,1992,1.239,2008,1.239,2009,2.17,2010,2.17,2011,2.45,2012,2.45,2013,2.45,2014,2.17,2015,2.45,2016,2.45,2017,2.45,2018,2.45,2019,2.45,2020,2.45,2021,2.45,2022,2.45,2023,3.268,2024,1.399,2025,3.268,2026,5.608,2027,1.399,2028,2.45,2029,2.45,2030,5.608,2031,1.399,2032,2.45,2033,1.399,2034,2.45,2035,1.399,2036,2.45,2037,1.399,2038,2.45,2039,1.399,2040,2.45,2041,1.399,2042,2.45,2043,1.399,2044,2.45,2045,1.399,2046,2.45,2047,1.399,2048,2.45,2049,1.399,2050,2.45,2051,1.399,2052,2.45,2053,1.399,2054,2.45,2055,1.399,2056,2.45,2057,1.399,2058,2.45,2059,1.399,2060,2.45,2061,1.399,2062,1.399,2063,1.399,2064,1.399,2065,1.399,2066,1.399,2067,1.399,2068,3.268,2069,2.45,2070,1.399,2071,2.45,2072,1.399,2073,1.399,2074,3.923,2075,2.45,2076,2.45,2077,2.45,2078,1.399,2079,3.268,2080,4.906,2081,1.399,2082,1.399,2083,1.399,2084,1.399,2085,1.399,2086,1.399,2087,1.399,2088,1.399,2089,1.399,2090,1.399,2091,1.399,2092,1.399,2093,1.399,2094,1.399,2095,1.399,2096,1.399,2097,1.399,2098,1.399,2099,1.399,2100,1.399,2101,1.399,2102,2.45,2103,1.399,2104,1.399,2105,1.399,2106,1.399,2107,1.399,2108,2.45,2109,2.45,2110,3.268,2111,1.399]],["title/controllers/UsersController.html",[50,1.318,2002,3.403]],["body/controllers/UsersController.html",[0,0.047,3,0.054,4,0.048,5,0.117,8,0.227,11,0.476,12,0.008,14,1.548,16,0.665,18,0.244,22,0.054,24,0.004,25,0.004,33,1.047,35,1.283,50,0.938,52,0.918,54,0.99,57,1.395,58,0.35,61,1.533,62,0.861,63,1.504,102,1.395,103,1.08,184,2.132,200,1.488,207,4.289,210,3.474,211,1.895,225,3.299,226,1.176,228,1.581,229,4.938,231,1.813,233,4.36,234,2.384,237,2.552,242,1.446,244,1.581,265,0.959,266,1.024,312,2.158,313,3.659,464,4.36,476,3.434,480,1.748,535,2.055,984,4.288,1126,5.931,1254,2.602,1557,4.723,1708,4.723,2002,3.651,2003,2.844,2009,5.162,2010,5.162,2014,4.288,2112,2.844,2113,3.211,2114,3.211,2115,3.211,2116,3.211,2117,3.211,2118,3.211,2119,3.211,2120,3.211,2121,3.211,2122,3.211,2123,3.211,2124,3.211,2125,3.211,2126,3.211,2127,3.211,2128,3.211,2129,5.828,2130,3.211,2131,3.211,2132,3.211,2133,3.211,2134,4.841,2135,3.211,2136,4.841,2137,4.841,2138,3.211,2139,3.211,2140,3.211,2141,3.211,2142,3.211,2143,3.211,2144,3.211,2145,3.211,2146,3.211,2147,3.211,2148,3.211,2149,3.211]],["title/injectables/categoriesService.html",[192,0.654,482,3.031]],["body/injectables/categoriesService.html",[0,0.038,3,0.044,4,0.039,5,0.062,8,0.184,9,0.823,11,0.432,12,0.008,16,0.641,18,0.226,22,0.044,24,0.004,25,0.004,33,2.776,35,1.163,40,2.382,48,0.998,54,0.84,57,1.504,58,0.283,63,1.463,102,1.265,103,0.979,184,2.045,192,0.596,193,0.775,211,1.489,261,0.758,262,0.81,265,2.099,266,2.394,402,2.295,403,1.959,452,4.37,453,3.638,454,3.638,455,5.132,456,3.638,457,3.638,458,3.638,459,4.11,462,4.725,472,4.988,476,4.11,478,1.413,479,0.998,482,2.76,484,2.299,485,2.299,492,2.299,496,1.958,507,3.615,525,2.299,596,2.159,617,3.615,792,5.947,966,4.511,1212,5.947,1530,3.329,2150,2.299,2151,4.108,2152,2.596,2153,4.108,2154,2.596,2155,4.108,2156,2.104,2157,4.108,2158,2.596,2159,2.596,2160,5.795,2161,5.795,2162,4.108,2163,2.596,2164,4.108,2165,5.795,2166,5.097,2167,4.108,2168,2.596,2169,5.795,2170,4.108,2171,4.108,2172,2.596,2173,2.596,2174,2.596,2175,2.596,2176,2.596,2177,4.108,2178,5.097,2179,2.596,2180,2.596,2181,5.097,2182,4.108,2183,2.596,2184,2.596,2185,2.596,2186,2.596,2187,2.596,2188,2.596,2189,2.596]],["title/coverage.html",[2190,5.013]],["body/coverage.html",[0,0.122,1,1.318,5,0.026,6,2.743,7,1.548,11,0.119,12,0.008,24,0.003,25,0.003,26,2.661,27,1.118,29,1.548,36,0.672,50,2.258,51,1.318,53,1.548,59,1.239,138,1.318,192,1.251,194,1.548,198,1.318,199,1.548,204,1.174,207,0.86,220,1.239,226,1.086,235,1.118,237,0.765,239,0.987,242,0.787,245,1.318,247,1.318,327,1.239,328,1.239,329,1.239,330,1.174,331,1.239,333,1.318,345,2.105,354,1.548,386,1.118,403,0.672,437,2.865,438,1.318,440,1.548,446,1.318,447,1.548,450,1.318,451,1.548,459,1.239,462,0.951,464,1.174,472,1.239,482,1.174,496,1.318,497,1.548,505,1.548,527,1.318,528,1.548,532,1.318,536,0.951,547,1.318,548,1.548,554,1.174,576,0.888,590,1.548,618,1.318,619,1.548,622,1.318,623,1.548,625,1.548,627,1.548,632,1.318,633,1.548,639,1.239,640,1.548,642,1.239,643,1.548,644,1.318,650,1.318,651,1.548,655,1.318,656,1.548,668,1.318,671,1.318,687,1.239,688,1.548,690,1.174,692,1.069,713,1.416,728,1.318,729,1.548,773,1.118,775,1.118,777,1.026,779,1.069,782,1.174,796,1.318,797,1.548,828,1.548,833,1.118,845,1.318,878,1.416,879,1.548,883,1.239,887,1.174,893,1.548,907,1.548,926,1.548,947,1.416,948,1.548,957,1.318,958,1.548,971,1.416,978,1.174,983,1.548,1022,1.548,1025,1.318,1026,1.548,1030,1.318,1034,1.174,1044,1.548,1093,1.318,1094,1.548,1108,1.318,1109,1.548,1146,3.125,1147,1.548,1151,1.548,1152,1.548,1170,1.318,1171,1.548,1173,1.548,1179,1.548,1182,1.548,1189,1.548,1203,1.548,1219,1.548,1233,1.548,1239,1.548,1241,1.318,1242,1.548,1287,1.318,1288,1.548,1301,1.548,1318,1.318,1319,1.548,1321,1.318,1322,1.548,1326,1.239,1327,1.548,1329,1.318,1330,1.548,1334,1.174,1335,1.548,1351,7.636,1405,1.318,1406,1.548,1413,1.239,1424,1.318,1428,1.174,1435,1.318,1479,1.548,1548,1.548,1554,1.174,1555,1.548,1587,1.548,1598,1.318,1599,1.548,1605,1.239,1609,1.318,1617,1.548,1626,1.548,1640,1.318,1641,1.548,1652,1.548,1656,1.548,1669,1.318,1670,1.548,1672,1.548,1680,1.548,1682,1.318,1683,1.548,1697,1.174,1716,1.548,1755,1.548,1763,1.548,1829,1.318,1830,1.548,1838,1.239,1858,1.318,1859,1.548,1869,1.239,1882,1.548,1884,1.548,1886,1.318,1887,1.548,1890,1.548,1917,1.548,1940,1.548,1945,1.548,2002,1.318,2008,1.548,2112,1.548,2150,1.548,2190,1.416,2191,1.747,2192,1.747,2193,1.747,2194,8.439,2195,6.23,2196,2.967,2197,8.244,2198,7.986,2199,1.548,2200,1.548,2201,4.559,2202,1.548,2203,7.097,2204,5.552,2205,1.747,2206,1.747,2207,1.548,2208,1.416,2209,1.548,2210,3.867,2211,1.548,2212,5.107,2213,1.548,2214,1.548,2215,1.548,2216,1.747,2217,2.967,2218,1.548,2219,1.548,2220,1.548,2221,1.548,2222,1.747,2223,1.548,2224,1.548,2225,1.548,2226,1.548,2227,1.548,2228,1.548,2229,1.548,2230,1.548,2231,1.548,2232,1.548,2233,1.747,2234,1.747]],["title/classes/createPostDto.html",[0,0.066,1413,3.2]],["body/classes/createPostDto.html",[0,0.106,2,2.01,3,0.097,4,0.086,5,0.086,8,0.407,9,1.455,11,0.497,12,0.008,13,1.554,14,1.614,15,2.927,16,0.693,18,0.185,19,3.799,20,3.799,21,2.453,22,0.097,23,0.816,24,0.006,25,0.006,563,3.684,795,3.026,1302,5.643,1303,5.643,1413,5.151,2214,5.099,2235,5.099,2236,5.757,2237,5.757,2238,5.757,2239,5.099]],["title/dependencies.html",[68,2.142,2240,3.325]],["body/dependencies.html",[0,0.086,12,0.008,21,1.798,24,0.005,25,0.005,48,1.622,58,0.46,68,1.663,110,1.408,112,3.738,123,3.42,127,2.993,185,3.42,234,2.078,243,2.582,302,3.779,336,2.383,340,2.993,385,3.42,414,2.993,479,1.622,571,3.42,572,3.42,937,3.738,954,3.738,968,3.42,1001,3.42,1002,3.42,1004,3.42,1064,3.738,1117,3.42,1119,3.738,1120,3.738,1121,5.231,1123,3.738,1159,4.832,1181,3.42,1254,4.786,1354,3.42,1471,4.786,1472,4.786,1473,3.738,1729,3.738,1764,3.183,1929,3.738,1931,3.738,2241,4.22,2242,4.22,2243,4.22,2244,4.22,2245,4.22,2246,4.22,2247,6.813,2248,5.906,2249,4.22,2250,4.22,2251,4.22,2252,5.906,2253,4.22,2254,4.22,2255,4.22,2256,5.906,2257,4.22,2258,4.22,2259,5.906,2260,4.22,2261,4.22,2262,4.22,2263,4.22,2264,4.22,2265,4.22,2266,4.22,2267,4.22,2268,4.22,2269,4.22,2270,4.22,2271,4.22,2272,4.22,2273,4.22,2274,4.22,2275,4.22,2276,4.22,2277,4.22,2278,3.738,2279,4.22,2280,4.22,2281,4.22,2282,4.22,2283,4.22,2284,4.22,2285,4.22,2286,4.22,2287,4.22,2288,4.22,2289,4.22,2290,4.22,2291,4.22]],["title/guards/emailConfirmationGuard.html",[671,3.403,2208,3.656]],["body/guards/emailConfirmationGuard.html",[0,0.08,3,0.092,4,0.082,5,0.082,8,0.387,11,0.374,12,0.008,16,0.522,18,0.249,22,0.118,23,0.775,24,0.006,25,0.006,35,1.007,54,1.437,57,1.095,58,0.596,63,1.267,102,1.095,103,0.848,192,1.019,207,3.46,210,2.33,265,1.632,367,2.692,402,2.462,403,2.101,634,3.673,671,5.857,730,4.123,795,2.873,961,6.643,965,4.842,968,4.43,1063,4.123,1103,4.842,1730,4.842,1883,4.123,2207,4.842,2292,5.466,2293,8.196,2294,7.027,2295,5.466,2296,5.466,2297,5.466,2298,5.466]],["title/miscellaneous/enumerations.html",[2299,2.522,2300,4.813]],["body/miscellaneous/enumerations.html",[8,0.467,12,0.008,24,0.007,25,0.007,372,4.965,388,6.407,1793,7.002,2299,4.441,2300,5.854,2301,6.609,2302,6.609,2303,6.609,2304,6.609,2305,6.609,2306,6.609,2307,6.609,2308,6.609,2309,6.609,2310,6.609]],["title/miscellaneous/functions.html",[2299,2.522,2311,4.813]],["body/miscellaneous/functions.html",[8,0.42,11,0.406,12,0.008,24,0.006,25,0.006,35,1.486,57,1.189,102,1.616,103,1.251,372,3.485,713,6,971,6,974,5.258,1883,5.584,2211,5.258,2213,7.482,2223,5.258,2228,5.258,2229,7.146,2230,5.258,2231,5.258,2232,6.558,2299,3.989,2311,5.258,2312,5.937,2313,5.937,2314,5.937,2315,5.937,2316,5.937,2317,5.937,2318,5.937,2319,5.937,2320,5.937]],["title/index.html",[8,0.265,2321,3.754,2322,3.754]],["body/index.html",[4,0.076,12,0.008,24,0.006,25,0.006,290,6.076,549,4.501,575,3.415,596,2.671,721,4.501,856,4.501,1281,4.501,2156,4.119,2190,4.119,2323,5.082,2324,5.082,2325,6.701,2326,5.082,2327,5.082,2328,5.082,2329,5.082,2330,5.082,2331,4.501,2332,4.501,2333,5.082,2334,8.675,2335,5.082,2336,5.082,2337,5.082,2338,8.508,2339,5.082,2340,5.082,2341,6.701,2342,5.082,2343,5.082,2344,5.082,2345,6.701,2346,6.701,2347,5.082,2348,5.082,2349,5.082,2350,5.935,2351,6.701,2352,5.082,2353,5.082,2354,5.082,2355,5.082,2356,5.082,2357,4.501,2358,5.082,2359,5.082,2360,5.082,2361,5.082,2362,5.082,2363,5.082,2364,5.082,2365,5.082,2366,5.082,2367,5.082,2368,5.082,2369,5.082,2370,5.082,2371,5.082,2372,4.501]],["title/injectables/jwtStrategy.html",[192,0.654,331,3.2]],["body/injectables/jwtStrategy.html",[0,0.068,3,0.078,4,0.07,5,0.07,8,0.328,11,0.431,12,0.008,16,0.601,18,0.272,22,0.078,24,0.005,25,0.005,35,1.16,54,1.288,57,0.928,58,0.505,62,1.689,63,1.459,102,1.262,103,0.977,109,3.53,110,1.545,184,1.765,192,0.914,193,1.383,210,3.049,211,1.353,234,2.281,237,3.711,238,2.616,243,2.835,261,1.84,262,1.964,331,4.467,336,2.616,350,3.754,386,4.913,387,3.494,420,3.113,436,3.754,498,2.212,929,3.113,1153,4.75,1157,3.754,1158,3.286,1159,3.286,1160,3.494,1161,3.494,1162,3.754,1163,3.754,1165,3.754,1175,5.578,1177,4.103,1186,4.103,2199,4.103,2373,4.632,2374,4.632,2375,4.632,2376,4.632]],["title/modules.html",[67,2.16]],["body/modules.html",[12,0.005,24,0.005,25,0.005,66,3.548,67,1.643,71,3.01,72,3.337,73,3.337,74,3.337,75,3.337,76,3.337,77,3.161,78,3.337,79,3.161,80,3.337,81,3.337,82,3.337,83,3.337,84,3.161,85,3.337,86,3.337,87,3.161,88,3.337,89,2.656,90,3.337,91,3.337,92,2.656,823,3.161,2357,8.237,2377,9.3,2378,9.3,2379,9.406,2380,8.073,2381,8.073]],["title/overview.html",[2382,5.478]],["body/overview.html",[2,0.808,12,0.008,24,0.003,25,0.003,28,1.177,52,0.662,66,6.927,67,0.808,68,1.477,69,2.05,70,2.05,71,5.483,72,4.228,73,4.228,74,4.764,75,4.228,76,3.349,77,5.101,78,4.764,79,4.513,80,5.125,81,4.961,82,3.349,83,5.125,84,4.513,85,3.349,86,3.349,87,3.647,88,4.961,89,4.287,90,4.764,91,4.228,92,4.662,93,1.555,94,0.961,95,0.936,193,0.691,235,4.298,237,2.942,239,3.793,323,2.05,325,2.05,326,2.05,327,3.349,328,3.349,329,3.349,330,3.173,331,3.349,392,1.876,439,1.307,482,3.173,520,2.05,521,2.05,536,3.656,554,3.173,583,2.05,584,2.05,687,4.764,690,3.173,819,2.05,820,2.05,821,2.05,822,2.05,823,4.513,833,4.298,873,2.05,874,2.05,875,2.05,887,3.173,901,2.05,902,2.05,975,2.05,976,2.05,977,2.05,978,4.513,1034,3.173,1039,2.05,1041,2.05,1197,2.05,1198,2.05,1199,2.05,1334,3.173,1428,3.173,1462,2.05,1464,2.05,1554,4.513,1581,2.05,1582,2.05,1583,2.05,1697,4.513,1710,2.05,1711,2.05,1713,2.05,1758,2.05,1759,2.05,1760,2.05,1997,2.05,1998,2.05,2000,2.05,2208,1.876,2382,2.05,2383,2.315,2384,2.315,2385,2.315,2386,2.315,2387,2.315,2388,2.05]],["title/injectables/productCategoriesService.html",[192,0.654,1605,3.2]],["body/injectables/productCategoriesService.html",[0,0.073,3,0.084,4,0.075,5,0.075,8,0.351,11,0.451,12,0.008,16,0.708,18,0.264,22,0.084,23,0.704,24,0.006,25,0.006,35,1.216,48,1.909,54,1.35,57,1.322,58,0.541,63,1.529,102,1.322,103,1.023,184,1.828,192,0.957,193,1.482,211,1.451,261,1.928,262,1.549,265,1.482,266,2.104,462,2.703,478,2.703,479,1.909,596,4.151,639,5.257,779,3.039,1605,4.681,1607,4.398,1614,4.398,2219,4.398,2389,6.599,2390,7.898,2391,4.966,2392,4.966,2393,6.599,2394,4.966,2395,4.966,2396,4.966,2397,4.966,2398,4.966,2399,4.966,2400,6.599,2401,4.966,2402,4.966]],["title/properties.html",[9,1.089,2240,3.325]],["body/properties.html",[9,1.384,12,0.008,24,0.007,25,0.007,290,5.6,596,3.632,2156,5.6,2278,6.12,2331,6.12,2332,6.12,2350,6.12,2372,6.12,2403,6.91]],["title/injectables/stripeWebhookService.html",[192,0.654,1838,3.2]],["body/injectables/stripeWebhookService.html",[0,0.061,3,0.07,4,0.062,5,0.062,8,0.294,11,0.462,12,0.008,13,1.394,16,0.646,18,0.264,22,0.07,23,0.59,24,0.005,25,0.005,33,1.907,35,1.246,48,1.6,54,1.197,57,1.172,58,0.453,62,1.116,63,0.964,102,1.355,103,1.049,184,1.668,192,0.848,193,1.242,237,3.212,261,1.709,262,1.824,265,2.019,266,1.865,388,3.373,393,2.664,398,2.547,399,2.547,400,3.373,401,3.687,402,1.875,403,1.6,404,2.952,478,2.265,479,1.6,596,3.856,782,2.797,834,5.1,844,2.664,1231,3.687,1764,4.411,1774,4.74,1836,3.687,1838,4.149,1846,5.18,1856,3.687,2220,3.687,2404,5.849,2405,5.849,2406,4.162,2407,4.162,2408,5.849,2409,5.849,2410,4.162,2411,5.849,2412,6.762,2413,4.162,2414,4.162,2415,4.162,2416,4.162,2417,4.162,2418,4.162,2419,4.162,2420,4.162,2421,4.162,2422,4.162,2423,5.849,2424,4.162,2425,4.162]],["title/injectables/subscriptionsService.html",[192,0.654,1869,3.2]],["body/injectables/subscriptionsService.html",[0,0.062,3,0.071,4,0.063,5,0.063,8,0.298,11,0.465,12,0.008,13,1.45,16,0.649,18,0.218,22,0.071,23,0.597,24,0.005,25,0.005,30,3.622,35,1.253,54,1.206,57,1.181,58,0.458,62,1.581,63,1.576,102,1.363,103,1.055,109,3.519,110,1.404,184,1.984,192,0.855,193,1.256,211,1.722,261,1.722,262,1.838,265,2.2,266,1.879,402,1.895,403,2.266,404,2.985,499,3.174,536,4.377,537,3.174,844,2.693,1774,6.288,1785,6.528,1860,5.221,1861,5.221,1862,5.221,1869,4.181,2221,3.727,2426,4.208,2427,4.208,2428,5.894,2429,4.208,2430,5.894,2431,4.208,2432,5.894,2433,5.894,2434,5.894,2435,4.208,2436,5.894,2437,4.208,2438,4.208,2439,4.208]],["title/classes/updatePostDto.html",[0,0.066,1424,3.403]],["body/classes/updatePostDto.html",[0,0.102,2,1.882,3,0.091,4,0.081,5,0.081,8,0.381,9,1.395,11,0.527,12,0.008,13,1.522,14,1.715,16,0.736,18,0.173,19,3.683,20,3.683,21,2.296,22,0.091,23,0.764,24,0.006,25,0.006,33,2.515,40,2.078,563,3.448,629,4.938,795,2.833,1298,6.607,1302,5.471,1303,5.471,1424,5.251,1941,4.773,1943,4.773,2215,4.773,2235,4.773,2239,4.773,2440,5.389,2441,5.389,2442,5.389,2443,5.389]],["title/miscellaneous/variables.html",[2299,2.522,2444,4.813]],["body/miscellaneous/variables.html",[8,0.353,11,0.541,12,0.008,13,1.195,23,1.123,24,0.006,25,0.006,27,3.199,31,4.427,32,4.427,33,2.161,34,4.427,36,1.921,63,1.158,103,0.775,155,4.051,367,2.461,372,4.648,374,6.417,396,3.059,865,5.87,1010,3.359,1435,4.999,1657,3.77,1948,4.051,1949,4.051,1950,4.051,1951,4.051,1953,4.051,2200,4.427,2202,5.87,2218,4.427,2224,4.427,2225,5.87,2226,4.427,2227,5.87,2299,3.359,2388,5.87,2444,4.427,2445,4.998,2446,4.998,2447,4.998,2448,4.998,2449,4.998,2450,4.998,2451,4.998,2452,4.998,2453,4.998,2454,4.998,2455,4.998,2456,4.998,2457,4.998,2458,4.998,2459,4.998,2460,4.998,2461,4.998,2462,4.998]],["title/interfaces/verificationTokenPayload.html",[437,1.923,845,3.403]],["body/interfaces/verificationTokenPayload.html",[3,0.11,4,0.098,5,0.098,8,0.463,9,1.576,11,0.448,12,0.008,13,1.52,22,0.11,23,0.929,24,0.007,25,0.007,367,4.303,437,2.792,439,3.7,845,6.355,2209,5.803]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"classes/AddCreditCardDto.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationServices.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"classes/CategoriesNotFoundException.html":{},"entities/Category.html":{},"modules/CategoryModule.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"controllers/EmailModuleController.html":{},"classes/EmailScheduleDto.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"classes/FindOneParams.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/ImageProcessor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthentication.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"entities/Message.html":{},"classes/ObjectWithDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"interfaces/PostCountResult.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"injectables/PostSearchService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"modules/PrivateFilesModule.html":{},"entities/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"entities/ProductCategory.html":{},"injectables/ProductService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"entities/StripeEvent.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/categoriesService.html":{},"coverage.html":{},"classes/createPostDto.html":{},"dependencies.html":{},"guards/emailConfirmationGuard.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"injectables/jwtStrategy.html":{},"modules.html":{},"overview.html":{},"injectables/productCategoriesService.html":{},"properties.html":{},"injectables/stripeWebhookService.html":{},"injectables/subscriptionsService.html":{},"classes/updatePostDto.html":{},"miscellaneous/variables.html":{},"interfaces/verificationTokenPayload.html":{}}}],["0",{"_index":1351,"title":{},"body":{"injectables/PostSearchService.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["0.1.13",{"_index":2284,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":2265,"title":{},"body":{"dependencies.html":{}}}],["0.3.4",{"_index":2290,"title":{},"body":{"dependencies.html":{}}}],["0.5.0",{"_index":2268,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":2259,"title":{},"body":{"dependencies.html":{}}}],["0.5.2",{"_index":2276,"title":{},"body":{"dependencies.html":{}}}],["0.5.4",{"_index":2246,"title":{},"body":{"dependencies.html":{}}}],["0.5.9",{"_index":2260,"title":{},"body":{"dependencies.html":{}}}],["0.6",{"_index":1135,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["0.8",{"_index":1136,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["0/1",{"_index":2197,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":2217,"title":{},"body":{"coverage.html":{}}}],["0/19",{"_index":2222,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2194,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2198,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2203,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2195,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2204,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2210,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2196,"title":{},"body":{"coverage.html":{}}}],["08",{"_index":1799,"title":{},"body":{"injectables/StripeService.html":{}}}],["1",{"_index":2388,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":2278,"title":{},"body":{"dependencies.html":{},"properties.html":{}}}],["1.1.0",{"_index":2253,"title":{},"body":{"dependencies.html":{}}}],["1.1.19",{"_index":2242,"title":{},"body":{"dependencies.html":{}}}],["1.2.11",{"_index":2257,"title":{},"body":{"dependencies.html":{}}}],["1.3.0",{"_index":2267,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":2270,"title":{},"body":{"dependencies.html":{}}}],["1.5.0",{"_index":2281,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":392,"title":{},"body":{"injectables/AuthenticationServices.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["100.0.0",{"_index":2271,"title":{},"body":{"dependencies.html":{}}}],["11",{"_index":2385,"title":{},"body":{"overview.html":{}}}],["12.0.1",{"_index":2275,"title":{},"body":{"dependencies.html":{}}}],["120",{"_index":1478,"title":{},"body":{"modules/PostsModule.html":{}}}],["17",{"_index":2384,"title":{},"body":{"overview.html":{}}}],["17.1.1",{"_index":2245,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":1391,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["2.0.0",{"_index":2248,"title":{},"body":{"dependencies.html":{}}}],["2.1109.0",{"_index":2261,"title":{},"body":{"dependencies.html":{}}}],["2020",{"_index":1798,"title":{},"body":{"injectables/StripeService.html":{}}}],["23505",{"_index":2305,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["24",{"_index":2383,"title":{},"body":{"overview.html":{}}}],["26",{"_index":2387,"title":{},"body":{"overview.html":{}}}],["27",{"_index":1800,"title":{},"body":{"injectables/StripeService.html":{}}}],["2b$10$1a0wm81icdchkabdheghvemdz9q/q/l0yzlaprt4sswzltak0uhja",{"_index":2453,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2fa",{"_index":1891,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["3.0.2",{"_index":2286,"title":{},"body":{"dependencies.html":{}}}],["3.6.1",{"_index":2264,"title":{},"body":{"dependencies.html":{}}}],["3.77.0",{"_index":2289,"title":{},"body":{"dependencies.html":{}}}],["33",{"_index":2386,"title":{},"body":{"overview.html":{}}}],["3600",{"_index":2462,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.0.0",{"_index":2277,"title":{},"body":{"dependencies.html":{}}}],["4.8.2",{"_index":2263,"title":{},"body":{"dependencies.html":{}}}],["4/7",{"_index":2206,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":1218,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["404",{"_index":1077,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["5.0.0",{"_index":2262,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":1216,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["57",{"_index":2205,"title":{},"body":{"coverage.html":{}}}],["6.7.3",{"_index":2274,"title":{},"body":{"dependencies.html":{}}}],["7.4.0",{"_index":2287,"title":{},"body":{"dependencies.html":{}}}],["7.9.0",{"_index":2244,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":2250,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":2272,"title":{},"body":{"dependencies.html":{}}}],["8.0.3",{"_index":2254,"title":{},"body":{"dependencies.html":{}}}],["8.1.0",{"_index":2249,"title":{},"body":{"dependencies.html":{}}}],["8.1.1",{"_index":2247,"title":{},"body":{"dependencies.html":{}}}],["8.2.1",{"_index":2251,"title":{},"body":{"dependencies.html":{}}}],["8.219.0",{"_index":2288,"title":{},"body":{"dependencies.html":{}}}],["8.3.2",{"_index":2291,"title":{},"body":{"dependencies.html":{}}}],["8.4.4",{"_index":2252,"title":{},"body":{"dependencies.html":{}}}],["8.7.3",{"_index":2280,"title":{},"body":{"dependencies.html":{}}}],["840987623513",{"_index":2454,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9.0.2",{"_index":2273,"title":{},"body":{"dependencies.html":{}}}],["9]\\d{1,14",{"_index":1663,"title":{},"body":{"classes/RegisterDto.html":{}}}],["access",{"_index":1529,"title":{},"body":{"injectables/PostsService.html":{}}}],["access_token",{"_index":1086,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["accesstokencookie",{"_index":300,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["accountsid",{"_index":1731,"title":{},"body":{"injectables/SmsService.html":{}}}],["addavatar",{"_index":2009,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["addavatar(request",{"_index":2114,"title":{},"body":{"controllers/UsersController.html":{}}}],["addavatar(userid",{"_index":2029,"title":{},"body":{"injectables/UserService.html":{}}}],["addcreditcard",{"_index":658,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["addcreditcard(creditcard",{"_index":661,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["addcreditcarddto",{"_index":1,"title":{"classes/AddCreditCardDto.html":{}},"body":{"classes/AddCreditCardDto.html":{},"controllers/CreditCardsController.html":{},"coverage.html":{}}}],["addprivatefile",{"_index":2010,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["addprivatefile(request",{"_index":2117,"title":{},"body":{"controllers/UsersController.html":{}}}],["addprivatefile(userid",{"_index":2032,"title":{},"body":{"injectables/UserService.html":{}}}],["address",{"_index":27,"title":{"entities/Address.html":{}},"body":{"entities/Address.html":{},"modules/DatabaseModule.html":{},"injectables/EmailConfirmationService.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["address.entity",{"_index":1981,"title":{},"body":{"entities/User.html":{}}}],["adm",{"_index":1119,"title":{},"body":{"classes/ImageProcessor.html":{},"dependencies.html":{}}}],["admzip",{"_index":1118,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["age=${this.configservice.get",{"_index":427,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["age=0",{"_index":430,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["already",{"_index":404,"title":{},"body":{"injectables/AuthenticationServices.html":{},"injectables/EmailConfirmationService.html":{},"controllers/SmsController.html":{},"injectables/stripeWebhookService.html":{},"injectables/subscriptionsService.html":{}}}],["amazing",{"_index":2358,"title":{},"body":{"index.html":{}}}],["amount",{"_index":628,"title":{},"body":{"classes/CreateChargeDto.html":{},"injectables/StripeService.html":{}}}],["anyfilesinterceptor",{"_index":1253,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["apiversion",{"_index":1797,"title":{},"body":{"injectables/StripeService.html":{}}}],["app",{"_index":2336,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":60,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":51,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":853,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["applications",{"_index":2330,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":66,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approach",{"_index":298,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["approved",{"_index":1750,"title":{},"body":{"injectables/SmsService.html":{}}}],["appservice",{"_index":59,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{}}}],["argumentshost",{"_index":951,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["array",{"_index":1312,"title":{},"body":{"entities/Post.html":{},"interfaces/PostSearchResult.html":{}}}],["asc",{"_index":1385,"title":{},"body":{"injectables/PostSearchService.html":{},"injectables/PostsService.html":{}}}],["async",{"_index":184,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationServices.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailModuleController.html":{},"injectables/FileService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/ImageProcessor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"injectables/PostSearchService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductService.html":{},"controllers/ProductsController.html":{},"modules/SearchModule.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/categoriesService.html":{},"injectables/jwtStrategy.html":{},"injectables/productCategoriesService.html":{},"injectables/stripeWebhookService.html":{},"injectables/subscriptionsService.html":{}}}],["attachcreditcard",{"_index":1765,"title":{},"body":{"injectables/StripeService.html":{}}}],["attachcreditcard(paymentmethodid",{"_index":1773,"title":{},"body":{"injectables/StripeService.html":{}}}],["auth",{"_index":942,"title":{},"body":{"injectables/EmailService.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/SearchModule.html":{}}}],["auth.oauth2client",{"_index":1062,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authenticate",{"_index":1028,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["authenticate(request",{"_index":1893,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["authenticate(token",{"_index":1052,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authenticate(tokendata",{"_index":1029,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication",{"_index":201,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationServices.html":{},"injectables/ChatService.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["authentication.controller",{"_index":338,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["authentication.guard",{"_index":244,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailModuleController.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["authentication.guard.ts",{"_index":1147,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"coverage.html":{}}}],["authentication.service",{"_index":240,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/LocalStrategy.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["authentication/authentication.module",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthenticationModule.html":{}}}],["authentication/authentication.service",{"_index":603,"title":{},"body":{"injectables/ChatService.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["authentication/jwt",{"_index":480,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailModuleController.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/SubscriptionsController.html":{},"controllers/UsersController.html":{}}}],["authentication/requestwithuser.interface",{"_index":535,"title":{},"body":{"controllers/ChargeController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/PostsController.html":{},"controllers/SmsController.html":{},"controllers/SubscriptionsController.html":{},"controllers/UsersController.html":{}}}],["authentication=${token",{"_index":424,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["authenticationcontroller",{"_index":198,"title":{"controllers/AuthenticationController.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{}}}],["authenticationmodule",{"_index":71,"title":{"modules/AuthenticationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules.html":{},"overview.html":{}}}],["authenticationservice",{"_index":263,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/ChatService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/LocalStrategy.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["authenticationservices",{"_index":239,"title":{"injectables/AuthenticationServices.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationServices.html":{},"injectables/ChatService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/LocalStrategy.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{},"overview.html":{}}}],["authenticationtoken",{"_index":609,"title":{},"body":{"injectables/ChatService.html":{}}}],["authenticator",{"_index":1928,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authenticator.generatesecret",{"_index":1932,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authenticator.keyuri",{"_index":1933,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authenticator.verify",{"_index":1938,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authguard",{"_index":1148,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/LocalAuthentication.html":{}}}],["authguard('jwt",{"_index":1149,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtTwoFactorGuard.html":{}}}],["authguard('local",{"_index":1180,"title":{},"body":{"injectables/LocalAuthentication.html":{}}}],["author",{"_index":575,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"entities/Message.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["author.posts",{"_index":1305,"title":{},"body":{"entities/Post.html":{}}}],["authorid",{"_index":1328,"title":{},"body":{"interfaces/PostSearchBody.html":{},"injectables/PostSearchService.html":{}}}],["authors",{"_index":448,"title":{},"body":{"interfaces/CarProperties.html":{}}}],["authtoken",{"_index":1733,"title":{},"body":{"injectables/SmsService.html":{}}}],["available",{"_index":2381,"title":{},"body":{"modules.html":{}}}],["avatar",{"_index":1946,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["await",{"_index":266,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationServices.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"injectables/FileService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/ImageProcessor.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"injectables/PostSearchService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"injectables/ProductService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/categoriesService.html":{},"injectables/productCategoriesService.html":{},"injectables/stripeWebhookService.html":{},"injectables/subscriptionsService.html":{}}}],["aws",{"_index":1001,"title":{},"body":{"injectables/FileService.html":{},"injectables/PrivateFileService.html":{},"dependencies.html":{}}}],["aws_access_key_id",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["aws_public_bucket_name",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["aws_region",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["aws_secret_access_key",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["b",{"_index":1984,"title":{},"body":{"entities/User.html":{}}}],["backers",{"_index":2359,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":844,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/stripeWebhookService.html":{},"injectables/subscriptionsService.html":{}}}],["badrequestexception('bad",{"_index":870,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["badrequestexception('credit",{"_index":1823,"title":{},"body":{"injectables/StripeService.html":{}}}],["badrequestexception('customer",{"_index":2435,"title":{},"body":{"injectables/subscriptionsService.html":{}}}],["badrequestexception('email",{"_index":861,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["badrequestexception('missing",{"_index":1844,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["badrequestexception('phone",{"_index":1703,"title":{},"body":{"controllers/SmsController.html":{}}}],["badrequestexception('this",{"_index":2418,"title":{},"body":{"injectables/stripeWebhookService.html":{}}}],["badrequestexception('wrong",{"_index":1751,"title":{},"body":{"injectables/SmsService.html":{},"injectables/StripeService.html":{}}}],["bao",{"_index":1524,"title":{},"body":{"injectables/PostsService.html":{},"entities/User.html":{}}}],["baseexceptionfilter",{"_index":949,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["bcrypt",{"_index":385,"title":{},"body":{"injectables/AuthenticationServices.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":419,"title":{},"body":{"injectables/AuthenticationServices.html":{},"injectables/UserService.html":{}}}],["bcrypt.hash(refreshtoken",{"_index":2106,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt.hash(registrationdata.password",{"_index":391,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["body",{"_index":224,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailModuleController.html":{},"injectables/FileService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/PostSearchService.html":{},"controllers/PostsController.html":{},"injectables/PrivateFileService.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["body.count",{"_index":1367,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["body.hits.hits",{"_index":1387,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["body.hits.total.value",{"_index":1386,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["bookproperties",{"_index":438,"title":{"interfaces/BookProperties.html":{}},"body":{"interfaces/BookProperties.html":{},"entities/Product.html":{},"coverage.html":{}}}],["bool",{"_index":1373,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["boolean",{"_index":1883,"title":{},"body":{"interfaces/TokenPayload.html":{},"entities/User.html":{},"guards/emailConfirmationGuard.html":{},"miscellaneous/functions.html":{}}}],["bootstrap",{"_index":2213,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["brand",{"_index":441,"title":{},"body":{"interfaces/BookProperties.html":{}}}],["browse",{"_index":2379,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2377,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1008,"title":{},"body":{"injectables/FileService.html":{},"injectables/PrivateFileService.html":{}}}],["buffer",{"_index":996,"title":{},"body":{"injectables/FileService.html":{},"classes/ImageProcessor.html":{},"injectables/PrivateFileService.html":{},"interfaces/RequestWithRawBody.html":{},"injectables/StripeService.html":{},"injectables/UserService.html":{}}}],["buffer.buffer(filebuffer",{"_index":1132,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["buffer.from(file.buffer",{"_index":1131,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["buffer.from(job.returnvalue",{"_index":1276,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["building",{"_index":2326,"title":{},"body":{"index.html":{}}}],["bull",{"_index":1117,"title":{},"body":{"classes/ImageProcessor.html":{},"controllers/OptimizeController.html":{},"dependencies.html":{}}}],["bullmodule",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"modules/OptimizeModule.html":{}}}],["bullmodule.forrootasync",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["bullmodule.registerqueue",{"_index":1283,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["c",{"_index":255,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/PostsController.html":{},"entities/User.html":{}}}],["cache",{"_index":1471,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{},"dependencies.html":{}}}],["cache_key_metadata",{"_index":1099,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["cache_manager",{"_index":1503,"title":{},"body":{"injectables/PostsService.html":{}}}],["cacheinterceptor",{"_index":1095,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"controllers/PostsController.html":{}}}],["cachekey",{"_index":1100,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"controllers/PostsController.html":{}}}],["cachekey(get_posts_cache_key",{"_index":1444,"title":{},"body":{"controllers/PostsController.html":{}}}],["cachemanager",{"_index":1485,"title":{},"body":{"injectables/PostsService.html":{}}}],["cachemodule",{"_index":1466,"title":{},"body":{"modules/PostsModule.html":{}}}],["cachemodule.registerasync",{"_index":1475,"title":{},"body":{"modules/PostsModule.html":{}}}],["cachettl",{"_index":1426,"title":{},"body":{"controllers/PostsController.html":{}}}],["cachettl(120",{"_index":1445,"title":{},"body":{"controllers/PostsController.html":{}}}],["caching",{"_index":1441,"title":{},"body":{"controllers/PostsController.html":{}}}],["callhandler",{"_index":963,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["canactivate",{"_index":2293,"title":{},"body":{"guards/emailConfirmationGuard.html":{}}}],["canactivate(context",{"_index":2294,"title":{},"body":{"guards/emailConfirmationGuard.html":{}}}],["card",{"_index":1810,"title":{},"body":{"injectables/StripeService.html":{}}}],["cards",{"_index":657,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["cards/creditcards.controller.ts",{"_index":656,"title":{},"body":{"controllers/CreditCardsController.html":{},"coverage.html":{}}}],["cards/creditcards.controller.ts:23",{"_index":662,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["cards/creditcards.controller.ts:36",{"_index":666,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["cards/creditcards.controller.ts:43",{"_index":670,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["cards/creditcards.module",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["cards/creditcards.module.ts",{"_index":685,"title":{},"body":{"modules/CreditCardsModule.html":{}}}],["cards/dto/addcreditcarddto.ts",{"_index":7,"title":{},"body":{"classes/AddCreditCardDto.html":{},"coverage.html":{}}}],["cards/dto/addcreditcarddto.ts:6",{"_index":17,"title":{},"body":{"classes/AddCreditCardDto.html":{}}}],["cards/dto/setdefaultcreditcard.dto.ts",{"_index":1680,"title":{},"body":{"classes/SetDefaultCreditCardDto.html":{},"coverage.html":{}}}],["cards/dto/setdefaultcreditcard.dto.ts:6",{"_index":1681,"title":{},"body":{"classes/SetDefaultCreditCardDto.html":{}}}],["carproperties",{"_index":446,"title":{"interfaces/CarProperties.html":{}},"body":{"interfaces/CarProperties.html":{},"entities/Product.html":{},"coverage.html":{}}}],["cascade",{"_index":516,"title":{},"body":{"entities/Category.html":{},"entities/Post.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["case",{"_index":2461,"title":{},"body":{"miscellaneous/variables.html":{}}}],["catch",{"_index":398,"title":{},"body":{"injectables/AuthenticationServices.html":{},"classes/DatabaseLogger.html":{},"injectables/EmailConfirmationService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/StripeService.html":{},"injectables/UserService.html":{},"injectables/stripeWebhookService.html":{}}}],["catch(exception",{"_index":950,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["categories",{"_index":452,"title":{},"body":{"controllers/CategoriesController.html":{},"entities/Post.html":{},"controllers/ProductCategoriesController.html":{},"injectables/categoriesService.html":{}}}],["categories/category.entity",{"_index":772,"title":{},"body":{"modules/DatabaseModule.html":{},"entities/Post.html":{}}}],["categories/category.module",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["categoriescontroller",{"_index":450,"title":{"controllers/CategoriesController.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoryModule.html":{},"coverage.html":{}}}],["categoriesid",{"_index":502,"title":{},"body":{"classes/CategoriesNotFoundException.html":{}}}],["categoriesnotfoundexception",{"_index":496,"title":{"classes/CategoriesNotFoundException.html":{}},"body":{"classes/CategoriesNotFoundException.html":{},"injectables/categoriesService.html":{},"coverage.html":{}}}],["categoriesnotfoundexception(id",{"_index":2178,"title":{},"body":{"injectables/categoriesService.html":{}}}],["categoriesrepository",{"_index":2175,"title":{},"body":{"injectables/categoriesService.html":{}}}],["categoriesservice",{"_index":482,"title":{"injectables/categoriesService.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoryModule.html":{},"injectables/categoriesService.html":{},"coverage.html":{},"overview.html":{}}}],["categoriesservice.getcategorybyid(1",{"_index":2166,"title":{},"body":{"injectables/categoriesService.html":{}}}],["category",{"_index":462,"title":{"entities/Category.html":{}},"body":{"controllers/CategoriesController.html":{},"entities/Category.html":{},"modules/CategoryModule.html":{},"classes/CreateProductDto.html":{},"modules/DatabaseModule.html":{},"entities/Post.html":{},"entities/Product.html":{},"injectables/categoriesService.html":{},"coverage.html":{},"injectables/productCategoriesService.html":{}}}],["category.controller",{"_index":524,"title":{},"body":{"modules/CategoryModule.html":{}}}],["category.entity",{"_index":525,"title":{},"body":{"modules/CategoryModule.html":{},"injectables/categoriesService.html":{}}}],["category.posts",{"_index":1307,"title":{},"body":{"entities/Post.html":{}}}],["category.products",{"_index":1588,"title":{},"body":{"entities/Product.html":{}}}],["category.service",{"_index":483,"title":{},"body":{"controllers/CategoriesController.html":{},"modules/CategoryModule.html":{}}}],["categorymodule",{"_index":72,"title":{"modules/CategoryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoryModule.html":{},"modules.html":{},"overview.html":{}}}],["ch",{"_index":1989,"title":{},"body":{"entities/User.html":{}}}],["channel",{"_index":1741,"title":{},"body":{"injectables/SmsService.html":{}}}],["charge",{"_index":529,"title":{},"body":{"controllers/ChargeController.html":{},"injectables/StripeService.html":{}}}],["charge(amount",{"_index":1776,"title":{},"body":{"injectables/StripeService.html":{}}}],["charge.amount",{"_index":540,"title":{},"body":{"controllers/ChargeController.html":{}}}],["charge.controller",{"_index":546,"title":{},"body":{"modules/ChargeModule.html":{}}}],["charge.paymentmethodid",{"_index":541,"title":{},"body":{"controllers/ChargeController.html":{}}}],["charge/charge.module",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["chargecontroller",{"_index":527,"title":{"controllers/ChargeController.html":{}},"body":{"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"coverage.html":{}}}],["chargemodule",{"_index":73,"title":{"modules/ChargeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChargeModule.html":{},"modules.html":{},"overview.html":{}}}],["chat.gateway",{"_index":587,"title":{},"body":{"modules/ChatModule.html":{}}}],["chat.service",{"_index":573,"title":{},"body":{"classes/ChatGateway.html":{},"modules/ChatModule.html":{}}}],["chat/chat.module",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["chatgateway",{"_index":547,"title":{"classes/ChatGateway.html":{}},"body":{"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"coverage.html":{}}}],["chatmodule",{"_index":74,"title":{"modules/ChatModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{},"modules.html":{},"overview.html":{}}}],["chatservice",{"_index":554,"title":{"injectables/ChatService.html":{}},"body":{"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"coverage.html":{},"overview.html":{}}}],["checkverificationcode",{"_index":1685,"title":{},"body":{"controllers/SmsController.html":{}}}],["checkverificationcode(request",{"_index":1687,"title":{},"body":{"controllers/SmsController.html":{}}}],["checkverificationcodedto",{"_index":618,"title":{"classes/CheckVerificationCodeDto.html":{}},"body":{"classes/CheckVerificationCodeDto.html":{},"controllers/SmsController.html":{},"coverage.html":{}}}],["chosen",{"_index":1819,"title":{},"body":{"injectables/StripeService.html":{}}}],["city",{"_index":31,"title":{},"body":{"entities/Address.html":{},"miscellaneous/variables.html":{}}}],["cityname",{"_index":2456,"title":{},"body":{"miscellaneous/variables.html":{}}}],["class",{"_index":0,"title":{"classes/AddCreditCardDto.html":{},"classes/CategoriesNotFoundException.html":{},"classes/ChatGateway.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseLogger.html":{},"classes/EmailScheduleDto.html":{},"classes/ExceptionsLoggerFilter.html":{},"classes/FindOneParams.html":{},"classes/ImageProcessor.html":{},"classes/ObjectWithDto.html":{},"classes/PaginationParams.html":{},"classes/PostNotFoundException.html":{},"classes/RegisterDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/createPostDto.html":{},"classes/updatePostDto.html":{}},"body":{"classes/AddCreditCardDto.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationServices.html":{},"controllers/CategoriesController.html":{},"classes/CategoriesNotFoundException.html":{},"entities/Category.html":{},"modules/CategoryModule.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"controllers/EmailModuleController.html":{},"classes/EmailScheduleDto.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"classes/FindOneParams.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/ImageProcessor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthentication.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"entities/Message.html":{},"classes/ObjectWithDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"injectables/PostSearchService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"modules/PrivateFilesModule.html":{},"entities/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"entities/ProductCategory.html":{},"injectables/ProductService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"modules/SearchModule.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"entities/StripeEvent.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/categoriesService.html":{},"coverage.html":{},"classes/createPostDto.html":{},"dependencies.html":{},"guards/emailConfirmationGuard.html":{},"injectables/jwtStrategy.html":{},"injectables/productCategoriesService.html":{},"injectables/stripeWebhookService.html":{},"injectables/subscriptionsService.html":{},"classes/updatePostDto.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/CategoriesNotFoundException.html":{},"classes/ChatGateway.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseLogger.html":{},"classes/EmailScheduleDto.html":{},"classes/ExceptionsLoggerFilter.html":{},"classes/FindOneParams.html":{},"classes/ImageProcessor.html":{},"classes/ObjectWithDto.html":{},"classes/PaginationParams.html":{},"classes/PostNotFoundException.html":{},"classes/RegisterDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/createPostDto.html":{},"overview.html":{},"classes/updatePostDto.html":{}}}],["classserializerinterceptor",{"_index":232,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["clearcache",{"_index":1480,"title":{},"body":{"injectables/PostsService.html":{}}}],["click",{"_index":855,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["clientid",{"_index":1066,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["clientsecret",{"_index":1068,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["cluster_appmodule",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule",{"_index":323,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_exports",{"_index":326,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_imports",{"_index":324,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["cluster_authenticationmodule_providers",{"_index":325,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_categorymodule",{"_index":520,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_categorymodule_providers",{"_index":521,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_chargemodule",{"_index":543,"title":{},"body":{"modules/ChargeModule.html":{}}}],["cluster_chargemodule_imports",{"_index":544,"title":{},"body":{"modules/ChargeModule.html":{}}}],["cluster_chatmodule",{"_index":583,"title":{},"body":{"modules/ChatModule.html":{},"overview.html":{}}}],["cluster_chatmodule_imports",{"_index":585,"title":{},"body":{"modules/ChatModule.html":{}}}],["cluster_chatmodule_providers",{"_index":584,"title":{},"body":{"modules/ChatModule.html":{},"overview.html":{}}}],["cluster_creditcardsmodule",{"_index":683,"title":{},"body":{"modules/CreditCardsModule.html":{}}}],["cluster_creditcardsmodule_imports",{"_index":684,"title":{},"body":{"modules/CreditCardsModule.html":{}}}],["cluster_emailconfirmationmodule",{"_index":819,"title":{},"body":{"modules/EmailConfirmationModule.html":{},"overview.html":{}}}],["cluster_emailconfirmationmodule_exports",{"_index":820,"title":{},"body":{"modules/EmailConfirmationModule.html":{},"overview.html":{}}}],["cluster_emailconfirmationmodule_imports",{"_index":821,"title":{},"body":{"modules/EmailConfirmationModule.html":{},"overview.html":{}}}],["cluster_emailconfirmationmodule_providers",{"_index":822,"title":{},"body":{"modules/EmailConfirmationModule.html":{},"overview.html":{}}}],["cluster_emailmodule",{"_index":873,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_exports",{"_index":874,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_providers",{"_index":875,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailschedulingmodule",{"_index":901,"title":{},"body":{"modules/EmailSchedulingModule.html":{},"overview.html":{}}}],["cluster_emailschedulingmodule_imports",{"_index":903,"title":{},"body":{"modules/EmailSchedulingModule.html":{}}}],["cluster_emailschedulingmodule_providers",{"_index":902,"title":{},"body":{"modules/EmailSchedulingModule.html":{},"overview.html":{}}}],["cluster_filemodule",{"_index":975,"title":{},"body":{"modules/FileModule.html":{},"overview.html":{}}}],["cluster_filemodule_exports",{"_index":977,"title":{},"body":{"modules/FileModule.html":{},"overview.html":{}}}],["cluster_filemodule_providers",{"_index":976,"title":{},"body":{"modules/FileModule.html":{},"overview.html":{}}}],["cluster_googleauthenticationmodule",{"_index":1039,"title":{},"body":{"modules/GoogleAuthenticationModule.html":{},"overview.html":{}}}],["cluster_googleauthenticationmodule_imports",{"_index":1040,"title":{},"body":{"modules/GoogleAuthenticationModule.html":{}}}],["cluster_googleauthenticationmodule_providers",{"_index":1041,"title":{},"body":{"modules/GoogleAuthenticationModule.html":{},"overview.html":{}}}],["cluster_loggermodule",{"_index":1197,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_exports",{"_index":1198,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_providers",{"_index":1199,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":1462,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":1463,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":1464,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_privatefilesmodule",{"_index":1581,"title":{},"body":{"modules/PrivateFilesModule.html":{},"overview.html":{}}}],["cluster_privatefilesmodule_exports",{"_index":1582,"title":{},"body":{"modules/PrivateFilesModule.html":{},"overview.html":{}}}],["cluster_privatefilesmodule_providers",{"_index":1583,"title":{},"body":{"modules/PrivateFilesModule.html":{},"overview.html":{}}}],["cluster_smsmodule",{"_index":1710,"title":{},"body":{"modules/SmsModule.html":{},"overview.html":{}}}],["cluster_smsmodule_exports",{"_index":1711,"title":{},"body":{"modules/SmsModule.html":{},"overview.html":{}}}],["cluster_smsmodule_imports",{"_index":1712,"title":{},"body":{"modules/SmsModule.html":{}}}],["cluster_smsmodule_providers",{"_index":1713,"title":{},"body":{"modules/SmsModule.html":{},"overview.html":{}}}],["cluster_stripemodule",{"_index":1758,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripemodule_exports",{"_index":1759,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripemodule_providers",{"_index":1760,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule",{"_index":1852,"title":{},"body":{"modules/StripeWebhookModule.html":{}}}],["cluster_stripewebhookmodule_imports",{"_index":1853,"title":{},"body":{"modules/StripeWebhookModule.html":{}}}],["cluster_subscriptionsmodule",{"_index":1878,"title":{},"body":{"modules/SubscriptionsModule.html":{}}}],["cluster_subscriptionsmodule_imports",{"_index":1879,"title":{},"body":{"modules/SubscriptionsModule.html":{}}}],["cluster_usermodule",{"_index":1997,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1998,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":1999,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":2000,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":620,"title":{},"body":{"classes/CheckVerificationCodeDto.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["code')@useguards(jwtauthenticationguard",{"_index":1691,"title":{},"body":{"controllers/SmsController.html":{}}}],["column",{"_index":37,"title":{},"body":{"entities/Address.html":{},"entities/Category.html":{},"entities/Log.html":{},"entities/Message.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/ProductCategory.html":{},"entities/PublicFile.html":{},"entities/User.html":{}}}],["column('text",{"_index":1311,"title":{},"body":{"entities/Post.html":{}}}],["column({default",{"_index":1967,"title":{},"body":{"entities/User.html":{}}}],["column({nullable",{"_index":1959,"title":{},"body":{"entities/User.html":{}}}],["column({type",{"_index":1593,"title":{},"body":{"entities/Product.html":{}}}],["column({unique",{"_index":1962,"title":{},"body":{"entities/User.html":{}}}],["comfirm",{"_index":854,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["compodoc/compodoc",{"_index":2241,"title":{},"body":{"dependencies.html":{}}}],["component",{"_index":2266,"title":{},"body":{"dependencies.html":{}}}],["configmodule",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/FileModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/PrivateFilesModule.html":{},"modules/SearchModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/SubscriptionsModule.html":{}}}],["configmodule.forroot",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationServices.html":{},"injectables/CustomLogger.html":{},"modules/DatabaseModule.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"modules/PostsModule.html":{},"injectables/PrivateFileService.html":{},"modules/SearchModule.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/jwtStrategy.html":{},"injectables/subscriptionsService.html":{}}}],["configservice.get('elasticsearch_node",{"_index":1677,"title":{},"body":{"modules/SearchModule.html":{}}}],["configservice.get('elasticsearch_password",{"_index":1679,"title":{},"body":{"modules/SearchModule.html":{}}}],["configservice.get('elasticsearch_username",{"_index":1678,"title":{},"body":{"modules/SearchModule.html":{}}}],["configservice.get('email_password",{"_index":945,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email_service",{"_index":941,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email_user",{"_index":943,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('jwt_expiration_time')}s",{"_index":353,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["configservice.get('jwt_refresh_token_secret",{"_index":1166,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["configservice.get('jwt_secret",{"_index":350,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/jwtStrategy.html":{}}}],["configservice.get('node_env",{"_index":717,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["configservice.get('postgres_db",{"_index":793,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_host",{"_index":787,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_password",{"_index":791,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_port",{"_index":788,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_user",{"_index":790,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('redis_host",{"_index":187,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{}}}],["configservice.get('redis_port",{"_index":1476,"title":{},"body":{"modules/PostsModule.html":{}}}],["configservice.get('twilio_account_sid",{"_index":1732,"title":{},"body":{"injectables/SmsService.html":{}}}],["configservice.get('twilio_auth_token",{"_index":1734,"title":{},"body":{"injectables/SmsService.html":{}}}],["configure",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["confirm",{"_index":799,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"injectables/StripeService.html":{}}}],["confirm(@body",{"_index":812,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirm(confirmationdata",{"_index":801,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirmation",{"_index":798,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{}}}],["confirmationdata",{"_index":804,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirmationdata.token",{"_index":814,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirmed",{"_index":862,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"controllers/SmsController.html":{}}}],["confirmemail",{"_index":829,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmemail(email",{"_index":836,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmemaildto",{"_index":622,"title":{"classes/ConfirmEmailDto.html":{}},"body":{"classes/ConfirmEmailDto.html":{},"controllers/EmailConfirmationController.html":{},"coverage.html":{}}}],["confirmphonenumber",{"_index":1718,"title":{},"body":{"injectables/SmsService.html":{}}}],["confirmphonenumber(userid",{"_index":1721,"title":{},"body":{"injectables/SmsService.html":{}}}],["connectedsocket",{"_index":567,"title":{},"body":{"classes/ChatGateway.html":{}}}],["connection",{"_index":2026,"title":{},"body":{"injectables/UserService.html":{}}}],["consfigservice",{"_index":1560,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["console.log('exception",{"_index":955,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["console.log(['adaj",{"_index":2107,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(['all",{"_index":1453,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(['alo",{"_index":1037,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["console.log(['code",{"_index":1706,"title":{},"body":{"controllers/SmsController.html":{}}}],["console.log(['dadad",{"_index":1392,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["console.log(['date",{"_index":916,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["console.log(['hello",{"_index":1522,"title":{},"body":{"injectables/PostsService.html":{}}}],["console.log(['id",{"_index":492,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/categoriesService.html":{}}}],["console.log(['limit",{"_index":1449,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(['ooo",{"_index":1842,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["console.log(['req",{"_index":2375,"title":{},"body":{"injectables/jwtStrategy.html":{}}}],["console.log(['request",{"_index":1104,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["console.log(['result",{"_index":1400,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["console.log(['search",{"_index":1390,"title":{},"body":{"injectables/PostSearchService.html":{},"injectables/PostsService.html":{}}}],["console.log(['sep",{"_index":1370,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["console.log(['this",{"_index":1396,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["consolelogger",{"_index":689,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["consoleloggeroptions",{"_index":697,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["const",{"_index":265,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationServices.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"injectables/CustomLogger.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/FileService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/ImageProcessor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"injectables/PostSearchService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"injectables/ProductService.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/categoriesService.html":{},"guards/emailConfirmationGuard.html":{},"injectables/productCategoriesService.html":{},"injectables/stripeWebhookService.html":{},"injectables/subscriptionsService.html":{}}}],["constructeventfrompayload",{"_index":1766,"title":{},"body":{"injectables/StripeService.html":{}}}],["constructeventfrompayload(signature",{"_index":1778,"title":{},"body":{"injectables/StripeService.html":{}}}],["constructor",{"_index":261,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationServices.html":{},"classes/CategoriesNotFoundException.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"injectables/CustomLogger.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailModuleController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"classes/PostNotFoundException.html":{},"injectables/PostSearchService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"injectables/ProductService.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UserService.html":{},"injectables/categoriesService.html":{},"injectables/jwtStrategy.html":{},"injectables/productCategoriesService.html":{},"injectables/stripeWebhookService.html":{},"injectables/subscriptionsService.html":{}}}],["constructor(authenticationservice",{"_index":594,"title":{},"body":{"injectables/ChatService.html":{},"injectables/LocalStrategy.html":{}}}],["constructor(categoriesid",{"_index":500,"title":{},"body":{"classes/CategoriesNotFoundException.html":{}}}],["constructor(chatservice",{"_index":553,"title":{},"body":{"classes/ChatGateway.html":{}}}],["constructor(configservice",{"_index":929,"title":{},"body":{"injectables/EmailService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"injectables/jwtStrategy.html":{}}}],["constructor(context",{"_index":695,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["constructor(elasticsearchservice",{"_index":1339,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["constructor(emailservice",{"_index":908,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["constructor(eventrepository",{"_index":2406,"title":{},"body":{"injectables/stripeWebhookService.html":{}}}],["constructor(jwtservice",{"_index":832,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["constructor(logrepository",{"_index":1221,"title":{},"body":{"injectables/LogsService.html":{}}}],["constructor(postid",{"_index":1323,"title":{},"body":{"classes/PostNotFoundException.html":{}}}],["constructor(postsrepository",{"_index":1483,"title":{},"body":{"injectables/PostsService.html":{}}}],["constructor(private",{"_index":61,"title":{},"body":{"controllers/AppController.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"controllers/CreditCardsController.html":{},"injectables/EmailService.html":{},"injectables/LocalStrategy.html":{},"injectables/PostSearchService.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"injectables/StripeService.html":{},"controllers/SubscriptionsController.html":{},"controllers/UsersController.html":{}}}],["constructor(privatefilesrepository",{"_index":1559,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["constructor(productcategoriesrepository",{"_index":2391,"title":{},"body":{"injectables/productCategoriesService.html":{}}}],["constructor(productrepository",{"_index":1627,"title":{},"body":{"injectables/ProductService.html":{}}}],["constructor(publicfilerepository",{"_index":987,"title":{},"body":{"injectables/FileService.html":{}}}],["constructor(stripeservice",{"_index":2426,"title":{},"body":{"injectables/subscriptionsService.html":{}}}],["constructor(userrepository",{"_index":2024,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":361,"title":{},"body":{"injectables/AuthenticationServices.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["constructor(usersservice",{"_index":1050,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["consumer",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(logsmiddleware).forroutes",{"_index":191,"title":{},"body":{"modules/AppModule.html":{}}}],["content",{"_index":563,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/EmailScheduleDto.html":{},"entities/Message.html":{},"entities/Post.html":{},"classes/createPostDto.html":{},"classes/updatePostDto.html":{}}}],["context",{"_index":634,"title":{},"body":{"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"entities/Log.html":{},"guards/emailConfirmationGuard.html":{}}}],["context.gethandler",{"_index":1102,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["context.switchtohttp().getrequest",{"_index":1103,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"guards/emailConfirmationGuard.html":{}}}],["controller",{"_index":50,"title":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailModuleController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailModuleController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('2fa",{"_index":1905,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["controller('authentication",{"_index":250,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["controller('categories",{"_index":486,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["controller('charge",{"_index":538,"title":{},"body":{"controllers/ChargeController.html":{}}}],["controller('credit",{"_index":675,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["controller('email",{"_index":811,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"controllers/EmailModuleController.html":{}}}],["controller('google",{"_index":1036,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["controller('optimize",{"_index":1259,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["controller('posts",{"_index":1439,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('product",{"_index":1608,"title":{},"body":{"controllers/ProductCategoriesController.html":{}}}],["controller('products",{"_index":1646,"title":{},"body":{"controllers/ProductsController.html":{}}}],["controller('sms",{"_index":1700,"title":{},"body":{"controllers/SmsController.html":{}}}],["controller('subscriptions",{"_index":1871,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["controller('users",{"_index":2132,"title":{},"body":{"controllers/UsersController.html":{}}}],["controller('webhook",{"_index":1840,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["controllers",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"controllers/CategoriesController.html":{},"modules/CategoryModule.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"controllers/EmailModuleController.html":{},"modules/EmailSchedulingModule.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"controllers/TwoFactorAuthenticationController.html":{},"modules/UserModule.html":{},"controllers/UsersController.html":{},"overview.html":{}}}],["cookie",{"_index":302,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationServices.html":{},"injectables/ChatService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"dependencies.html":{}}}],["count",{"_index":1320,"title":{},"body":{"interfaces/PostCountResult.html":{},"injectables/PostSearchService.html":{},"injectables/PostsService.html":{}}}],["count(text",{"_index":1342,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["country",{"_index":32,"title":{},"body":{"entities/Address.html":{},"miscellaneous/variables.html":{}}}],["countryname",{"_index":2457,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coverage",{"_index":2190,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":2011,"title":{},"body":{"injectables/UserService.html":{}}}],["create(userdata",{"_index":2034,"title":{},"body":{"injectables/UserService.html":{}}}],["createcategory",{"_index":453,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/categoriesService.html":{}}}],["createcategory(@body",{"_index":490,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["createcategory(category",{"_index":458,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/categoriesService.html":{}}}],["createcategorydto",{"_index":459,"title":{"classes/CreateCategoryDto.html":{}},"body":{"controllers/CategoriesController.html":{},"classes/CreateCategoryDto.html":{},"injectables/categoriesService.html":{},"coverage.html":{}}}],["createcharge",{"_index":530,"title":{},"body":{"controllers/ChargeController.html":{}}}],["createcharge(charge",{"_index":531,"title":{},"body":{"controllers/ChargeController.html":{}}}],["createchargedto",{"_index":532,"title":{"classes/CreateChargeDto.html":{}},"body":{"controllers/ChargeController.html":{},"classes/CreateChargeDto.html":{},"coverage.html":{}}}],["createcustomer",{"_index":1767,"title":{},"body":{"injectables/StripeService.html":{}}}],["createcustomer(name",{"_index":1781,"title":{},"body":{"injectables/StripeService.html":{}}}],["createdatecolumn",{"_index":1192,"title":{},"body":{"entities/Log.html":{}}}],["createevent",{"_index":2404,"title":{},"body":{"injectables/stripeWebhookService.html":{}}}],["createevent(id",{"_index":2409,"title":{},"body":{"injectables/stripeWebhookService.html":{}}}],["createlog",{"_index":1220,"title":{},"body":{"injectables/LogsService.html":{}}}],["createlog(log",{"_index":1224,"title":{},"body":{"injectables/LogsService.html":{}}}],["createlogdto",{"_index":632,"title":{"classes/CreateLogDto.html":{}},"body":{"classes/CreateLogDto.html":{},"injectables/LogsService.html":{},"coverage.html":{}}}],["createmonthlysubscription",{"_index":1861,"title":{},"body":{"controllers/SubscriptionsController.html":{},"injectables/subscriptionsService.html":{}}}],["createmonthlysubscription(@req",{"_index":1873,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["createmonthlysubscription(customerid",{"_index":2428,"title":{},"body":{"injectables/subscriptionsService.html":{}}}],["createmonthlysubscription(request",{"_index":1863,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["createpost",{"_index":1407,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(@body",{"_index":1456,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(post",{"_index":1412,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpostdto",{"_index":1413,"title":{"classes/createPostDto.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{},"classes/createPostDto.html":{}}}],["createproduct",{"_index":1600,"title":{},"body":{"controllers/ProductCategoriesController.html":{},"injectables/ProductService.html":{},"controllers/ProductsController.html":{}}}],["createproduct(@body",{"_index":1611,"title":{},"body":{"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{}}}],["createproduct(product",{"_index":1630,"title":{},"body":{"injectables/ProductService.html":{},"controllers/ProductsController.html":{}}}],["createproduct(productcategory",{"_index":1602,"title":{},"body":{"controllers/ProductCategoriesController.html":{}}}],["createproductcategory",{"_index":2389,"title":{},"body":{"injectables/productCategoriesService.html":{}}}],["createproductcategory(category",{"_index":2394,"title":{},"body":{"injectables/productCategoriesService.html":{}}}],["createproductcategory(category:createproductcategorydto",{"_index":2399,"title":{},"body":{"injectables/productCategoriesService.html":{}}}],["createproductcategorydto",{"_index":639,"title":{"classes/CreateProductCategoryDto.html":{}},"body":{"classes/CreateProductCategoryDto.html":{},"controllers/ProductCategoriesController.html":{},"coverage.html":{},"injectables/productCategoriesService.html":{}}}],["createproductdto",{"_index":642,"title":{"classes/CreateProductDto.html":{}},"body":{"classes/CreateProductDto.html":{},"injectables/ProductService.html":{},"controllers/ProductsController.html":{},"coverage.html":{}}}],["createreadstream",{"_index":1579,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["createsubscription",{"_index":1768,"title":{},"body":{"injectables/StripeService.html":{}}}],["createsubscription(priceid",{"_index":1783,"title":{},"body":{"injectables/StripeService.html":{}}}],["createtransport",{"_index":936,"title":{},"body":{"injectables/EmailService.html":{}}}],["createuser",{"_index":394,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["createuser.password",{"_index":397,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["createuserdto",{"_index":650,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createwithgoogle",{"_index":2012,"title":{},"body":{"injectables/UserService.html":{}}}],["createwithgoogle(email",{"_index":2036,"title":{},"body":{"injectables/UserService.html":{}}}],["creationdate",{"_index":1190,"title":{},"body":{"entities/Log.html":{}}}],["credentials",{"_index":416,"title":{},"body":{"injectables/AuthenticationServices.html":{},"injectables/ChatService.html":{}}}],["credit",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"controllers/CreditCardsController.html":{},"injectables/StripeService.html":{}}}],["creditcard",{"_index":663,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["creditcard.paymentmethodid",{"_index":677,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["creditcards.controller",{"_index":686,"title":{},"body":{"modules/CreditCardsModule.html":{}}}],["creditcardscontroller",{"_index":655,"title":{"controllers/CreditCardsController.html":{}},"body":{"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"coverage.html":{}}}],["creditcardsmodule",{"_index":75,"title":{"modules/CreditCardsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CreditCardsModule.html":{},"modules.html":{},"overview.html":{}}}],["cron",{"_index":913,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["cronjob",{"_index":915,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["cronjob(date",{"_index":919,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["ctx._source.${key}='${value",{"_index":1401,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["currency",{"_index":1805,"title":{},"body":{"injectables/StripeService.html":{}}}],["currenthashedrefreshtoken",{"_index":1947,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["customer",{"_index":1803,"title":{},"body":{"injectables/StripeService.html":{}}}],["customer.subscription.created",{"_index":1850,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["customer.subscription.updated",{"_index":1849,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["customerid",{"_index":1774,"title":{},"body":{"injectables/StripeService.html":{},"injectables/stripeWebhookService.html":{},"injectables/subscriptionsService.html":{}}}],["customlogger",{"_index":687,"title":{"injectables/CustomLogger.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LoggerModule.html":{},"coverage.html":{},"overview.html":{}}}],["của",{"_index":1376,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["d",{"_index":2088,"title":{},"body":{"injectables/UserService.html":{}}}],["data",{"_index":1231,"title":{},"body":{"injectables/LogsService.html":{},"injectables/stripeWebhookService.html":{}}}],["data.customer",{"_index":2422,"title":{},"body":{"injectables/stripeWebhookService.html":{}}}],["data.latest_invoice",{"_index":1812,"title":{},"body":{"injectables/StripeService.html":{}}}],["data.latest_invoice.payment_intent",{"_index":1813,"title":{},"body":{"injectables/StripeService.html":{}}}],["data.status",{"_index":2424,"title":{},"body":{"injectables/stripeWebhookService.html":{}}}],["database",{"_index":792,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/categoriesService.html":{}}}],["database/database.module",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["database/posgreserrorcodes.enum",{"_index":389,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["databaselogger",{"_index":728,"title":{"classes/DatabaseLogger.html":{}},"body":{"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"coverage.html":{}}}],["databasemodule",{"_index":76,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["databuffer",{"_index":999,"title":{},"body":{"injectables/FileService.html":{},"injectables/PrivateFileService.html":{}}}],["date",{"_index":508,"title":{},"body":{"entities/Category.html":{},"classes/EmailScheduleDto.html":{},"injectables/EmailSchedulingService.html":{},"entities/Log.html":{}}}],["date(emailschedule.date",{"_index":917,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["date.now",{"_index":924,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["debug",{"_index":691,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["debug(message",{"_index":699,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["decodeconfirmationtoken",{"_index":830,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["decodeconfirmationtoken(token",{"_index":838,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["decorators",{"_index":14,"title":{},"body":{"classes/AddCreditCardDto.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"entities/Category.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailModuleController.html":{},"classes/EmailScheduleDto.html":{},"classes/FindOneParams.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/ImageProcessor.html":{},"entities/Log.html":{},"entities/Message.html":{},"classes/ObjectWithDto.html":{},"controllers/OptimizeController.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"controllers/ProductCategoriesController.html":{},"entities/ProductCategory.html":{},"controllers/ProductsController.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"entities/StripeEvent.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscriptionsController.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"classes/UpdateCategoryDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"classes/createPostDto.html":{},"classes/updatePostDto.html":{}}}],["default",{"_index":23,"title":{},"body":{"classes/AddCreditCardDto.html":{},"entities/Address.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationServices.html":{},"controllers/CategoriesController.html":{},"classes/CategoriesNotFoundException.html":{},"entities/Category.html":{},"controllers/ChargeController.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"controllers/EmailModuleController.html":{},"classes/EmailScheduleDto.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"classes/FindOneParams.html":{},"classes/ImageProcessor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtTwoFactorGuard.html":{},"entities/Log.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"entities/Message.html":{},"classes/ObjectWithDto.html":{},"entities/Post.html":{},"interfaces/PostCountResult.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"injectables/PostSearchService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"controllers/ProductCategoriesController.html":{},"entities/ProductCategory.html":{},"injectables/ProductService.html":{},"controllers/ProductsController.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"entities/StripeEvent.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscriptionsController.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/UpdateCategoryDto.html":{},"entities/User.html":{},"classes/createPostDto.html":{},"guards/emailConfirmationGuard.html":{},"injectables/productCategoriesService.html":{},"injectables/stripeWebhookService.html":{},"injectables/subscriptionsService.html":{},"classes/updatePostDto.html":{},"miscellaneous/variables.html":{},"interfaces/verificationTokenPayload.html":{}}}],["default_payment_method",{"_index":1816,"title":{},"body":{"injectables/StripeService.html":{}}}],["defined",{"_index":16,"title":{},"body":{"classes/AddCreditCardDto.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationServices.html":{},"controllers/CategoriesController.html":{},"classes/CategoriesNotFoundException.html":{},"entities/Category.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailModuleController.html":{},"classes/EmailScheduleDto.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FileService.html":{},"classes/FindOneParams.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/ImageProcessor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"entities/Message.html":{},"classes/ObjectWithDto.html":{},"controllers/OptimizeController.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"injectables/PostSearchService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"entities/Product.html":{},"controllers/ProductCategoriesController.html":{},"entities/ProductCategory.html":{},"injectables/ProductService.html":{},"controllers/ProductsController.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"entities/StripeEvent.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscriptionsController.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/categoriesService.html":{},"classes/createPostDto.html":{},"guards/emailConfirmationGuard.html":{},"injectables/jwtStrategy.html":{},"injectables/productCategoriesService.html":{},"injectables/stripeWebhookService.html":{},"injectables/subscriptionsService.html":{},"classes/updatePostDto.html":{}}}],["definition",{"_index":2170,"title":{},"body":{"injectables/categoriesService.html":{}}}],["delete",{"_index":475,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/PostSearchService.html":{},"controllers/PostsController.html":{}}}],["delete(':id",{"_index":465,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{}}}],["delete(postid",{"_index":1345,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["deletecategory",{"_index":454,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/categoriesService.html":{}}}],["deletecategory(@param",{"_index":494,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["deletecategory(id",{"_index":2153,"title":{},"body":{"injectables/categoriesService.html":{}}}],["deletecategory(undefined",{"_index":463,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["deletecategorybyid",{"_index":2151,"title":{},"body":{"injectables/categoriesService.html":{}}}],["deletecategorybyid(id",{"_index":2157,"title":{},"body":{"injectables/categoriesService.html":{}}}],["deletedat",{"_index":506,"title":{},"body":{"entities/Category.html":{}}}],["deletedatecolumn",{"_index":509,"title":{},"body":{"entities/Category.html":{}}}],["deleteobject",{"_index":1017,"title":{},"body":{"injectables/FileService.html":{}}}],["deletepost",{"_index":1408,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletepost(@param('id",{"_index":1460,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(id",{"_index":1416,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletepost.affected",{"_index":1539,"title":{},"body":{"injectables/PostsService.html":{}}}],["deletepublicavatar",{"_index":2013,"title":{},"body":{"injectables/UserService.html":{}}}],["deletepublicavatar(userid",{"_index":2038,"title":{},"body":{"injectables/UserService.html":{}}}],["deletepublicfile",{"_index":984,"title":{},"body":{"injectables/FileService.html":{},"controllers/UsersController.html":{}}}],["deletepublicfile(@req",{"_index":2139,"title":{},"body":{"controllers/UsersController.html":{}}}],["deletepublicfile(fileid",{"_index":990,"title":{},"body":{"injectables/FileService.html":{}}}],["deletepublicfile(request",{"_index":2120,"title":{},"body":{"controllers/UsersController.html":{}}}],["deletepublicfilewithqueryrunner",{"_index":985,"title":{},"body":{"injectables/FileService.html":{}}}],["deletepublicfilewithqueryrunner(fileid",{"_index":993,"title":{},"body":{"injectables/FileService.html":{}}}],["deleteresponse",{"_index":2187,"title":{},"body":{"injectables/categoriesService.html":{}}}],["deleteresponse.affected",{"_index":2189,"title":{},"body":{"injectables/categoriesService.html":{}}}],["deletes",{"_index":2155,"title":{},"body":{"injectables/categoriesService.html":{}}}],["dependencies",{"_index":68,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoryModule.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"modules/CreditCardsModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FileModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/PrivateFilesModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscriptionsModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deprecated",{"_index":2185,"title":{},"body":{"injectables/categoriesService.html":{}}}],["description",{"_index":2156,"title":{},"body":{"injectables/categoriesService.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":2337,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":2191,"title":{},"body":{"coverage.html":{}}}],["donecallback",{"_index":1112,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["donecallback(null",{"_index":1144,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["dto/addcreditcarddto",{"_index":673,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["dto/checkverificationcode.dto",{"_index":1699,"title":{},"body":{"controllers/SmsController.html":{}}}],["dto/confirmemail.dto",{"_index":809,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["dto/createcategory.dto",{"_index":484,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/categoriesService.html":{}}}],["dto/createcharge.dto",{"_index":534,"title":{},"body":{"controllers/ChargeController.html":{}}}],["dto/createlog.dto",{"_index":1226,"title":{},"body":{"injectables/LogsService.html":{}}}],["dto/createpost.dto",{"_index":1430,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/createproduct.dto",{"_index":1634,"title":{},"body":{"injectables/ProductService.html":{},"controllers/ProductsController.html":{}}}],["dto/createproductcategory.dto",{"_index":1607,"title":{},"body":{"controllers/ProductCategoriesController.html":{},"injectables/productCategoriesService.html":{}}}],["dto/createuser.dto",{"_index":2064,"title":{},"body":{"injectables/UserService.html":{}}}],["dto/emailscheduling.dto",{"_index":889,"title":{},"body":{"controllers/EmailModuleController.html":{},"injectables/EmailSchedulingService.html":{}}}],["dto/register.dto",{"_index":241,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationServices.html":{}}}],["dto/setdefaultcreditcard.dto",{"_index":674,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["dto/tokenverification.dto",{"_index":1033,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["dto/twofactorauthenticationcode.dto",{"_index":1904,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["dto/updatecategory.dto",{"_index":485,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/categoriesService.html":{}}}],["dto/updatepost.dto",{"_index":1432,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dùng",{"_index":413,"title":{},"body":{"injectables/AuthenticationServices.html":{},"entities/User.html":{}}}],["dịch",{"_index":2085,"title":{},"body":{"injectables/UserService.html":{}}}],["dụng",{"_index":2083,"title":{},"body":{"injectables/UserService.html":{}}}],["e2e",{"_index":2347,"title":{},"body":{"index.html":{}}}],["each",{"_index":2239,"title":{},"body":{"classes/createPostDto.html":{},"classes/updatePostDto.html":{}}}],["eager",{"_index":1589,"title":{},"body":{"entities/Product.html":{},"entities/User.html":{}}}],["efficient",{"_index":2327,"title":{},"body":{"index.html":{}}}],["elastic/elasticsearch",{"_index":2243,"title":{},"body":{"dependencies.html":{}}}],["elasticsearchmodule",{"_index":1674,"title":{},"body":{"modules/SearchModule.html":{}}}],["elasticsearchmodule.registerasync",{"_index":1675,"title":{},"body":{"modules/SearchModule.html":{}}}],["elasticsearchservice",{"_index":1340,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["email",{"_index":367,"title":{},"body":{"injectables/AuthenticationServices.html":{},"classes/CreateUserDto.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailModuleController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/LocalStrategy.html":{},"classes/RegisterDto.html":{},"injectables/StripeService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"guards/emailConfirmationGuard.html":{},"miscellaneous/variables.html":{},"interfaces/verificationTokenPayload.html":{}}}],["email.service",{"_index":877,"title":{},"body":{"modules/EmailModule.html":{}}}],["email/email.module",{"_index":825,"title":{},"body":{"modules/EmailConfirmationModule.html":{},"modules/EmailSchedulingModule.html":{}}}],["email/email.service",{"_index":847,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["email_confirmation_url",{"_index":175,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailConfirmationService.html":{}}}],["email_password",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["email_service",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["email_user",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["emailconfirmation.controller",{"_index":826,"title":{},"body":{"modules/EmailConfirmationModule.html":{}}}],["emailconfirmation.service",{"_index":810,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{}}}],["emailconfirmation/emailconfirmation.module",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["emailconfirmationcontroller",{"_index":796,"title":{"controllers/EmailConfirmationController.html":{}},"body":{"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"coverage.html":{}}}],["emailconfirmationguard",{"_index":671,"title":{"guards/emailConfirmationGuard.html":{}},"body":{"controllers/CreditCardsController.html":{},"coverage.html":{},"guards/emailConfirmationGuard.html":{}}}],["emailconfirmationmodule",{"_index":77,"title":{"modules/EmailConfirmationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailConfirmationModule.html":{},"modules.html":{},"overview.html":{}}}],["emailconfirmationservice",{"_index":235,"title":{"injectables/EmailConfirmationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"coverage.html":{},"overview.html":{}}}],["emaillscheduling/emailscheduling.module",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["emailmodule",{"_index":823,"title":{"modules/EmailModule.html":{}},"body":{"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules.html":{},"overview.html":{}}}],["emailmodulecontroller",{"_index":878,"title":{"controllers/EmailModuleController.html":{}},"body":{"controllers/EmailModuleController.html":{},"coverage.html":{}}}],["emailschedule",{"_index":886,"title":{},"body":{"controllers/EmailModuleController.html":{},"injectables/EmailSchedulingService.html":{}}}],["emailschedule.content",{"_index":922,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailschedule.recipient",{"_index":920,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailschedule.subject",{"_index":921,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailscheduledto",{"_index":883,"title":{"classes/EmailScheduleDto.html":{}},"body":{"controllers/EmailModuleController.html":{},"classes/EmailScheduleDto.html":{},"injectables/EmailSchedulingService.html":{},"coverage.html":{}}}],["emailscheduling.controller",{"_index":906,"title":{},"body":{"modules/EmailSchedulingModule.html":{}}}],["emailscheduling.service",{"_index":888,"title":{},"body":{"controllers/EmailModuleController.html":{},"modules/EmailSchedulingModule.html":{}}}],["emailschedulingcontroller",{"_index":905,"title":{},"body":{"modules/EmailSchedulingModule.html":{}}}],["emailschedulingmodule",{"_index":78,"title":{"modules/EmailSchedulingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EmailSchedulingModule.html":{},"modules.html":{},"overview.html":{}}}],["emailschedulingservice",{"_index":887,"title":{"injectables/EmailSchedulingService.html":{}},"body":{"controllers/EmailModuleController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"coverage.html":{},"overview.html":{}}}],["emailservice",{"_index":833,"title":{"injectables/EmailService.html":{}},"body":{"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"coverage.html":{},"overview.html":{}}}],["emitter",{"_index":2256,"title":{},"body":{"dependencies.html":{}}}],["engine",{"_index":442,"title":{},"body":{"interfaces/BookProperties.html":{}}}],["entities",{"_index":28,"title":{},"body":{"entities/Address.html":{},"entities/Category.html":{},"modules/DatabaseModule.html":{},"entities/Log.html":{},"entities/Message.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/ProductCategory.html":{},"entities/PublicFile.html":{},"entities/StripeEvent.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":26,"title":{"entities/Address.html":{},"entities/Category.html":{},"entities/Log.html":{},"entities/Message.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/ProductCategory.html":{},"entities/PublicFile.html":{},"entities/StripeEvent.html":{},"entities/User.html":{}},"body":{"entities/Address.html":{},"entities/Category.html":{},"entities/Log.html":{},"entities/Message.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/ProductCategory.html":{},"entities/PublicFile.html":{},"entities/StripeEvent.html":{},"entities/User.html":{},"coverage.html":{}}}],["enumerations",{"_index":2300,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":716,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["error",{"_index":399,"title":{},"body":{"injectables/AuthenticationServices.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/StripeService.html":{},"injectables/UserService.html":{},"injectables/stripeWebhookService.html":{}}}],["error(message",{"_index":702,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["error.status",{"_index":1076,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["error?.code",{"_index":400,"title":{},"body":{"injectables/AuthenticationServices.html":{},"injectables/StripeService.html":{},"injectables/stripeWebhookService.html":{}}}],["error?.name",{"_index":867,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["error?.type",{"_index":1817,"title":{},"body":{"injectables/StripeService.html":{}}}],["event",{"_index":1846,"title":{},"body":{"controllers/StripeWebhookController.html":{},"injectables/stripeWebhookService.html":{}}}],["event.data.object",{"_index":2420,"title":{},"body":{"injectables/stripeWebhookService.html":{}}}],["event.type",{"_index":1848,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["eventrepository",{"_index":2408,"title":{},"body":{"injectables/stripeWebhookService.html":{}}}],["example",{"_index":2165,"title":{},"body":{"injectables/categoriesService.html":{}}}],["exception",{"_index":953,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["exception/postnotfound.exception",{"_index":1506,"title":{},"body":{"injectables/PostsService.html":{}}}],["exceptionsloggerfilter",{"_index":947,"title":{"classes/ExceptionsLoggerFilter.html":{}},"body":{"classes/ExceptionsLoggerFilter.html":{},"coverage.html":{}}}],["exclude",{"_index":256,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationServices.html":{},"controllers/PostsController.html":{},"entities/User.html":{}}}],["excludenullinterceptor",{"_index":957,"title":{"injectables/ExcludeNullInterceptor.html":{}},"body":{"injectables/ExcludeNullInterceptor.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["executioncontext",{"_index":961,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"guards/emailConfirmationGuard.html":{}}}],["exist",{"_index":1530,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UserService.html":{},"injectables/categoriesService.html":{}}}],["exists",{"_index":405,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["expand",{"_index":1811,"title":{},"body":{"injectables/StripeService.html":{}}}],["expired",{"_index":869,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["expiresin",{"_index":352,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationServices.html":{},"injectables/EmailConfirmationService.html":{}}}],["export",{"_index":22,"title":{},"body":{"classes/AddCreditCardDto.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationServices.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"classes/CategoriesNotFoundException.html":{},"entities/Category.html":{},"modules/CategoryModule.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"controllers/EmailModuleController.html":{},"classes/EmailScheduleDto.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"classes/FindOneParams.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/ImageProcessor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthentication.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"entities/Message.html":{},"classes/ObjectWithDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"interfaces/PostCountResult.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"injectables/PostSearchService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"modules/PrivateFilesModule.html":{},"entities/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"entities/ProductCategory.html":{},"injectables/ProductService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"entities/StripeEvent.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/categoriesService.html":{},"classes/createPostDto.html":{},"guards/emailConfirmationGuard.html":{},"injectables/jwtStrategy.html":{},"injectables/productCategoriesService.html":{},"injectables/stripeWebhookService.html":{},"injectables/subscriptionsService.html":{},"classes/updatePostDto.html":{},"interfaces/verificationTokenPayload.html":{}}}],["exports",{"_index":334,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/FileModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/LoggerModule.html":{},"modules/OptimizeModule.html":{},"modules/PrivateFilesModule.html":{},"modules/SearchModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/UserModule.html":{}}}],["express",{"_index":234,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/ImageProcessor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsMiddleware.html":{},"controllers/OptimizeController.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"dependencies.html":{},"injectables/jwtStrategy.html":{}}}],["express.multer.file",{"_index":1126,"title":{},"body":{"classes/ImageProcessor.html":{},"controllers/OptimizeController.html":{},"controllers/UsersController.html":{}}}],["extends",{"_index":498,"title":{},"body":{"classes/CategoriesNotFoundException.html":{},"injectables/CustomLogger.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthentication.html":{},"injectables/LocalStrategy.html":{},"classes/PostNotFoundException.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"injectables/jwtStrategy.html":{}}}],["extractjwt",{"_index":1157,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/jwtStrategy.html":{}}}],["extractjwt.fromextractors",{"_index":1163,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/jwtStrategy.html":{}}}],["factor",{"_index":1172,"title":{},"body":{"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["factor.guards",{"_index":1438,"title":{},"body":{"controllers/PostsController.html":{}}}],["factor.guards.ts",{"_index":1171,"title":{},"body":{"injectables/JwtTwoFactorGuard.html":{},"coverage.html":{}}}],["factor.strategy",{"_index":346,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["factor.strategy.ts",{"_index":1173,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{},"coverage.html":{}}}],["factor.strategy.ts:13",{"_index":1174,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["factor.strategy.ts:28",{"_index":1176,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["false",{"_index":374,"title":{},"body":{"injectables/AuthenticationServices.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["fetches",{"_index":2160,"title":{},"body":{"injectables/categoriesService.html":{}}}],["fields",{"_index":1343,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AddCreditCardDto.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationServices.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"classes/CategoriesNotFoundException.html":{},"entities/Category.html":{},"modules/CategoryModule.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"controllers/EmailModuleController.html":{},"classes/EmailScheduleDto.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"classes/FindOneParams.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/ImageProcessor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthentication.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"entities/Message.html":{},"classes/ObjectWithDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"interfaces/PostCountResult.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"injectables/PostSearchService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"modules/PrivateFilesModule.html":{},"entities/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"entities/ProductCategory.html":{},"injectables/ProductService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"entities/StripeEvent.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/categoriesService.html":{},"coverage.html":{},"classes/createPostDto.html":{},"guards/emailConfirmationGuard.html":{},"injectables/jwtStrategy.html":{},"injectables/productCategoriesService.html":{},"injectables/stripeWebhookService.html":{},"injectables/subscriptionsService.html":{},"classes/updatePostDto.html":{},"interfaces/verificationTokenPayload.html":{}}}],["file.buffer",{"_index":2136,"title":{},"body":{"controllers/UsersController.html":{}}}],["file.info.owner.id",{"_index":2101,"title":{},"body":{"injectables/UserService.html":{}}}],["file.key",{"_index":1018,"title":{},"body":{"injectables/FileService.html":{},"injectables/UserService.html":{}}}],["file.originalname",{"_index":2137,"title":{},"body":{"controllers/UsersController.html":{}}}],["file.owner",{"_index":1964,"title":{},"body":{"entities/User.html":{}}}],["file.stream.pipe(res",{"_index":2146,"title":{},"body":{"controllers/UsersController.html":{}}}],["file]{@link",{"_index":2179,"title":{},"body":{"injectables/categoriesService.html":{}}}],["filebuffer",{"_index":1130,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["filedata",{"_index":1140,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["fileid",{"_index":992,"title":{},"body":{"injectables/FileService.html":{},"injectables/PrivateFileService.html":{},"injectables/UserService.html":{}}}],["fileinfo",{"_index":1575,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["fileinfo.key",{"_index":1578,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["fileinterceptor",{"_index":2130,"title":{},"body":{"controllers/UsersController.html":{}}}],["filemodule",{"_index":79,"title":{"modules/FileModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FileModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["filename",{"_index":997,"title":{},"body":{"injectables/FileService.html":{},"injectables/PrivateFileService.html":{},"injectables/UserService.html":{}}}],["files",{"_index":1125,"title":{},"body":{"classes/ImageProcessor.html":{},"controllers/OptimizeController.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["files.map((file",{"_index":1129,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["files.service",{"_index":980,"title":{},"body":{"modules/FileModule.html":{}}}],["files/files.module",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["files/files.service",{"_index":2065,"title":{},"body":{"injectables/UserService.html":{}}}],["files/publicfile.entity",{"_index":774,"title":{},"body":{"modules/DatabaseModule.html":{},"entities/User.html":{}}}],["files[index",{"_index":1141,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["fileservice",{"_index":978,"title":{"injectables/FileService.html":{}},"body":{"modules/FileModule.html":{},"injectables/FileService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["filter",{"_index":1380,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["finally",{"_index":2097,"title":{},"body":{"injectables/UserService.html":{}}}],["findmanyoptions",{"_index":1494,"title":{},"body":{"injectables/PostsService.html":{}}}],["findmanyoptions['where",{"_index":1514,"title":{},"body":{"injectables/PostsService.html":{}}}],["findoneparams",{"_index":464,"title":{"classes/FindOneParams.html":{}},"body":{"controllers/CategoriesController.html":{},"classes/FindOneParams.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["first",{"_index":2298,"title":{},"body":{"guards/emailConfirmationGuard.html":{}}}],["found",{"_index":504,"title":{},"body":{"classes/CategoriesNotFoundException.html":{},"classes/PostNotFoundException.html":{},"injectables/UserService.html":{}}}],["framework",{"_index":2325,"title":{},"body":{"index.html":{}}}],["frontend_url",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["fuel",{"_index":444,"title":{},"body":{"interfaces/BookProperties.html":{}}}],["function",{"_index":2212,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":2311,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generatepresignedurl",{"_index":1556,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["generatepresignedurl(key",{"_index":1563,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["generatetwofactorauthenticationsecret",{"_index":1918,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["generatetwofactorauthenticationsecret(user",{"_index":1922,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["get(':id",{"_index":469,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{}}}],["get('files",{"_index":2147,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('files')@useguards(jwtauthenticationguard",{"_index":2124,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('files/:id",{"_index":2143,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('files/:id')@useguards(jwtauthenticationguard",{"_index":2127,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('image/:id",{"_index":1247,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["get('monthly",{"_index":1875,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["get('monthly')@useguards(jwtauthenticationguard",{"_index":1867,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["get('refresh",{"_index":320,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["get()@useguards(emailconfirmationguard)@useguards(jwtauthenticationguard",{"_index":665,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["get(key",{"_index":2459,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get_posts_cache",{"_index":2449,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get_posts_cache_key",{"_index":1435,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getallcategories",{"_index":455,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/categoriesService.html":{}}}],["getallmessages",{"_index":591,"title":{},"body":{"injectables/ChatService.html":{}}}],["getallprivatefiles",{"_index":2014,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["getallprivatefiles(@req",{"_index":2148,"title":{},"body":{"controllers/UsersController.html":{}}}],["getallprivatefiles(request",{"_index":2123,"title":{},"body":{"controllers/UsersController.html":{}}}],["getallprivatefiles(userid",{"_index":2040,"title":{},"body":{"injectables/UserService.html":{}}}],["getallproductcategories",{"_index":2390,"title":{},"body":{"injectables/productCategoriesService.html":{}}}],["getallproducts",{"_index":1601,"title":{},"body":{"controllers/ProductCategoriesController.html":{},"injectables/ProductService.html":{},"controllers/ProductsController.html":{}}}],["getauthenticateduser",{"_index":355,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["getauthenticateduser(email",{"_index":364,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["getbyemail",{"_index":2015,"title":{},"body":{"injectables/UserService.html":{}}}],["getbyemail(email",{"_index":2042,"title":{},"body":{"injectables/UserService.html":{}}}],["getbyid",{"_index":2016,"title":{},"body":{"injectables/UserService.html":{}}}],["getbyid(id",{"_index":2044,"title":{},"body":{"injectables/UserService.html":{}}}],["getcategorybyid",{"_index":456,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/categoriesService.html":{}}}],["getcategorybyid(@param",{"_index":488,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["getcategorybyid(id",{"_index":2162,"title":{},"body":{"injectables/categoriesService.html":{}}}],["getcategorybyid(undefined",{"_index":468,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["getcookieforlogout",{"_index":356,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["getcookieforuser",{"_index":1046,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["getcookieforuser(user",{"_index":1054,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["getcookiewithjwtaccesstoken",{"_index":357,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["getcookiewithjwtaccesstoken(userid",{"_index":369,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["getcookiewithjwtrefreshtoken",{"_index":358,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["getcookiewithjwtrefreshtoken(userid",{"_index":375,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["getcreditcards",{"_index":659,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["getcreditcards(@req",{"_index":679,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["getcreditcards(request",{"_index":664,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["gethello",{"_index":55,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getjobresult",{"_index":1244,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["getjobresult(@res",{"_index":1268,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["getjobresult(response",{"_index":1246,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["getloglevels",{"_index":713,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getloglevels(environment",{"_index":720,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["getloglevels(isproduction",{"_index":2317,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getmonthlysubscription",{"_index":1862,"title":{},"body":{"controllers/SubscriptionsController.html":{},"injectables/subscriptionsService.html":{}}}],["getmonthlysubscription(@req",{"_index":1876,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["getmonthlysubscription(customerid",{"_index":2430,"title":{},"body":{"injectables/subscriptionsService.html":{}}}],["getmonthlysubscription(request",{"_index":1866,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["getobject",{"_index":1577,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["getpostbyid",{"_index":1409,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getpostbyid(@param",{"_index":1452,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostbyid(id",{"_index":1491,"title":{},"body":{"injectables/PostsService.html":{}}}],["getpostbyid(undefined",{"_index":1418,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts",{"_index":1410,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getposts(offset",{"_index":1493,"title":{},"body":{"injectables/PostsService.html":{}}}],["getposts(search",{"_index":1420,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostswithauthor",{"_index":1481,"title":{},"body":{"injectables/PostsService.html":{}}}],["getpostswithauthor(offset",{"_index":1496,"title":{},"body":{"injectables/PostsService.html":{}}}],["getprivatefile",{"_index":1557,"title":{},"body":{"injectables/PrivateFileService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["getprivatefile(fileid",{"_index":1565,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["getprivatefile(request",{"_index":2126,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprivatefile(userid",{"_index":2046,"title":{},"body":{"injectables/UserService.html":{}}}],["getting",{"_index":2321,"title":{"index.html":{}},"body":{}}],["getuserdata",{"_index":1047,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["getuserdata(token",{"_index":1056,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["getuserfromauthenticationtoken",{"_index":359,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["getuserfromauthenticationtoken(token",{"_index":377,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["getuserfromsocket",{"_index":592,"title":{},"body":{"injectables/ChatService.html":{}}}],["getuserfromsocket(socket",{"_index":599,"title":{},"body":{"injectables/ChatService.html":{}}}],["getuserifrefreshtokenmatches",{"_index":2017,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserifrefreshtokenmatches(refreshtoken",{"_index":2048,"title":{},"body":{"injectables/UserService.html":{}}}],["gi",{"_index":1378,"title":{},"body":{"injectables/PostSearchService.html":{},"injectables/PostsService.html":{}}}],["giao",{"_index":2084,"title":{},"body":{"injectables/UserService.html":{}}}],["given",{"_index":2164,"title":{},"body":{"injectables/categoriesService.html":{}}}],["google",{"_index":1027,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["google.auth.oauth2(clientid",{"_index":1071,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["google.oauth2('v2').userinfo",{"_index":1084,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["google_auth_client_id",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["google_auth_client_secret",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["googleapis",{"_index":1064,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"dependencies.html":{}}}],["googleauthencation.controller",{"_index":1043,"title":{},"body":{"modules/GoogleAuthenticationModule.html":{}}}],["googleauthentication.service",{"_index":1035,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{}}}],["googleauthentication/googleauthentication.module",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["googleauthenticationcontroller",{"_index":1025,"title":{"controllers/GoogleAuthenticationController.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"coverage.html":{}}}],["googleauthenticationmodule",{"_index":80,"title":{"modules/GoogleAuthenticationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules.html":{},"overview.html":{}}}],["googleauthenticationservice",{"_index":1034,"title":{"injectables/GoogleAuthenticationService.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["graph",{"_index":2380,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":2354,"title":{},"body":{"index.html":{}}}],["gt",{"_index":1382,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["guard",{"_index":2208,"title":{"guards/emailConfirmationGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":2292,"title":{},"body":{"guards/emailConfirmationGuard.html":{}}}],["gọi",{"_index":272,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/LocalAuthentication.html":{}}}],["gồm",{"_index":1525,"title":{},"body":{"injectables/PostsService.html":{},"entities/User.html":{}}}],["handle",{"_index":972,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["handleconnection",{"_index":550,"title":{},"body":{"classes/ChatGateway.html":{}}}],["handleconnection(socket",{"_index":557,"title":{},"body":{"classes/ChatGateway.html":{}}}],["handleincomingevents",{"_index":1832,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["handleincomingevents(signature",{"_index":1833,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["handleoptimization",{"_index":1110,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["handleoptimization(job",{"_index":1111,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["handleregistereduser",{"_index":1048,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["handleregistereduser(user",{"_index":1058,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["hapi/joi",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["hashedpassword",{"_index":381,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["hashpassword",{"_index":390,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["header",{"_index":1845,"title":{},"body":{"controllers/StripeWebhookController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["headers",{"_index":1835,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["headers('stripe",{"_index":1841,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["hello",{"_index":196,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":856,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"index.html":{}}}],["hits",{"_index":1331,"title":{},"body":{"interfaces/PostSearchResult.html":{},"injectables/PostSearchService.html":{}}}],["hits.map((item",{"_index":1388,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["host",{"_index":186,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"classes/ExceptionsLoggerFilter.html":{},"modules/PostsModule.html":{}}}],["httpcache.interceptor",{"_index":1437,"title":{},"body":{"controllers/PostsController.html":{}}}],["httpcacheinterceptor",{"_index":1093,"title":{"injectables/HttpCacheInterceptor.html":{}},"body":{"injectables/HttpCacheInterceptor.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["httpcode",{"_index":227,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CreditCardsController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["httpcode(200",{"_index":270,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CreditCardsController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["httpcode(200)@useguards(localauthentication)@post('log",{"_index":208,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpexception",{"_index":383,"title":{},"body":{"injectables/AuthenticationServices.html":{},"injectables/UserService.html":{}}}],["httpexception('user",{"_index":2070,"title":{},"body":{"injectables/UserService.html":{}}}],["httponly",{"_index":425,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["https://docs.nestjs.com/controllers#library",{"_index":296,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["https://nestjs.com",{"_index":2369,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":384,"title":{},"body":{"injectables/AuthenticationServices.html":{},"injectables/UserService.html":{}}}],["httpstatus.bad_request",{"_index":406,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["httpstatus.internal_server_error",{"_index":410,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["httpstatus.not_found",{"_index":2069,"title":{},"body":{"injectables/UserService.html":{}}}],["hồi",{"_index":1443,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{}}}],["id",{"_index":33,"title":{},"body":{"entities/Address.html":{},"controllers/CategoriesController.html":{},"classes/CategoriesNotFoundException.html":{},"entities/Category.html":{},"injectables/FileService.html":{},"classes/FindOneParams.html":{},"entities/Log.html":{},"entities/Message.html":{},"classes/ObjectWithDto.html":{},"controllers/OptimizeController.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"injectables/PostSearchService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"entities/Product.html":{},"entities/ProductCategory.html":{},"entities/PublicFile.html":{},"entities/StripeEvent.html":{},"classes/UpdateCategoryDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/categoriesService.html":{},"injectables/stripeWebhookService.html":{},"classes/updatePostDto.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":2192,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":1542,"title":{},"body":{"injectables/PostsService.html":{}}}],["ids.length",{"_index":1545,"title":{},"body":{"injectables/PostsService.html":{}}}],["ignore",{"_index":2173,"title":{},"body":{"injectables/categoriesService.html":{}}}],["image",{"_index":1143,"title":{},"body":{"classes/ImageProcessor.html":{},"modules/OptimizeModule.html":{}}}],["image.processor",{"_index":1282,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["image.processor.js",{"_index":1286,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["imagebuffer",{"_index":2030,"title":{},"body":{"injectables/UserService.html":{}}}],["imagemin",{"_index":1121,"title":{},"body":{"classes/ImageProcessor.html":{},"dependencies.html":{}}}],["imageminpngquant",{"_index":1122,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["imageprocessor",{"_index":1108,"title":{"classes/ImageProcessor.html":{}},"body":{"classes/ImageProcessor.html":{},"modules/OptimizeModule.html":{},"coverage.html":{}}}],["imagequeue",{"_index":1261,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["implements",{"_index":730,"title":{},"body":{"classes/DatabaseLogger.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/LogsMiddleware.html":{},"guards/emailConfirmationGuard.html":{}}}],["import",{"_index":18,"title":{},"body":{"classes/AddCreditCardDto.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationServices.html":{},"controllers/CategoriesController.html":{},"classes/CategoriesNotFoundException.html":{},"entities/Category.html":{},"modules/CategoryModule.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"controllers/EmailModuleController.html":{},"classes/EmailScheduleDto.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"classes/FindOneParams.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/ImageProcessor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthentication.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"entities/Message.html":{},"classes/ObjectWithDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchResult.html":{},"injectables/PostSearchService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"modules/PrivateFilesModule.html":{},"entities/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"entities/ProductCategory.html":{},"injectables/ProductService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"entities/StripeEvent.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/categoriesService.html":{},"classes/createPostDto.html":{},"guards/emailConfirmationGuard.html":{},"injectables/jwtStrategy.html":{},"injectables/productCategoriesService.html":{},"injectables/stripeWebhookService.html":{},"injectables/subscriptionsService.html":{},"classes/updatePostDto.html":{}}}],["imports",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoryModule.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"modules/CreditCardsModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FileModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/LoggerModule.html":{},"modules/OptimizeModule.html":{},"modules/PostsModule.html":{},"modules/PrivateFilesModule.html":{},"modules/ProductCategoriesModule.html":{},"modules/ProductsModule.html":{},"modules/SearchModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscriptionsModule.html":{},"modules/UserModule.html":{}}}],["in(ids",{"_index":1547,"title":{},"body":{"injectables/PostsService.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"classes/AddCreditCardDto.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationServices.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"entities/Category.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailModuleController.html":{},"classes/EmailScheduleDto.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FileService.html":{},"classes/FindOneParams.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/ImageProcessor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"entities/Message.html":{},"classes/ObjectWithDto.html":{},"controllers/OptimizeController.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"interfaces/PostCountResult.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"injectables/PostSearchService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"entities/Product.html":{},"controllers/ProductCategoriesController.html":{},"entities/ProductCategory.html":{},"injectables/ProductService.html":{},"controllers/ProductsController.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"entities/StripeEvent.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscriptionsController.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/categoriesService.html":{},"classes/createPostDto.html":{},"guards/emailConfirmationGuard.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"injectables/jwtStrategy.html":{},"injectables/productCategoriesService.html":{},"injectables/stripeWebhookService.html":{},"injectables/subscriptionsService.html":{},"classes/updatePostDto.html":{},"miscellaneous/variables.html":{},"interfaces/verificationTokenPayload.html":{}}}],["index('post_authorid_index",{"_index":1317,"title":{},"body":{"entities/Post.html":{}}}],["index('post_authorid_index')@manytoone(undefined",{"_index":1304,"title":{},"body":{"entities/Post.html":{}}}],["indexpost",{"_index":1336,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["indexpost(post",{"_index":1347,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AddCreditCardDto.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationServices.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"classes/CategoriesNotFoundException.html":{},"entities/Category.html":{},"modules/CategoryModule.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"controllers/EmailModuleController.html":{},"classes/EmailScheduleDto.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"classes/FindOneParams.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/ImageProcessor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthentication.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"entities/Message.html":{},"classes/ObjectWithDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"interfaces/PostCountResult.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"injectables/PostSearchService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"modules/PrivateFilesModule.html":{},"entities/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"entities/ProductCategory.html":{},"injectables/ProductService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"entities/StripeEvent.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/categoriesService.html":{},"classes/createPostDto.html":{},"guards/emailConfirmationGuard.html":{},"injectables/jwtStrategy.html":{},"injectables/productCategoriesService.html":{},"injectables/stripeWebhookService.html":{},"injectables/subscriptionsService.html":{},"classes/updatePostDto.html":{},"interfaces/verificationTokenPayload.html":{}}}],["initiatephonenumberverification",{"_index":1686,"title":{},"body":{"controllers/SmsController.html":{},"injectables/SmsService.html":{}}}],["initiatephonenumberverification(@req",{"_index":1701,"title":{},"body":{"controllers/SmsController.html":{}}}],["initiatephonenumberverification(phonenumber",{"_index":1724,"title":{},"body":{"injectables/SmsService.html":{}}}],["initiatephonenumberverification(request",{"_index":1693,"title":{},"body":{"controllers/SmsController.html":{}}}],["inject",{"_index":189,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/SearchModule.html":{}}}],["inject(cache_manager",{"_index":1508,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectable",{"_index":192,"title":{"injectables/AppService.html":{},"injectables/AuthenticationServices.html":{},"injectables/ChatService.html":{},"injectables/CustomLogger.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FileService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthentication.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"injectables/PostSearchService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"injectables/ProductService.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UserService.html":{},"injectables/categoriesService.html":{},"injectables/jwtStrategy.html":{},"injectables/productCategoriesService.html":{},"injectables/stripeWebhookService.html":{},"injectables/subscriptionsService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthenticationServices.html":{},"injectables/ChatService.html":{},"injectables/CustomLogger.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FileService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthentication.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"injectables/PostSearchService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"injectables/ProductService.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UserService.html":{},"injectables/categoriesService.html":{},"coverage.html":{},"guards/emailConfirmationGuard.html":{},"injectables/jwtStrategy.html":{},"injectables/productCategoriesService.html":{},"injectables/stripeWebhookService.html":{},"injectables/subscriptionsService.html":{}}}],["injectables",{"_index":193,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthenticationServices.html":{},"injectables/ChatService.html":{},"injectables/CustomLogger.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FileService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthentication.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"injectables/PostSearchService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"injectables/ProductService.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UserService.html":{},"injectables/categoriesService.html":{},"injectables/jwtStrategy.html":{},"overview.html":{},"injectables/productCategoriesService.html":{},"injectables/stripeWebhookService.html":{},"injectables/subscriptionsService.html":{}}}],["injectqueue",{"_index":1255,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["injectqueue('image",{"_index":1260,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["injectrepository",{"_index":478,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/ChatService.html":{},"injectables/FileService.html":{},"injectables/LogsService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{},"injectables/categoriesService.html":{},"injectables/productCategoriesService.html":{},"injectables/stripeWebhookService.html":{}}}],["injectrepository(category",{"_index":2174,"title":{},"body":{"injectables/categoriesService.html":{}}}],["injectrepository(log",{"_index":1227,"title":{},"body":{"injectables/LogsService.html":{}}}],["injectrepository(message",{"_index":607,"title":{},"body":{"injectables/ChatService.html":{}}}],["injectrepository(post",{"_index":1507,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(privatefile",{"_index":1571,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["injectrepository(product",{"_index":1635,"title":{},"body":{"injectables/ProductService.html":{}}}],["injectrepository(productcategory",{"_index":2397,"title":{},"body":{"injectables/productCategoriesService.html":{}}}],["injectrepository(publicfile",{"_index":1005,"title":{},"body":{"injectables/FileService.html":{}}}],["injectrepository(stripeevent",{"_index":2415,"title":{},"body":{"injectables/stripeWebhookService.html":{}}}],["injectrepository(user",{"_index":2067,"title":{},"body":{"injectables/UserService.html":{}}}],["inline",{"_index":1404,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["installation",{"_index":2333,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":2335,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":959,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["intercept(context",{"_index":960,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["interceptors,decorators",{"_index":292,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["interface",{"_index":437,"title":{"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"interfaces/PostCountResult.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"interfaces/verificationTokenPayload.html":{}},"body":{"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"interfaces/PostCountResult.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{},"interfaces/verificationTokenPayload.html":{}}}],["interfaces",{"_index":439,"title":{},"body":{"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"interfaces/PostCountResult.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"overview.html":{},"interfaces/verificationTokenPayload.html":{}}}],["internalservererrorexception",{"_index":1792,"title":{},"body":{"injectables/StripeService.html":{},"injectables/UserService.html":{}}}],["invalidrequest",{"_index":2307,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["invoice_settings",{"_index":1815,"title":{},"body":{"injectables/StripeService.html":{}}}],["iscodevalid",{"_index":1911,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["iscompleted",{"_index":1272,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["iscreatinglogs",{"_index":1232,"title":{},"body":{"injectables/LogsService.html":{}}}],["isdatestring",{"_index":896,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["isemail",{"_index":898,"title":{},"body":{"classes/EmailScheduleDto.html":{},"classes/RegisterDto.html":{}}}],["isemailconfirmed",{"_index":1948,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["isnotempty",{"_index":20,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/EmailScheduleDto.html":{},"classes/RegisterDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/createPostDto.html":{},"classes/updatePostDto.html":{}}}],["isnumber",{"_index":629,"title":{},"body":{"classes/CreateChargeDto.html":{},"classes/ObjectWithDto.html":{},"classes/PaginationParams.html":{},"classes/UpdateCategoryDto.html":{},"classes/updatePostDto.html":{}}}],["isnumber()@isoptional",{"_index":1941,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/updatePostDto.html":{}}}],["isnumberstring",{"_index":1023,"title":{},"body":{"classes/FindOneParams.html":{}}}],["isoptional",{"_index":1298,"title":{},"body":{"classes/PaginationParams.html":{},"classes/UpdateCategoryDto.html":{},"classes/updatePostDto.html":{}}}],["isoptional()@type(undefined)@isnumber()@min(0",{"_index":1294,"title":{},"body":{"classes/PaginationParams.html":{}}}],["isoptional()@type(undefined)@isnumber()@min(1",{"_index":1292,"title":{},"body":{"classes/PaginationParams.html":{}}}],["ispasswordmatching",{"_index":418,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["isphonenumberconfirmed",{"_index":1949,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["isproduction",{"_index":2318,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isrefreshtokenmatching",{"_index":2109,"title":{},"body":{"injectables/UserService.html":{}}}],["isregisterwithgoogle",{"_index":1950,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["issecondfactorauthenticated",{"_index":370,"title":{},"body":{"injectables/AuthenticationServices.html":{},"interfaces/TokenPayload.html":{}}}],["isstring",{"_index":19,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/EmailScheduleDto.html":{},"classes/RegisterDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/createPostDto.html":{},"classes/updatePostDto.html":{}}}],["isstring()@isnotempty",{"_index":15,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/EmailScheduleDto.html":{},"classes/RegisterDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/createPostDto.html":{}}}],["isstring()@isnotempty()@isoptional",{"_index":1943,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/updatePostDto.html":{}}}],["isstring()@isnotempty()@matches(/^\\+[1",{"_index":1662,"title":{},"body":{"classes/RegisterDto.html":{}}}],["isstring()@isnotempty()@minlength(7",{"_index":1660,"title":{},"body":{"classes/RegisterDto.html":{}}}],["isstring({each",{"_index":2235,"title":{},"body":{"classes/createPostDto.html":{},"classes/updatePostDto.html":{}}}],["istwofactorauthenticationcodevalid",{"_index":1919,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["istwofactorauthenticationcodevalid(twofactorauthenticationcode",{"_index":1924,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["istwofactorauthenticationenabled",{"_index":1951,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["item._source",{"_index":1389,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["items",{"_index":1518,"title":{},"body":{"injectables/PostsService.html":{},"injectables/StripeService.html":{}}}],["job",{"_index":918,"title":{},"body":{"injectables/EmailSchedulingService.html":{},"classes/ImageProcessor.html":{},"controllers/OptimizeController.html":{}}}],["job.data.files",{"_index":1127,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["job.id",{"_index":1267,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["job.iscompleted",{"_index":1273,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["job.start",{"_index":925,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["jobid",{"_index":1266,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["john",{"_index":2452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number().required",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["join",{"_index":1281,"title":{},"body":{"modules/OptimizeModule.html":{},"index.html":{}}}],["join(__dirname",{"_index":1285,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["joincolumn",{"_index":1980,"title":{},"body":{"entities/User.html":{}}}],["joincolumn()@onetoone(undefined",{"_index":1957,"title":{},"body":{"entities/User.html":{}}}],["jointable",{"_index":1315,"title":{},"body":{"entities/Post.html":{}}}],["json.stringify(parameters",{"_index":768,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["jsonb",{"_index":1594,"title":{},"body":{"entities/Product.html":{}}}],["jwt",{"_index":243,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/TwoFactorAuthenticationController.html":{},"dependencies.html":{},"injectables/jwtStrategy.html":{}}}],["jwt.strategy",{"_index":341,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwt_expiration_time",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthenticationServices.html":{},"miscellaneous/variables.html":{}}}],["jwt_refresh_token_expiration_time",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthenticationServices.html":{}}}],["jwt_refresh_token_secret",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt_secret",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt_verification_token_expiration_time",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailConfirmationService.html":{}}}],["jwt_verification_token_secret",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtauthenticationguard",{"_index":242,"title":{"injectables/JwtAuthenticationGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailModuleController.html":{},"injectables/JwtAuthenticationGuard.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":1162,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/jwtStrategy.html":{}}}],["jwtmodule",{"_index":339,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/EmailConfirmationModule.html":{}}}],["jwtmodule.register",{"_index":827,"title":{},"body":{"modules/EmailConfirmationModule.html":{}}}],["jwtmodule.registerasync",{"_index":348,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtrefreshguard",{"_index":245,"title":{"injectables/JwtRefreshGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["jwtrefreshtokenstrategy",{"_index":327,"title":{"injectables/JwtRefreshTokenStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtservice",{"_index":362,"title":{},"body":{"injectables/AuthenticationServices.html":{},"injectables/EmailConfirmationService.html":{}}}],["jwtstrategy",{"_index":331,"title":{"injectables/jwtStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"coverage.html":{},"injectables/jwtStrategy.html":{},"overview.html":{}}}],["jwttwofactorguard",{"_index":1170,"title":{"injectables/JwtTwoFactorGuard.html":{}},"body":{"injectables/JwtTwoFactorGuard.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["jwttwofactorstrategy",{"_index":328,"title":{"injectables/JwtTwoFactorStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtTwoFactorStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":2366,"title":{},"body":{"index.html":{}}}],["key",{"_index":1010,"title":{},"body":{"injectables/FileService.html":{},"injectables/PostSearchService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"entities/PublicFile.html":{},"miscellaneous/variables.html":{}}}],["key.startswith(get_posts_cache_key",{"_index":1512,"title":{},"body":{"injectables/PostsService.html":{}}}],["keys",{"_index":1509,"title":{},"body":{"injectables/PostsService.html":{}}}],["keys.foreach((key",{"_index":1511,"title":{},"body":{"injectables/PostsService.html":{}}}],["kh",{"_index":286,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["khi",{"_index":1988,"title":{},"body":{"entities/User.html":{}}}],["khoản",{"_index":277,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["không",{"_index":258,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/PostsController.html":{}}}],["khẩu",{"_index":279,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["khỏi",{"_index":1986,"title":{},"body":{"entities/User.html":{}}}],["level",{"_index":635,"title":{},"body":{"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"entities/Log.html":{}}}],["license",{"_index":2372,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":2351,"title":{},"body":{"index.html":{}}}],["limit",{"_index":1289,"title":{},"body":{"classes/PaginationParams.html":{},"injectables/PostSearchService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["link",{"_index":816,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["link')@useguards(jwtauthenticationguard",{"_index":807,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["list",{"_index":2161,"title":{},"body":{"injectables/categoriesService.html":{}}}],["listcreditcards",{"_index":1769,"title":{},"body":{"injectables/StripeService.html":{}}}],["listcreditcards(customerid",{"_index":1786,"title":{},"body":{"injectables/StripeService.html":{}}}],["listenformessages",{"_index":551,"title":{},"body":{"classes/ChatGateway.html":{}}}],["listenformessages(content",{"_index":560,"title":{},"body":{"classes/ChatGateway.html":{}}}],["listsubscriptions",{"_index":1770,"title":{},"body":{"injectables/StripeService.html":{}}}],["listsubscriptions(priceid",{"_index":1788,"title":{},"body":{"injectables/StripeService.html":{}}}],["literal",{"_index":443,"title":{},"body":{"interfaces/BookProperties.html":{},"interfaces/PostSearchResult.html":{}}}],["liệu",{"_index":2089,"title":{},"body":{"injectables/UserService.html":{}}}],["local",{"_index":1181,"title":{},"body":{"injectables/LocalAuthentication.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":337,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["localauthentication",{"_index":247,"title":{"injectables/LocalAuthentication.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/LocalAuthentication.html":{},"coverage.html":{}}}],["localauthentication.guard",{"_index":248,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["locale",{"_index":1742,"title":{},"body":{"injectables/SmsService.html":{}}}],["localstategy",{"_index":274,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["localstrategy",{"_index":329,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log",{"_index":692,"title":{"entities/Log.html":{}},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"entities/Log.html":{},"modules/LoggerModule.html":{},"injectables/LogsService.html":{},"coverage.html":{}}}],["log(level",{"_index":741,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["log(message",{"_index":705,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["log.entity",{"_index":1201,"title":{},"body":{"modules/LoggerModule.html":{},"injectables/LogsService.html":{}}}],["logger",{"_index":732,"title":{},"body":{"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/PostsService.html":{}}}],["logger('http",{"_index":1208,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["logger(postsservice.name",{"_index":1502,"title":{},"body":{"injectables/PostsService.html":{}}}],["logger.service",{"_index":712,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger/logger.module",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermodule",{"_index":81,"title":{"modules/LoggerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LoggerModule.html":{},"modules.html":{},"overview.html":{}}}],["login",{"_index":202,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(@req",{"_index":282,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(request",{"_index":206,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["loglevel",{"_index":2319,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loglevels",{"_index":719,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logmigration",{"_index":733,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logmigration(message",{"_index":744,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logout",{"_index":203,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(@req",{"_index":314,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(request",{"_index":212,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logquery",{"_index":734,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logquery(query",{"_index":746,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logqueryerror",{"_index":735,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logqueryerror(error",{"_index":749,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logqueryslow",{"_index":736,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logqueryslow(time",{"_index":751,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logrepository",{"_index":1223,"title":{},"body":{"injectables/LogsService.html":{}}}],["logs.service",{"_index":715,"title":{},"body":{"injectables/CustomLogger.html":{},"modules/LoggerModule.html":{}}}],["logschemabuild",{"_index":737,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logschemabuild(message",{"_index":754,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logsmiddleware",{"_index":138,"title":{"injectables/LogsMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LogsMiddleware.html":{},"coverage.html":{}}}],["logsservice",{"_index":690,"title":{"injectables/LogsService.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LoggerModule.html":{},"injectables/LogsService.html":{},"coverage.html":{},"overview.html":{}}}],["loại",{"_index":1983,"title":{},"body":{"entities/User.html":{}}}],["lại",{"_index":1375,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["mail",{"_index":935,"title":{},"body":{"injectables/EmailService.html":{}}}],["mail.options",{"_index":932,"title":{},"body":{"injectables/EmailService.html":{}}}],["manager",{"_index":1472,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{},"dependencies.html":{}}}],["manytomany",{"_index":519,"title":{},"body":{"entities/Category.html":{},"entities/Post.html":{}}}],["manytomany(undefined",{"_index":513,"title":{},"body":{"entities/Category.html":{},"entities/Post.html":{}}}],["manytoone",{"_index":1238,"title":{},"body":{"entities/Message.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{}}}],["manytoone(undefined",{"_index":1234,"title":{},"body":{"entities/Message.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{}}}],["map",{"_index":969,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["markemailasconfirmed",{"_index":2018,"title":{},"body":{"injectables/UserService.html":{}}}],["markemailasconfirmed(email",{"_index":2050,"title":{},"body":{"injectables/UserService.html":{}}}],["markphonenumberasconfirmed",{"_index":2019,"title":{},"body":{"injectables/UserService.html":{}}}],["markphonenumberasconfirmed(userid",{"_index":2052,"title":{},"body":{"injectables/UserService.html":{}}}],["match",{"_index":1394,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["matches",{"_index":1666,"title":{},"body":{"classes/RegisterDto.html":{}}}],["matches(/^\\+[1",{"_index":1668,"title":{},"body":{"classes/RegisterDto.html":{}}}],["matching",{"_index":25,"title":{},"body":{"classes/AddCreditCardDto.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationServices.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"classes/CategoriesNotFoundException.html":{},"entities/Category.html":{},"modules/CategoryModule.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"controllers/EmailModuleController.html":{},"classes/EmailScheduleDto.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"classes/FindOneParams.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/ImageProcessor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthentication.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"entities/Message.html":{},"classes/ObjectWithDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"interfaces/PostCountResult.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"injectables/PostSearchService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"modules/PrivateFilesModule.html":{},"entities/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"entities/ProductCategory.html":{},"injectables/ProductService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"entities/StripeEvent.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/categoriesService.html":{},"coverage.html":{},"classes/createPostDto.html":{},"dependencies.html":{},"guards/emailConfirmationGuard.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"injectables/jwtStrategy.html":{},"modules.html":{},"overview.html":{},"injectables/productCategoriesService.html":{},"properties.html":{},"injectables/stripeWebhookService.html":{},"injectables/subscriptionsService.html":{},"classes/updatePostDto.html":{},"miscellaneous/variables.html":{},"interfaces/verificationTokenPayload.html":{}}}],["max",{"_index":429,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["message",{"_index":576,"title":{"entities/Message.html":{}},"body":{"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"entities/Log.html":{},"injectables/LogsMiddleware.html":{},"entities/Message.html":{},"injectables/SmsService.html":{},"coverage.html":{}}}],["message.entity",{"_index":588,"title":{},"body":{"modules/ChatModule.html":{},"injectables/ChatService.html":{}}}],["messagebody",{"_index":568,"title":{},"body":{"classes/ChatGateway.html":{}}}],["messages",{"_index":580,"title":{},"body":{"classes/ChatGateway.html":{}}}],["messagesrepository",{"_index":595,"title":{},"body":{"injectables/ChatService.html":{}}}],["metadata",{"_index":2283,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":1212,"title":{},"body":{"injectables/LogsMiddleware.html":{},"injectables/categoriesService.html":{}}}],["methods",{"_index":54,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationServices.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailModuleController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FileService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/ImageProcessor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"injectables/PostSearchService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductService.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/categoriesService.html":{},"guards/emailConfirmationGuard.html":{},"injectables/jwtStrategy.html":{},"injectables/productCategoriesService.html":{},"injectables/stripeWebhookService.html":{},"injectables/subscriptionsService.html":{}}}],["middlewareconsumer",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["min",{"_index":1297,"title":{},"body":{"classes/PaginationParams.html":{}}}],["min(0",{"_index":1300,"title":{},"body":{"classes/PaginationParams.html":{}}}],["min(1",{"_index":1299,"title":{},"body":{"classes/PaginationParams.html":{}}}],["minlength",{"_index":1665,"title":{},"body":{"classes/RegisterDto.html":{}}}],["minlength(7",{"_index":1667,"title":{},"body":{"classes/RegisterDto.html":{}}}],["miscellaneous",{"_index":2299,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":2350,"title":{},"body":{"index.html":{},"properties.html":{}}}],["mockedjwtservice",{"_index":2227,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockeduser",{"_index":2202,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockerconfigservice",{"_index":2225,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":2341,"title":{},"body":{"index.html":{}}}],["module",{"_index":65,"title":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoryModule.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"modules/CreditCardsModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FileModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/LoggerModule.html":{},"modules/OptimizeModule.html":{},"modules/PostsModule.html":{},"modules/PrivateFilesModule.html":{},"modules/ProductCategoriesModule.html":{},"modules/ProductsModule.html":{},"modules/SearchModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscriptionsModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoryModule.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"modules/CreditCardsModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FileModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/LoggerModule.html":{},"modules/OptimizeModule.html":{},"modules/PostsModule.html":{},"modules/PrivateFilesModule.html":{},"modules/ProductCategoriesModule.html":{},"modules/ProductsModule.html":{},"modules/SearchModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscriptionsModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":67,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoryModule.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"modules/CreditCardsModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FileModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/LoggerModule.html":{},"modules/OptimizeModule.html":{},"modules/PostsModule.html":{},"modules/PrivateFilesModule.html":{},"modules/ProductCategoriesModule.html":{},"modules/ProductsModule.html":{},"modules/SearchModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscriptionsModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["monthly_subscription_price_id",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["monthlysubscriptionstatus",{"_index":1952,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["more",{"_index":2363,"title":{},"body":{"index.html":{}}}],["morethan",{"_index":1505,"title":{},"body":{"injectables/PostsService.html":{}}}],["morethan(startid",{"_index":1516,"title":{},"body":{"injectables/PostsService.html":{}}}],["multi_match",{"_index":1366,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["myśliwiec",{"_index":2367,"title":{},"body":{"index.html":{}}}],["mất",{"_index":285,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["mật",{"_index":278,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["name",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationServices.html":{},"controllers/CategoriesController.html":{},"classes/CategoriesNotFoundException.html":{},"entities/Category.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailModuleController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FileService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/ImageProcessor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PostNotFoundException.html":{},"injectables/PostSearchService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"entities/Product.html":{},"controllers/ProductCategoriesController.html":{},"entities/ProductCategory.html":{},"injectables/ProductService.html":{},"controllers/ProductsController.html":{},"classes/RegisterDto.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/categoriesService.html":{},"guards/emailConfirmationGuard.html":{},"miscellaneous/functions.html":{},"injectables/jwtStrategy.html":{},"injectables/productCategoriesService.html":{},"injectables/stripeWebhookService.html":{},"injectables/subscriptionsService.html":{},"miscellaneous/variables.html":{}}}],["nest",{"_index":290,"title":{},"body":{"controllers/AuthenticationController.html":{},"index.html":{},"properties.html":{}}}],["nestframework",{"_index":2371,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":967,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["nestjs/bull",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"classes/ImageProcessor.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":58,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationServices.html":{},"controllers/CategoriesController.html":{},"classes/CategoriesNotFoundException.html":{},"modules/CategoryModule.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"controllers/EmailModuleController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthentication.html":{},"injectables/LocalStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PostNotFoundException.html":{},"injectables/PostSearchService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"modules/PrivateFilesModule.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"modules/SearchModule.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/categoriesService.html":{},"dependencies.html":{},"guards/emailConfirmationGuard.html":{},"injectables/jwtStrategy.html":{},"injectables/productCategoriesService.html":{},"injectables/stripeWebhookService.html":{},"injectables/subscriptionsService.html":{}}}],["nestjs/common/services/console",{"_index":711,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["nestjs/config",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationServices.html":{},"injectables/CustomLogger.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"injectables/PrivateFileService.html":{},"modules/PrivateFilesModule.html":{},"modules/SearchModule.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/SubscriptionsModule.html":{},"injectables/TwoFactorAuthenticationService.html":{},"dependencies.html":{},"injectables/jwtStrategy.html":{},"injectables/subscriptionsService.html":{}}}],["nestjs/core",{"_index":954,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{},"dependencies.html":{}}}],["nestjs/elasticsearch",{"_index":1354,"title":{},"body":{"injectables/PostSearchService.html":{},"modules/SearchModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":340,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationServices.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":336,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthentication.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{},"injectables/jwtStrategy.html":{}}}],["nestjs/platform",{"_index":1254,"title":{},"body":{"controllers/OptimizeController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/schedule",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailSchedulingService.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":479,"title":{},"body":{"controllers/CategoriesController.html":{},"modules/CategoryModule.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"modules/DatabaseModule.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"modules/LoggerModule.html":{},"injectables/LogsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"modules/PrivateFilesModule.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductService.html":{},"modules/ProductsModule.html":{},"modules/StripeWebhookModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/categoriesService.html":{},"dependencies.html":{},"injectables/productCategoriesService.html":{},"injectables/stripeWebhookService.html":{}}}],["nestjs/websockets",{"_index":571,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"dependencies.html":{}}}],["nestlogger",{"_index":758,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["nestlogger('sql",{"_index":739,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["nestmiddleware",{"_index":1210,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["new",{"_index":403,"title":{},"body":{"injectables/AuthenticationServices.html":{},"injectables/ChatService.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/FileService.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/ImageProcessor.html":{},"injectables/LogsMiddleware.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/UserService.html":{},"injectables/categoriesService.html":{},"coverage.html":{},"guards/emailConfirmationGuard.html":{},"injectables/stripeWebhookService.html":{},"injectables/subscriptionsService.html":{}}}],["newbody",{"_index":1395,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["newcategory",{"_index":2182,"title":{},"body":{"injectables/categoriesService.html":{}}}],["newfile",{"_index":1011,"title":{},"body":{"injectables/FileService.html":{},"injectables/PrivateFileService.html":{}}}],["newlog",{"_index":1228,"title":{},"body":{"injectables/LogsService.html":{}}}],["newmessage",{"_index":613,"title":{},"body":{"injectables/ChatService.html":{}}}],["newpost",{"_index":1397,"title":{},"body":{"injectables/PostSearchService.html":{},"injectables/PostsService.html":{}}}],["newproduct",{"_index":1637,"title":{},"body":{"injectables/ProductService.html":{}}}],["newproductcategory",{"_index":2400,"title":{},"body":{"injectables/productCategoriesService.html":{}}}],["newuser",{"_index":2074,"title":{},"body":{"injectables/UserService.html":{}}}],["next",{"_index":962,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"injectables/LogsMiddleware.html":{}}}],["nextfunction",{"_index":1206,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["ng",{"_index":280,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/PostsController.html":{}}}],["người",{"_index":1996,"title":{},"body":{"entities/User.html":{}}}],["nh",{"_index":291,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["những",{"_index":252,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/PostsController.html":{}}}],["node",{"_index":1676,"title":{},"body":{"modules/SearchModule.html":{}}}],["node.js",{"_index":2324,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":937,"title":{},"body":{"injectables/EmailService.html":{},"dependencies.html":{}}}],["nodemailer/lib/mailer",{"_index":938,"title":{},"body":{"injectables/EmailService.html":{}}}],["nodemailertransport",{"_index":927,"title":{},"body":{"injectables/EmailService.html":{}}}],["notfoundexception",{"_index":499,"title":{},"body":{"classes/CategoriesNotFoundException.html":{},"classes/PostNotFoundException.html":{},"injectables/PrivateFileService.html":{},"injectables/subscriptionsService.html":{}}}],["notfoundexception('customer",{"_index":2438,"title":{},"body":{"injectables/subscriptionsService.html":{}}}],["npm",{"_index":2334,"title":{},"body":{"index.html":{}}}],["null",{"_index":1447,"title":{},"body":{"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["nullable",{"_index":1316,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{}}}],["number",{"_index":40,"title":{},"body":{"entities/Address.html":{},"injectables/AuthenticationServices.html":{},"interfaces/BookProperties.html":{},"classes/CategoriesNotFoundException.html":{},"entities/Category.html":{},"classes/CreateChargeDto.html":{},"classes/DatabaseLogger.html":{},"injectables/EmailConfirmationService.html":{},"injectables/FileService.html":{},"entities/Log.html":{},"entities/Message.html":{},"classes/ObjectWithDto.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"interfaces/PostCountResult.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"injectables/PostSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"entities/Product.html":{},"entities/ProductCategory.html":{},"entities/PublicFile.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateCategoryDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"injectables/categoriesService.html":{},"classes/updatePostDto.html":{}}}],["number(configservice.get('redis_port",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["number(id",{"_index":2145,"title":{},"body":{"controllers/UsersController.html":{}}}],["numberofcylinders",{"_index":445,"title":{},"body":{"interfaces/BookProperties.html":{}}}],["năng",{"_index":287,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["nếu",{"_index":275,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["oauthclient",{"_index":1045,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["object",{"_index":865,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"miscellaneous/variables.html":{}}}],["object.entries(newbody).reduce((result",{"_index":1399,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["objectwithdto",{"_index":644,"title":{"classes/ObjectWithDto.html":{}},"body":{"classes/CreateProductDto.html":{},"classes/ObjectWithDto.html":{},"coverage.html":{}}}],["observable",{"_index":965,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"guards/emailConfirmationGuard.html":{}}}],["off_session",{"_index":1807,"title":{},"body":{"injectables/StripeService.html":{}}}],["offset",{"_index":1290,"title":{},"body":{"classes/PaginationParams.html":{},"injectables/PostSearchService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["on')@httpcode(200)@useguards(jwtauthenticationguard",{"_index":1901,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["ondelete",{"_index":515,"title":{},"body":{"entities/Category.html":{}}}],["onetomany",{"_index":1624,"title":{},"body":{"entities/ProductCategory.html":{},"entities/User.html":{}}}],["onetomany(undefined",{"_index":1621,"title":{},"body":{"entities/ProductCategory.html":{},"entities/User.html":{}}}],["onetoone",{"_index":47,"title":{},"body":{"entities/Address.html":{},"entities/User.html":{}}}],["onetoone(undefined",{"_index":44,"title":{},"body":{"entities/Address.html":{},"entities/User.html":{}}}],["open",{"_index":2352,"title":{},"body":{"index.html":{}}}],["optimizationpromise",{"_index":1128,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["optimize",{"_index":1243,"title":{},"body":{"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{}}}],["optimize.controller",{"_index":1280,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["optimize/optimize.module",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["optimizecontroller",{"_index":1241,"title":{"controllers/OptimizeController.html":{}},"body":{"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"coverage.html":{}}}],["optimizeimages",{"_index":1137,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["optimizeimages.foreach((image",{"_index":1139,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["optimizemodule",{"_index":82,"title":{"modules/OptimizeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OptimizeModule.html":{},"modules.html":{},"overview.html":{}}}],["option",{"_index":934,"title":{},"body":{"injectables/EmailService.html":{}}}],["optional",{"_index":35,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationServices.html":{},"controllers/CategoriesController.html":{},"classes/CategoriesNotFoundException.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailModuleController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FileService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/ImageProcessor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"classes/PaginationParams.html":{},"classes/PostNotFoundException.html":{},"injectables/PostSearchService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductService.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscriptionsController.html":{},"interfaces/TokenPayload.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/categoriesService.html":{},"guards/emailConfirmationGuard.html":{},"miscellaneous/functions.html":{},"injectables/jwtStrategy.html":{},"injectables/productCategoriesService.html":{},"injectables/stripeWebhookService.html":{},"injectables/subscriptionsService.html":{}}}],["options",{"_index":696,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/PostsService.html":{}}}],["order",{"_index":1384,"title":{},"body":{"injectables/PostSearchService.html":{},"injectables/PostsService.html":{}}}],["originalurl",{"_index":1213,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["otpauthurl",{"_index":1908,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["otplib",{"_index":1929,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{},"dependencies.html":{}}}],["out",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"modules/CategoryModule.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"modules/CreditCardsModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FileModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/PrivateFilesModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscriptionsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["out')@useguards(jwtauthenticationguard",{"_index":214,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["overview",{"_index":2382,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":1549,"title":{},"body":{"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{}}}],["owner.files",{"_index":1552,"title":{},"body":{"entities/PrivateFile.html":{}}}],["ownerid",{"_index":1568,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["package",{"_index":2240,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["paginationparams",{"_index":1287,"title":{"classes/PaginationParams.html":{}},"body":{"classes/PaginationParams.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["paragraphs",{"_index":1302,"title":{},"body":{"entities/Post.html":{},"interfaces/PostSearchBody.html":{},"injectables/PostSearchService.html":{},"classes/createPostDto.html":{},"classes/updatePostDto.html":{}}}],["param",{"_index":476,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/categoriesService.html":{}}}],["param('id",{"_index":1269,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["parameters",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationServices.html":{},"controllers/CategoriesController.html":{},"classes/CategoriesNotFoundException.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailModuleController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FileService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/ImageProcessor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"classes/PostNotFoundException.html":{},"injectables/PostSearchService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductService.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/categoriesService.html":{},"guards/emailConfirmationGuard.html":{},"miscellaneous/functions.html":{},"injectables/jwtStrategy.html":{},"injectables/productCategoriesService.html":{},"injectables/stripeWebhookService.html":{},"injectables/subscriptionsService.html":{}}}],["parse",{"_index":604,"title":{},"body":{"injectables/ChatService.html":{}}}],["parse(cookie",{"_index":610,"title":{},"body":{"injectables/ChatService.html":{}}}],["parser",{"_index":2269,"title":{},"body":{"dependencies.html":{}}}],["pass",{"_index":944,"title":{},"body":{"injectables/EmailService.html":{}}}],["passport",{"_index":1159,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{},"injectables/jwtStrategy.html":{}}}],["passportmodule",{"_index":335,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["passportstrategy",{"_index":1160,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/jwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1186,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/jwtStrategy.html":{}}}],["passreqtocallback",{"_index":1167,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["password",{"_index":396,"title":{},"body":{"injectables/AuthenticationServices.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/LocalStrategy.html":{},"classes/RegisterDto.html":{},"modules/SearchModule.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":477,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{}}}],["patch(':id",{"_index":473,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{}}}],["path",{"_index":428,"title":{},"body":{"injectables/AuthenticationServices.html":{},"modules/OptimizeModule.html":{}}}],["path=/;max",{"_index":426,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["payload",{"_index":420,"title":{},"body":{"injectables/AuthenticationServices.html":{},"injectables/EmailConfirmationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/StripeService.html":{},"injectables/jwtStrategy.html":{}}}],["payload.email",{"_index":866,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["payload.issecondfactorauthenticated",{"_index":1178,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["payload.userid",{"_index":435,"title":{},"body":{"injectables/AuthenticationServices.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["payment_method",{"_index":1804,"title":{},"body":{"injectables/StripeService.html":{}}}],["paymentmethodid",{"_index":10,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/CreateChargeDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"injectables/StripeService.html":{}}}],["pg",{"_index":2279,"title":{},"body":{"dependencies.html":{}}}],["phonenumber",{"_index":1657,"title":{},"body":{"classes/RegisterDto.html":{},"injectables/SmsService.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["phản",{"_index":1442,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{}}}],["pipe(map((value",{"_index":973,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["pipeqrcodestream",{"_index":1920,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["pipeqrcodestream(stream",{"_index":1926,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["plaintextpassword",{"_index":365,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["please",{"_index":2361,"title":{},"body":{"index.html":{}}}],["plugins",{"_index":1133,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["pngquant",{"_index":1123,"title":{},"body":{"classes/ImageProcessor.html":{},"dependencies.html":{}}}],["port",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/PostsModule.html":{}}}],["posgreserrorcode",{"_index":388,"title":{},"body":{"injectables/AuthenticationServices.html":{},"miscellaneous/enumerations.html":{},"injectables/stripeWebhookService.html":{}}}],["posgreserrorcode.uniqueviolation",{"_index":401,"title":{},"body":{"injectables/AuthenticationServices.html":{},"injectables/stripeWebhookService.html":{}}}],["post",{"_index":226,"title":{"entities/Post.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"entities/Category.html":{},"controllers/ChargeController.html":{},"controllers/CreditCardsController.html":{},"modules/DatabaseModule.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailModuleController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/OptimizeController.html":{},"entities/Post.html":{},"injectables/PostSearchService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["post('authenticate",{"_index":1915,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post('authenticate')@httpcode(200)@useguards(jwtauthenticationguard",{"_index":1894,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post('avatar",{"_index":2133,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('avatar')@useguards(jwtauthenticationguard)@useinterceptors(undefined",{"_index":2115,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('check",{"_index":1689,"title":{},"body":{"controllers/SmsController.html":{}}}],["post('confirm",{"_index":802,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["post('default",{"_index":681,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["post('default')@httpcode(200)@useguards(jwtauthenticationguard",{"_index":669,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["post('delete/avatar",{"_index":2138,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('delete/avatar')@useguards(jwtauthenticationguard",{"_index":2121,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('files",{"_index":2141,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('files')@useguards(jwtauthenticationguard)@useinterceptors(undefined",{"_index":2118,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('generate",{"_index":1906,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post('generate')@useguards(jwtauthenticationguard",{"_index":1897,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post('image",{"_index":1262,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["post('image')@useinterceptors(undefined",{"_index":1250,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["post('initiate",{"_index":1694,"title":{},"body":{"controllers/SmsController.html":{}}}],["post('log",{"_index":213,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('monthly",{"_index":1872,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["post('monthly')@useguards(jwtauthenticationguard",{"_index":1864,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["post('register",{"_index":221,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('resend",{"_index":806,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["post('schedule",{"_index":890,"title":{},"body":{"controllers/EmailModuleController.html":{}}}],["post('schedule')@useguards(jwtauthenticationguard",{"_index":884,"title":{},"body":{"controllers/EmailModuleController.html":{}}}],["post('turn",{"_index":1900,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post()@useguards(jwtauthenticationguard",{"_index":460,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CreditCardsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{}}}],["post()@useguards(jwttwofactorguard",{"_index":1414,"title":{},"body":{"controllers/PostsController.html":{}}}],["post.author",{"_index":1976,"title":{},"body":{"entities/User.html":{}}}],["post.author.id",{"_index":1364,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["post.categories",{"_index":514,"title":{},"body":{"entities/Category.html":{}}}],["post.entity",{"_index":1355,"title":{},"body":{"injectables/PostSearchService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["post.id",{"_index":1361,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["post.interface",{"_index":1504,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.paragraphs",{"_index":1363,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["post.title",{"_index":1362,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["postcountresult",{"_index":1318,"title":{"interfaces/PostCountResult.html":{}},"body":{"interfaces/PostCountResult.html":{},"injectables/PostSearchService.html":{},"coverage.html":{}}}],["postentity",{"_index":1468,"title":{},"body":{"modules/PostsModule.html":{}}}],["postgres",{"_index":786,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["postgres_db",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_host",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_password",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_port",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_user",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["postid",{"_index":1325,"title":{},"body":{"classes/PostNotFoundException.html":{},"injectables/PostSearchService.html":{}}}],["postnotfoundexception",{"_index":1321,"title":{"classes/PostNotFoundException.html":{}},"body":{"classes/PostNotFoundException.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["postnotfoundexception(id",{"_index":1531,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts",{"_index":507,"title":{},"body":{"entities/Category.html":{},"injectables/PostSearchService.html":{},"controllers/PostsController.html":{},"entities/User.html":{},"injectables/categoriesService.html":{}}}],["posts.controller",{"_index":1467,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.service",{"_index":1429,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["posts/post.entity",{"_index":518,"title":{},"body":{"entities/Category.html":{},"modules/DatabaseModule.html":{},"entities/User.html":{}}}],["posts/posts.module",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["postscachekey.constant",{"_index":1436,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["postscontroller",{"_index":1405,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsearchbody",{"_index":1326,"title":{"interfaces/PostSearchBody.html":{}},"body":{"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"injectables/PostSearchService.html":{},"coverage.html":{}}}],["postsearchresult",{"_index":1329,"title":{"interfaces/PostSearchResult.html":{}},"body":{"interfaces/PostSearchResult.html":{},"injectables/PostSearchService.html":{},"coverage.html":{}}}],["postsearchservice",{"_index":1334,"title":{"injectables/PostSearchService.html":{}},"body":{"injectables/PostSearchService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["postsmodule",{"_index":83,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsrepository",{"_index":1487,"title":{},"body":{"injectables/PostsService.html":{}}}],["postssearch.service",{"_index":1469,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["postssearchbody.interface",{"_index":1332,"title":{},"body":{"interfaces/PostSearchResult.html":{}}}],["postssearchservice",{"_index":1484,"title":{},"body":{"injectables/PostsService.html":{}}}],["postsservice",{"_index":1428,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["postupdate",{"_index":1402,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["prefix",{"_index":200,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailModuleController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["price",{"_index":1821,"title":{},"body":{"injectables/StripeService.html":{}}}],["priceid",{"_index":1785,"title":{},"body":{"injectables/StripeService.html":{},"injectables/subscriptionsService.html":{}}}],["primarycolumn",{"_index":1756,"title":{},"body":{"entities/StripeEvent.html":{}}}],["primarygeneratedcolumn",{"_index":41,"title":{},"body":{"entities/Address.html":{},"entities/Category.html":{},"entities/Log.html":{},"entities/Message.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/ProductCategory.html":{},"entities/PublicFile.html":{},"entities/User.html":{}}}],["private",{"_index":262,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationServices.html":{},"injectables/ChatService.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailModuleController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"injectables/ProductService.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UserService.html":{},"injectables/categoriesService.html":{},"injectables/jwtStrategy.html":{},"injectables/productCategoriesService.html":{},"injectables/stripeWebhookService.html":{},"injectables/subscriptionsService.html":{}}}],["privatefile",{"_index":775,"title":{"entities/PrivateFile.html":{}},"body":{"modules/DatabaseModule.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"modules/PrivateFilesModule.html":{},"entities/User.html":{},"coverage.html":{}}}],["privatefile.entity",{"_index":1570,"title":{},"body":{"injectables/PrivateFileService.html":{},"modules/PrivateFilesModule.html":{}}}],["privatefiles.service",{"_index":1585,"title":{},"body":{"modules/PrivateFilesModule.html":{}}}],["privatefiles/privatefile.entity",{"_index":776,"title":{},"body":{"modules/DatabaseModule.html":{},"entities/User.html":{}}}],["privatefiles/privatefiles.module",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["privatefiles/privatefiles.service",{"_index":2066,"title":{},"body":{"injectables/UserService.html":{}}}],["privatefileservice",{"_index":1554,"title":{"injectables/PrivateFileService.html":{}},"body":{"injectables/PrivateFileService.html":{},"modules/PrivateFilesModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["privatefilesmodule",{"_index":84,"title":{"modules/PrivateFilesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PrivateFilesModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["privatefilesrepository",{"_index":1562,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["privatefilesservice",{"_index":2025,"title":{},"body":{"injectables/UserService.html":{}}}],["process",{"_index":1115,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["process('optimize",{"_index":1113,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["processed",{"_index":2419,"title":{},"body":{"injectables/stripeWebhookService.html":{}}}],["processimage",{"_index":1245,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["processimage(@uploadedfiles",{"_index":1264,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["processimage(files",{"_index":1249,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["processor",{"_index":1116,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["processor('image",{"_index":1124,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["processors",{"_index":1284,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["processsubscriptionupdate",{"_index":2405,"title":{},"body":{"injectables/stripeWebhookService.html":{}}}],["processsubscriptionupdate(event",{"_index":2411,"title":{},"body":{"injectables/stripeWebhookService.html":{}}}],["product",{"_index":777,"title":{"entities/Product.html":{}},"body":{"modules/DatabaseModule.html":{},"entities/Product.html":{},"controllers/ProductCategoriesController.html":{},"entities/ProductCategory.html":{},"injectables/ProductService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["product.category",{"_index":1622,"title":{},"body":{"entities/ProductCategory.html":{}}}],["product.entity",{"_index":1633,"title":{},"body":{"injectables/ProductService.html":{},"modules/ProductsModule.html":{}}}],["productcategories.controller",{"_index":1615,"title":{},"body":{"modules/ProductCategoriesModule.html":{}}}],["productcategories.entity",{"_index":1614,"title":{},"body":{"modules/ProductCategoriesModule.html":{},"injectables/productCategoriesService.html":{}}}],["productcategories.service",{"_index":1606,"title":{},"body":{"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{}}}],["productcategories/productcategories.module",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["productcategoriescontroller",{"_index":1598,"title":{"controllers/ProductCategoriesController.html":{}},"body":{"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"coverage.html":{}}}],["productcategoriesmodule",{"_index":85,"title":{"modules/ProductCategoriesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductCategoriesModule.html":{},"modules.html":{},"overview.html":{}}}],["productcategoriesrepository",{"_index":2393,"title":{},"body":{"injectables/productCategoriesService.html":{}}}],["productcategoriesservice",{"_index":1605,"title":{"injectables/productCategoriesService.html":{}},"body":{"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"coverage.html":{},"injectables/productCategoriesService.html":{}}}],["productcategory",{"_index":779,"title":{"entities/ProductCategory.html":{}},"body":{"modules/DatabaseModule.html":{},"entities/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"entities/ProductCategory.html":{},"coverage.html":{},"injectables/productCategoriesService.html":{}}}],["production",{"_index":721,"title":{},"body":{"injectables/CustomLogger.html":{},"index.html":{}}}],["productrepository",{"_index":1629,"title":{},"body":{"injectables/ProductService.html":{}}}],["products",{"_index":1618,"title":{},"body":{"entities/ProductCategory.html":{},"controllers/ProductsController.html":{}}}],["products.controller",{"_index":1650,"title":{},"body":{"modules/ProductsModule.html":{}}}],["products.service",{"_index":1645,"title":{},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{}}}],["products/product.entity",{"_index":1625,"title":{},"body":{"entities/ProductCategory.html":{}}}],["products/products.module",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["productscontroller",{"_index":1640,"title":{"controllers/ProductsController.html":{}},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["productservice",{"_index":1609,"title":{"injectables/ProductService.html":{}},"body":{"controllers/ProductCategoriesController.html":{},"injectables/ProductService.html":{},"coverage.html":{}}}],["productsmodule",{"_index":86,"title":{"modules/ProductsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductsModule.html":{},"modules.html":{},"overview.html":{}}}],["productsservice",{"_index":1644,"title":{},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{}}}],["progressive",{"_index":2323,"title":{},"body":{"index.html":{}}}],["project",{"_index":2353,"title":{},"body":{"index.html":{}}}],["promise",{"_index":966,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"injectables/FileService.html":{},"classes/ImageProcessor.html":{},"injectables/LocalStrategy.html":{},"injectables/PrivateFileService.html":{},"injectables/categoriesService.html":{}}}],["promise.all",{"_index":2103,"title":{},"body":{"injectables/UserService.html":{}}}],["promise.all(optimizationpromise",{"_index":1138,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["properties",{"_index":9,"title":{"properties.html":{}},"body":{"classes/AddCreditCardDto.html":{},"entities/Address.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"entities/Category.html":{},"classes/ChatGateway.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"classes/EmailScheduleDto.html":{},"injectables/EmailService.html":{},"classes/FindOneParams.html":{},"injectables/GoogleAuthenticationService.html":{},"entities/Log.html":{},"injectables/LogsMiddleware.html":{},"entities/Message.html":{},"classes/ObjectWithDto.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"interfaces/PostCountResult.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"injectables/PostSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/Product.html":{},"entities/ProductCategory.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"classes/SetDefaultCreditCardDto.html":{},"injectables/SmsService.html":{},"entities/StripeEvent.html":{},"injectables/StripeService.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"entities/User.html":{},"injectables/categoriesService.html":{},"classes/createPostDto.html":{},"properties.html":{},"classes/updatePostDto.html":{},"interfaces/verificationTokenPayload.html":{}}}],["provided",{"_index":417,"title":{},"body":{"injectables/AuthenticationServices.html":{},"injectables/SmsService.html":{}}}],["providers",{"_index":190,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoryModule.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"modules/CreditCardsModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FileModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/LoggerModule.html":{},"modules/OptimizeModule.html":{},"modules/PostsModule.html":{},"modules/PrivateFilesModule.html":{},"modules/ProductCategoriesModule.html":{},"modules/ProductsModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscriptionsModule.html":{},"modules/UserModule.html":{}}}],["public",{"_index":30,"title":{},"body":{"entities/Address.html":{},"injectables/AuthenticationServices.html":{},"entities/Category.html":{},"injectables/EmailConfirmationService.html":{},"entities/Log.html":{},"entities/Message.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"entities/Product.html":{},"entities/ProductCategory.html":{},"entities/PublicFile.html":{},"entities/StripeEvent.html":{},"injectables/StripeService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"entities/User.html":{},"injectables/subscriptionsService.html":{}}}],["publicactionyear",{"_index":449,"title":{},"body":{"interfaces/CarProperties.html":{}}}],["publicfile",{"_index":773,"title":{"entities/PublicFile.html":{}},"body":{"modules/DatabaseModule.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"entities/PublicFile.html":{},"entities/User.html":{},"coverage.html":{}}}],["publicfile.entity",{"_index":981,"title":{},"body":{"modules/FileModule.html":{},"injectables/FileService.html":{}}}],["publicfilerepository",{"_index":989,"title":{},"body":{"injectables/FileService.html":{}}}],["put",{"_index":1427,"title":{},"body":{"controllers/PostsController.html":{}}}],["qrcode",{"_index":1931,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{},"dependencies.html":{}}}],["qua",{"_index":1995,"title":{},"body":{"entities/User.html":{}}}],["quality",{"_index":1134,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["query",{"_index":748,"title":{},"body":{"classes/DatabaseLogger.html":{},"injectables/PostSearchService.html":{},"controllers/PostsController.html":{}}}],["query('search",{"_index":1448,"title":{},"body":{"controllers/PostsController.html":{}}}],["queryrunner",{"_index":742,"title":{},"body":{"classes/DatabaseLogger.html":{},"injectables/FileService.html":{},"injectables/UserService.html":{}}}],["queryrunner.committransaction",{"_index":2095,"title":{},"body":{"injectables/UserService.html":{}}}],["queryrunner.connect",{"_index":2091,"title":{},"body":{"injectables/UserService.html":{}}}],["queryrunner.manager.delete(publicfile",{"_index":1021,"title":{},"body":{"injectables/FileService.html":{}}}],["queryrunner.manager.findone(publicfile",{"_index":1020,"title":{},"body":{"injectables/FileService.html":{}}}],["queryrunner.manager.update(user",{"_index":2093,"title":{},"body":{"injectables/UserService.html":{}}}],["queryrunner.release",{"_index":2098,"title":{},"body":{"injectables/UserService.html":{}}}],["queryrunner.rollbacktransaction",{"_index":2096,"title":{},"body":{"injectables/UserService.html":{}}}],["queryrunner.starttransaction",{"_index":2092,"title":{},"body":{"injectables/UserService.html":{}}}],["queryrunner?.data?.iscreatinglogs",{"_index":759,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["queue",{"_index":1256,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["ra",{"_index":1985,"title":{},"body":{"entities/User.html":{}}}],["range",{"_index":1381,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["rawbody",{"_index":1671,"title":{},"body":{"interfaces/RequestWithRawBody.html":{}}}],["rawbodymiddleware",{"_index":2229,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["read",{"_index":2362,"title":{},"body":{"index.html":{}}}],["readable",{"_index":1257,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["readable.from(result",{"_index":1277,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["readonly",{"_index":62,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationServices.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailModuleController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/FileService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsMiddleware.html":{},"controllers/OptimizeController.html":{},"injectables/PostSearchService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/jwtStrategy.html":{},"injectables/stripeWebhookService.html":{},"injectables/subscriptionsService.html":{}}}],["receiverphonenumber",{"_index":1728,"title":{},"body":{"injectables/SmsService.html":{}}}],["recipient",{"_index":894,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["recursivelystripnullvalues",{"_index":971,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["recursivelystripnullvalues(value",{"_index":974,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"miscellaneous/functions.html":{}}}],["redis",{"_index":185,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"dependencies.html":{}}}],["redis_host",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_port",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["redisstore",{"_index":1470,"title":{},"body":{"modules/PostsModule.html":{}}}],["reflect",{"_index":2282,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":204,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationServices.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["refresh(@req",{"_index":321,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh(request",{"_index":216,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh.guard",{"_index":246,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh.guard.ts",{"_index":1151,"title":{},"body":{"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["refresh=${token",{"_index":433,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["refreshtoken",{"_index":305,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/UserService.html":{}}}],["refreshtokencookie",{"_index":303,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["register",{"_index":205,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationServices.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["register(@body",{"_index":264,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["register(@res",{"_index":1907,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["register(registrationdata",{"_index":219,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationServices.html":{}}}],["register(response",{"_index":1896,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["registerdto",{"_index":220,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationServices.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["registeruser",{"_index":1049,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["registeruser(token",{"_index":1060,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["registrationdata",{"_index":223,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationServices.html":{}}}],["registrationdata.email",{"_index":269,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["relations",{"_index":617,"title":{},"body":{"injectables/ChatService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"injectables/UserService.html":{},"injectables/categoriesService.html":{}}}],["removerefreshtoken",{"_index":2020,"title":{},"body":{"injectables/UserService.html":{}}}],["removerefreshtoken(userid",{"_index":2054,"title":{},"body":{"injectables/UserService.html":{}}}],["repository",{"_index":596,"title":{},"body":{"injectables/ChatService.html":{},"injectables/FileService.html":{},"injectables/LogsService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{},"injectables/categoriesService.html":{},"index.html":{},"injectables/productCategoriesService.html":{},"properties.html":{},"injectables/stripeWebhookService.html":{}}}],["req",{"_index":225,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/ChargeController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/LogsMiddleware.html":{},"controllers/PostsController.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["req.user",{"_index":1458,"title":{},"body":{"controllers/PostsController.html":{}}}],["request",{"_index":210,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/ChargeController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsMiddleware.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"controllers/SmsController.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"guards/emailConfirmationGuard.html":{},"injectables/jwtStrategy.html":{}}}],["request.cookies?.refresh",{"_index":1168,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["request.query",{"_index":1106,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["request.rawbody",{"_index":1843,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["request.res.setheader",{"_index":316,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["request.res.setheader('set",{"_index":309,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["request.user",{"_index":299,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["request.user.id",{"_index":1708,"title":{},"body":{"controllers/SmsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["request.user.isphonenumberconfirmed",{"_index":1702,"title":{},"body":{"controllers/SmsController.html":{}}}],["request.user.phonenumber",{"_index":1705,"title":{},"body":{"controllers/SmsController.html":{}}}],["request.user.stripecustomerid",{"_index":542,"title":{},"body":{"controllers/ChargeController.html":{},"controllers/CreditCardsController.html":{},"controllers/SubscriptionsController.html":{}}}],["request.user?.isemailconfirmed",{"_index":2296,"title":{},"body":{"guards/emailConfirmationGuard.html":{}}}],["request?.cookies",{"_index":2376,"title":{},"body":{"injectables/jwtStrategy.html":{}}}],["request?.cookies?.authentication",{"_index":1177,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{},"injectables/jwtStrategy.html":{}}}],["request?.cookies?.refresh",{"_index":1164,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["requestallmessages",{"_index":552,"title":{},"body":{"classes/ChatGateway.html":{}}}],["requestallmessages(@connectedsocket",{"_index":579,"title":{},"body":{"classes/ChatGateway.html":{}}}],["requestallmessages(socket",{"_index":564,"title":{},"body":{"classes/ChatGateway.html":{}}}],["requestwithrawbody",{"_index":1669,"title":{"interfaces/RequestWithRawBody.html":{}},"body":{"interfaces/RequestWithRawBody.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{}}}],["requestwithuser",{"_index":207,"title":{"interfaces/RequestWithUser.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/ChargeController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/PostsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"guards/emailConfirmationGuard.html":{}}}],["requestwithuser.interface",{"_index":249,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["required",{"_index":2171,"title":{},"body":{"injectables/categoriesService.html":{}}}],["res",{"_index":229,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/LogsMiddleware.html":{},"controllers/OptimizeController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["res.on('finish",{"_index":1211,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["resendconfirmationlink",{"_index":800,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{}}}],["resendconfirmationlink(@req",{"_index":817,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["resendconfirmationlink(request",{"_index":805,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["resendconfirmationlink(userid",{"_index":840,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["reset",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoryModule.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"modules/CreditCardsModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FileModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/PrivateFilesModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscriptionsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resource_missing",{"_index":2310,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["resourcemissing",{"_index":2309,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["response",{"_index":233,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/LogsMiddleware.html":{},"controllers/OptimizeController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{}}}],["response.sendstatus(202",{"_index":1274,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["response.sendstatus(404",{"_index":1271,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["result",{"_index":1275,"title":{},"body":{"controllers/OptimizeController.html":{},"injectables/PostSearchService.html":{},"injectables/SmsService.html":{}}}],["result.id",{"_index":1544,"title":{},"body":{"injectables/PostsService.html":{}}}],["result.status",{"_index":1749,"title":{},"body":{"injectables/SmsService.html":{}}}],["result.valid",{"_index":1748,"title":{},"body":{"injectables/SmsService.html":{}}}],["results",{"_index":24,"title":{},"body":{"classes/AddCreditCardDto.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationServices.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"classes/CategoriesNotFoundException.html":{},"entities/Category.html":{},"modules/CategoryModule.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"controllers/EmailModuleController.html":{},"classes/EmailScheduleDto.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"classes/FindOneParams.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/ImageProcessor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthentication.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"entities/Message.html":{},"classes/ObjectWithDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"interfaces/PostCountResult.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"injectables/PostSearchService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"modules/PrivateFilesModule.html":{},"entities/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"entities/ProductCategory.html":{},"injectables/ProductService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"entities/StripeEvent.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/categoriesService.html":{},"coverage.html":{},"classes/createPostDto.html":{},"dependencies.html":{},"guards/emailConfirmationGuard.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"injectables/jwtStrategy.html":{},"modules.html":{},"overview.html":{},"injectables/productCategoriesService.html":{},"properties.html":{},"injectables/stripeWebhookService.html":{},"injectables/subscriptionsService.html":{},"classes/updatePostDto.html":{},"miscellaneous/variables.html":{},"interfaces/verificationTokenPayload.html":{}}}],["results.map((result",{"_index":1543,"title":{},"body":{"injectables/PostsService.html":{}}}],["return",{"_index":63,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationServices.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CreditCardsController.html":{},"classes/DatabaseLogger.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FileService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/ImageProcessor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"injectables/PostSearchService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductService.html":{},"controllers/ProductsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/categoriesService.html":{},"guards/emailConfirmationGuard.html":{},"injectables/jwtStrategy.html":{},"injectables/productCategoriesService.html":{},"injectables/stripeWebhookService.html":{},"injectables/subscriptionsService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":57,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationServices.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailModuleController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FileService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/ImageProcessor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"injectables/PostSearchService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductService.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/categoriesService.html":{},"guards/emailConfirmationGuard.html":{},"miscellaneous/functions.html":{},"injectables/jwtStrategy.html":{},"injectables/productCategoriesService.html":{},"injectables/stripeWebhookService.html":{},"injectables/subscriptionsService.html":{}}}],["rimraf",{"_index":2285,"title":{},"body":{"dependencies.html":{}}}],["riêng",{"_index":1993,"title":{},"body":{"entities/User.html":{}}}],["rqq",{"_index":1105,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["run",{"_index":2338,"title":{},"body":{"index.html":{}}}],["runincluster",{"_index":2232,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["runincluster(bootstrap",{"_index":2320,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rxjs",{"_index":968,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"dependencies.html":{},"guards/emailConfirmationGuard.html":{}}}],["rxjs/operators",{"_index":970,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["s",{"_index":257,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationServices.html":{},"injectables/EmailConfirmationService.html":{},"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["s3",{"_index":1000,"title":{},"body":{"injectables/FileService.html":{},"injectables/PrivateFileService.html":{}}}],["s3.getsignedurlpromise('getobject",{"_index":1580,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["savemessage",{"_index":593,"title":{},"body":{"injectables/ChatService.html":{}}}],["savemessage(content",{"_index":601,"title":{},"body":{"injectables/ChatService.html":{}}}],["scalable",{"_index":2328,"title":{},"body":{"index.html":{}}}],["scheduleemail",{"_index":881,"title":{},"body":{"controllers/EmailModuleController.html":{},"injectables/EmailSchedulingService.html":{}}}],["scheduleemail(@body",{"_index":891,"title":{},"body":{"controllers/EmailModuleController.html":{}}}],["scheduleemail(emailschedule",{"_index":882,"title":{},"body":{"controllers/EmailModuleController.html":{},"injectables/EmailSchedulingService.html":{}}}],["schedulemodule",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["scheduleregistery",{"_index":909,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["schedulerregistry",{"_index":910,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["scheduling",{"_index":880,"title":{},"body":{"controllers/EmailModuleController.html":{}}}],["script",{"_index":1398,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["sdk",{"_index":1002,"title":{},"body":{"injectables/FileService.html":{},"injectables/PrivateFileService.html":{},"dependencies.html":{}}}],["search",{"_index":1337,"title":{},"body":{"injectables/PostSearchService.html":{},"controllers/PostsController.html":{}}}],["search(text",{"_index":1349,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["search/search.module",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{}}}],["searchforposts",{"_index":1482,"title":{},"body":{"injectables/PostsService.html":{}}}],["searchforposts(text",{"_index":1498,"title":{},"body":{"injectables/PostsService.html":{}}}],["searchmodule",{"_index":87,"title":{"modules/SearchModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/SearchModule.html":{},"modules.html":{},"overview.html":{}}}],["secret",{"_index":349,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationServices.html":{},"injectables/EmailConfirmationService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UserService.html":{}}}],["secretorkey",{"_index":1165,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/jwtStrategy.html":{}}}],["see",{"_index":2169,"title":{},"body":{"injectables/categoriesService.html":{}}}],["senderphonenumber",{"_index":1753,"title":{},"body":{"injectables/SmsService.html":{}}}],["sendmail",{"_index":928,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendmail(option",{"_index":931,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendmessage",{"_index":1719,"title":{},"body":{"injectables/SmsService.html":{}}}],["sendmessage(receiverphonenumber",{"_index":1726,"title":{},"body":{"injectables/SmsService.html":{}}}],["sendverificationlink",{"_index":831,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["sendverificationlink(email",{"_index":842,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["separatecount",{"_index":1368,"title":{},"body":{"injectables/PostSearchService.html":{},"injectables/PostsService.html":{}}}],["serializeoptions",{"_index":230,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["server",{"_index":549,"title":{},"body":{"classes/ChatGateway.html":{},"index.html":{}}}],["service",{"_index":940,"title":{},"body":{"injectables/EmailService.html":{}}}],["serviceid",{"_index":1744,"title":{},"body":{"injectables/SmsService.html":{}}}],["services(serviceid",{"_index":1746,"title":{},"body":{"injectables/SmsService.html":{}}}],["services(servicesid",{"_index":1739,"title":{},"body":{"injectables/SmsService.html":{}}}],["servicesid",{"_index":1737,"title":{},"body":{"injectables/SmsService.html":{}}}],["set",{"_index":317,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/StripeService.html":{}}}],["setcurrentrefreshtoken",{"_index":2021,"title":{},"body":{"injectables/UserService.html":{}}}],["setcurrentrefreshtoken(refreshtoken",{"_index":2056,"title":{},"body":{"injectables/UserService.html":{}}}],["setdefaultcard",{"_index":660,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["setdefaultcard(creditcard",{"_index":667,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["setdefaultcreditcard",{"_index":1771,"title":{},"body":{"injectables/StripeService.html":{}}}],["setdefaultcreditcard(paymentmethodid",{"_index":1790,"title":{},"body":{"injectables/StripeService.html":{}}}],["setdefaultcreditcarddto",{"_index":668,"title":{"classes/SetDefaultCreditCardDto.html":{}},"body":{"controllers/CreditCardsController.html":{},"classes/SetDefaultCreditCardDto.html":{},"coverage.html":{}}}],["setwofactorauthenticationsecret",{"_index":2022,"title":{},"body":{"injectables/UserService.html":{}}}],["setwofactorauthenticationsecret(secret",{"_index":2058,"title":{},"body":{"injectables/UserService.html":{}}}],["side",{"_index":2329,"title":{},"body":{"index.html":{}}}],["sign",{"_index":2450,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signature",{"_index":1780,"title":{},"body":{"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{}}}],["signoptions",{"_index":351,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["size",{"_index":1372,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["skip",{"_index":1520,"title":{},"body":{"injectables/PostsService.html":{}}}],["sms",{"_index":1684,"title":{},"body":{"controllers/SmsController.html":{},"injectables/SmsService.html":{}}}],["sms.controller",{"_index":1715,"title":{},"body":{"modules/SmsModule.html":{}}}],["sms.service",{"_index":1698,"title":{},"body":{"controllers/SmsController.html":{},"modules/SmsModule.html":{}}}],["sms/sms.module",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["smscontroller",{"_index":1682,"title":{"controllers/SmsController.html":{}},"body":{"controllers/SmsController.html":{},"modules/SmsModule.html":{},"coverage.html":{}}}],["smsmodule",{"_index":88,"title":{"modules/SmsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SmsModule.html":{},"modules.html":{},"overview.html":{}}}],["smsservice",{"_index":1697,"title":{"injectables/SmsService.html":{}},"body":{"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"coverage.html":{},"overview.html":{}}}],["socket",{"_index":558,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{}}}],["socket.emit('send_all_messages",{"_index":582,"title":{},"body":{"classes/ChatGateway.html":{}}}],["socket.handshake.headers.cookie",{"_index":608,"title":{},"body":{"injectables/ChatService.html":{}}}],["socket.io",{"_index":572,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"dependencies.html":{}}}],["something",{"_index":407,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["sort",{"_index":1383,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AddCreditCardDto.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationServices.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"classes/CategoriesNotFoundException.html":{},"entities/Category.html":{},"modules/CategoryModule.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"controllers/EmailModuleController.html":{},"classes/EmailScheduleDto.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"classes/FindOneParams.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/ImageProcessor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthentication.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"entities/Message.html":{},"classes/ObjectWithDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"interfaces/PostCountResult.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"injectables/PostSearchService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"modules/PrivateFilesModule.html":{},"entities/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"entities/ProductCategory.html":{},"injectables/ProductService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"entities/StripeEvent.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/categoriesService.html":{},"classes/createPostDto.html":{},"guards/emailConfirmationGuard.html":{},"index.html":{},"injectables/jwtStrategy.html":{},"injectables/productCategoriesService.html":{},"injectables/stripeWebhookService.html":{},"injectables/subscriptionsService.html":{},"classes/updatePostDto.html":{},"interfaces/verificationTokenPayload.html":{}}}],["specific",{"_index":297,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["sponsors",{"_index":2356,"title":{},"body":{"index.html":{}}}],["src/.../config.service.ts",{"_index":2448,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../getloglevels.ts",{"_index":2313,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../jwt.service.ts",{"_index":2446,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":2312,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../posgreserrorcodes.enum.ts",{"_index":2301,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../postscachekey.constant.ts",{"_index":2445,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../rawbody.middleware.ts",{"_index":2314,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../recursivelystripnullvalues.ts",{"_index":2315,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../runincluster.ts",{"_index":2316,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../stripeerror.enum.ts",{"_index":2302,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../user.mock.ts",{"_index":2447,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":56,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:108",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":194,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":195,"title":{},"body":{"injectables/AppService.html":{}}}],["src/authentication/authentication.controller.ts",{"_index":199,"title":{},"body":{"controllers/AuthenticationController.html":{},"coverage.html":{}}}],["src/authentication/authentication.controller.ts:34",{"_index":222,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:45",{"_index":209,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:68",{"_index":215,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:78",{"_index":218,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.module.ts",{"_index":332,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["src/authentication/authentication.service.ts",{"_index":354,"title":{},"body":{"injectables/AuthenticationServices.html":{},"coverage.html":{}}}],["src/authentication/authentication.service.ts:11",{"_index":363,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["src/authentication/authentication.service.ts:111",{"_index":378,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["src/authentication/authentication.service.ts:18",{"_index":379,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["src/authentication/authentication.service.ts:42",{"_index":366,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["src/authentication/authentication.service.ts:57",{"_index":382,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["src/authentication/authentication.service.ts:73",{"_index":371,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["src/authentication/authentication.service.ts:87",{"_index":368,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["src/authentication/authentication.service.ts:94",{"_index":376,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["src/authentication/dto/register.dto.ts",{"_index":1656,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/authentication/dto/register.dto.ts:10",{"_index":1658,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:14",{"_index":1659,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:19",{"_index":1661,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:24",{"_index":1664,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/jwt",{"_index":1146,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/PostsController.html":{},"injectables/SmsService.html":{},"coverage.html":{}}}],["src/authentication/jwt.strategy.ts",{"_index":2199,"title":{},"body":{"coverage.html":{},"injectables/jwtStrategy.html":{}}}],["src/authentication/jwt.strategy.ts:10",{"_index":2373,"title":{},"body":{"injectables/jwtStrategy.html":{}}}],["src/authentication/jwt.strategy.ts:27",{"_index":2374,"title":{},"body":{"injectables/jwtStrategy.html":{}}}],["src/authentication/local.strategy.ts",{"_index":1182,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/authentication/local.strategy.ts:15",{"_index":1185,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/authentication/local.strategy.ts:8",{"_index":1183,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/authentication/localauthentication.guard.ts",{"_index":1179,"title":{},"body":{"injectables/LocalAuthentication.html":{},"coverage.html":{}}}],["src/authentication/requestwithuser.interface",{"_index":1730,"title":{},"body":{"injectables/SmsService.html":{},"guards/emailConfirmationGuard.html":{}}}],["src/authentication/requestwithuser.interface.ts",{"_index":1672,"title":{},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["src/authentication/test/user.mock.ts",{"_index":2200,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/authentication/tokenpayload.interface.ts",{"_index":1882,"title":{},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["src/authentication/twofactor/dto/twofactorauthenticationcode.dto.ts",{"_index":1887,"title":{},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{},"coverage.html":{}}}],["src/authentication/twofactor/dto/twofactorauthenticationcode.dto.ts:8",{"_index":1889,"title":{},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{}}}],["src/authentication/twofactor/twofactorauthentication.controller.ts",{"_index":1890,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{}}}],["src/authentication/twofactor/twofactorauthentication.controller.ts:33",{"_index":1898,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["src/authentication/twofactor/twofactorauthentication.controller.ts:48",{"_index":1902,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["src/authentication/twofactor/twofactorauthentication.controller.ts:66",{"_index":1895,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["src/authentication/twofactor/twofactorauthentication.service.ts",{"_index":1917,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{},"coverage.html":{}}}],["src/authentication/twofactor/twofactorauthentication.service.ts:10",{"_index":1921,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["src/authentication/twofactor/twofactorauthentication.service.ts:16",{"_index":1923,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["src/authentication/twofactor/twofactorauthentication.service.ts:29",{"_index":1927,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["src/authentication/twofactor/twofactorauthentication.service.ts:33",{"_index":1925,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["src/categories/category.controller.ts",{"_index":451,"title":{},"body":{"controllers/CategoriesController.html":{},"coverage.html":{}}}],["src/categories/category.controller.ts:23",{"_index":467,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/category.controller.ts:28",{"_index":470,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/category.controller.ts:34",{"_index":461,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/category.controller.ts:39",{"_index":474,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/category.controller.ts:49",{"_index":466,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/category.entity.ts",{"_index":505,"title":{},"body":{"entities/Category.html":{},"coverage.html":{}}}],["src/categories/category.entity.ts:10",{"_index":512,"title":{},"body":{"entities/Category.html":{}}}],["src/categories/category.entity.ts:15",{"_index":517,"title":{},"body":{"entities/Category.html":{}}}],["src/categories/category.entity.ts:18",{"_index":510,"title":{},"body":{"entities/Category.html":{}}}],["src/categories/category.entity.ts:7",{"_index":511,"title":{},"body":{"entities/Category.html":{}}}],["src/categories/category.module.ts",{"_index":522,"title":{},"body":{"modules/CategoryModule.html":{}}}],["src/categories/category.service.ts",{"_index":2150,"title":{},"body":{"injectables/categoriesService.html":{},"coverage.html":{}}}],["src/categories/category.service.ts:25",{"_index":2159,"title":{},"body":{"injectables/categoriesService.html":{}}}],["src/categories/category.service.ts:34",{"_index":2163,"title":{},"body":{"injectables/categoriesService.html":{}}}],["src/categories/category.service.ts:51",{"_index":2168,"title":{},"body":{"injectables/categoriesService.html":{}}}],["src/categories/category.service.ts:63",{"_index":2152,"title":{},"body":{"injectables/categoriesService.html":{}}}],["src/categories/category.service.ts:74",{"_index":2158,"title":{},"body":{"injectables/categoriesService.html":{}}}],["src/categories/category.service.ts:83",{"_index":2154,"title":{},"body":{"injectables/categoriesService.html":{}}}],["src/categories/dto/createcategory.dto.ts",{"_index":625,"title":{},"body":{"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["src/categories/dto/createcategory.dto.ts:6",{"_index":626,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["src/categories/dto/updatecategory.dto.ts",{"_index":1940,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["src/categories/dto/updatecategory.dto.ts:11",{"_index":1944,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["src/categories/dto/updatecategory.dto.ts:6",{"_index":1942,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["src/categories/exception/categoriesnotfound.exception",{"_index":2172,"title":{},"body":{"injectables/categoriesService.html":{}}}],["src/categories/exception/categoriesnotfound.exception.ts",{"_index":497,"title":{},"body":{"classes/CategoriesNotFoundException.html":{},"coverage.html":{}}}],["src/categories/exception/categoriesnotfound.exception.ts:3",{"_index":501,"title":{},"body":{"classes/CategoriesNotFoundException.html":{}}}],["src/charge/charge.controller.ts",{"_index":528,"title":{},"body":{"controllers/ChargeController.html":{},"coverage.html":{}}}],["src/charge/charge.controller.ts:13",{"_index":533,"title":{},"body":{"controllers/ChargeController.html":{}}}],["src/charge/charge.module.ts",{"_index":545,"title":{},"body":{"modules/ChargeModule.html":{}}}],["src/charge/dto/createcharge.dto.ts",{"_index":627,"title":{},"body":{"classes/CreateChargeDto.html":{},"coverage.html":{}}}],["src/charge/dto/createcharge.dto.ts:6",{"_index":631,"title":{},"body":{"classes/CreateChargeDto.html":{}}}],["src/charge/dto/createcharge.dto.ts:9",{"_index":630,"title":{},"body":{"classes/CreateChargeDto.html":{}}}],["src/chat/chat.gateway.ts",{"_index":548,"title":{},"body":{"classes/ChatGateway.html":{},"coverage.html":{}}}],["src/chat/chat.gateway.ts:14",{"_index":555,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/chat/chat.gateway.ts:17",{"_index":559,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/chat/chat.gateway.ts:22",{"_index":562,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/chat/chat.gateway.ts:33",{"_index":566,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/chat/chat.module.ts",{"_index":586,"title":{},"body":{"modules/ChatModule.html":{}}}],["src/chat/chat.service.ts",{"_index":590,"title":{},"body":{"injectables/ChatService.html":{},"coverage.html":{}}}],["src/chat/chat.service.ts:12",{"_index":597,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:19",{"_index":600,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:32",{"_index":602,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:42",{"_index":598,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/message.entity",{"_index":781,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/chat/message.entity.ts",{"_index":1233,"title":{},"body":{"entities/Message.html":{},"coverage.html":{}}}],["src/chat/message.entity.ts:10",{"_index":1236,"title":{},"body":{"entities/Message.html":{}}}],["src/chat/message.entity.ts:13",{"_index":1235,"title":{},"body":{"entities/Message.html":{}}}],["src/chat/message.entity.ts:7",{"_index":1237,"title":{},"body":{"entities/Message.html":{}}}],["src/credit",{"_index":6,"title":{},"body":{"classes/AddCreditCardDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"classes/SetDefaultCreditCardDto.html":{},"coverage.html":{}}}],["src/database/database.module.ts",{"_index":769,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/databaselogger.ts",{"_index":729,"title":{},"body":{"classes/DatabaseLogger.html":{},"coverage.html":{}}}],["src/database/databaselogger.ts:16",{"_index":750,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["src/database/databaselogger.ts:31",{"_index":752,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["src/database/databaselogger.ts:47",{"_index":745,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["src/database/databaselogger.ts:5",{"_index":740,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["src/database/databaselogger.ts:54",{"_index":755,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["src/database/databaselogger.ts:61",{"_index":743,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["src/database/databaselogger.ts:7",{"_index":747,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["src/database/databaselogger.ts:76",{"_index":757,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["src/database/posgreserrorcodes.enum",{"_index":2414,"title":{},"body":{"injectables/stripeWebhookService.html":{}}}],["src/database/posgreserrorcodes.enum.ts",{"_index":2303,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/email/email.module.ts",{"_index":876,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/email/email.service",{"_index":914,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["src/email/email.service.ts",{"_index":926,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{}}}],["src/email/email.service.ts:20",{"_index":933,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/email/email.service.ts:8",{"_index":930,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/emailconfirmation/dto/confirmemail.dto.ts",{"_index":623,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"coverage.html":{}}}],["src/emailconfirmation/dto/confirmemail.dto.ts:6",{"_index":624,"title":{},"body":{"classes/ConfirmEmailDto.html":{}}}],["src/emailconfirmation/emailconfirmation.controller.ts",{"_index":797,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"coverage.html":{}}}],["src/emailconfirmation/emailconfirmation.controller.ts:23",{"_index":803,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["src/emailconfirmation/emailconfirmation.controller.ts:32",{"_index":808,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["src/emailconfirmation/emailconfirmation.guard",{"_index":672,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["src/emailconfirmation/emailconfirmation.guard.ts",{"_index":2207,"title":{},"body":{"coverage.html":{},"guards/emailConfirmationGuard.html":{}}}],["src/emailconfirmation/emailconfirmation.guard.ts:12",{"_index":2295,"title":{},"body":{"guards/emailConfirmationGuard.html":{}}}],["src/emailconfirmation/emailconfirmation.module",{"_index":347,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["src/emailconfirmation/emailconfirmation.module.ts",{"_index":824,"title":{},"body":{"modules/EmailConfirmationModule.html":{}}}],["src/emailconfirmation/emailconfirmation.service",{"_index":236,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/emailconfirmation/emailconfirmation.service.ts",{"_index":828,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"coverage.html":{}}}],["src/emailconfirmation/emailconfirmation.service.ts:17",{"_index":843,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["src/emailconfirmation/emailconfirmation.service.ts:37",{"_index":837,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["src/emailconfirmation/emailconfirmation.service.ts:45",{"_index":839,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["src/emailconfirmation/emailconfirmation.service.ts:62",{"_index":841,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["src/emailconfirmation/emailconfirmation.service.ts:9",{"_index":835,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["src/emailconfirmation/verificationtokenpayload.interface.ts",{"_index":2209,"title":{},"body":{"coverage.html":{},"interfaces/verificationTokenPayload.html":{}}}],["src/emaillscheduling/dto/emailscheduling.dto.ts",{"_index":893,"title":{},"body":{"classes/EmailScheduleDto.html":{},"coverage.html":{}}}],["src/emaillscheduling/dto/emailscheduling.dto.ts:13",{"_index":895,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["src/emaillscheduling/dto/emailscheduling.dto.ts:16",{"_index":897,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["src/emaillscheduling/dto/emailscheduling.dto.ts:5",{"_index":899,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["src/emaillscheduling/dto/emailscheduling.dto.ts:9",{"_index":900,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["src/emaillscheduling/emailscheduling.controller.ts",{"_index":879,"title":{},"body":{"controllers/EmailModuleController.html":{},"coverage.html":{}}}],["src/emaillscheduling/emailscheduling.controller.ts:14",{"_index":885,"title":{},"body":{"controllers/EmailModuleController.html":{}}}],["src/emaillscheduling/emailscheduling.module.ts",{"_index":904,"title":{},"body":{"modules/EmailSchedulingModule.html":{}}}],["src/emaillscheduling/emailscheduling.service.ts",{"_index":907,"title":{},"body":{"injectables/EmailSchedulingService.html":{},"coverage.html":{}}}],["src/emaillscheduling/emailscheduling.service.ts:13",{"_index":912,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["src/emaillscheduling/emailscheduling.service.ts:7",{"_index":911,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["src/files/files.module.ts",{"_index":979,"title":{},"body":{"modules/FileModule.html":{}}}],["src/files/files.service.ts",{"_index":983,"title":{},"body":{"injectables/FileService.html":{},"coverage.html":{}}}],["src/files/files.service.ts:10",{"_index":988,"title":{},"body":{"injectables/FileService.html":{}}}],["src/files/files.service.ts:17",{"_index":998,"title":{},"body":{"injectables/FileService.html":{}}}],["src/files/files.service.ts:36",{"_index":991,"title":{},"body":{"injectables/FileService.html":{}}}],["src/files/files.service.ts:54",{"_index":994,"title":{},"body":{"injectables/FileService.html":{}}}],["src/files/publicfile.entity.ts",{"_index":1652,"title":{},"body":{"entities/PublicFile.html":{},"coverage.html":{}}}],["src/files/publicfile.entity.ts:12",{"_index":1654,"title":{},"body":{"entities/PublicFile.html":{}}}],["src/files/publicfile.entity.ts:6",{"_index":1653,"title":{},"body":{"entities/PublicFile.html":{}}}],["src/files/publicfile.entity.ts:9",{"_index":1655,"title":{},"body":{"entities/PublicFile.html":{}}}],["src/googleauthentication/dto/tokenverification.dto.ts",{"_index":1884,"title":{},"body":{"classes/TokenVerificationDto.html":{},"coverage.html":{}}}],["src/googleauthentication/dto/tokenverification.dto.ts:6",{"_index":1885,"title":{},"body":{"classes/TokenVerificationDto.html":{}}}],["src/googleauthentication/googleauthencation.controller.ts",{"_index":1026,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["src/googleauthentication/googleauthencation.controller.ts:21",{"_index":1031,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["src/googleauthentication/googleauthentication.module.ts",{"_index":1042,"title":{},"body":{"modules/GoogleAuthenticationModule.html":{}}}],["src/googleauthentication/googleauthentication.service.ts",{"_index":1044,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["src/googleauthentication/googleauthentication.service.ts:11",{"_index":1051,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["src/googleauthentication/googleauthentication.service.ts:22",{"_index":1053,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["src/googleauthentication/googleauthentication.service.ts:37",{"_index":1061,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["src/googleauthentication/googleauthentication.service.ts:45",{"_index":1057,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["src/googleauthentication/googleauthentication.service.ts:58",{"_index":1055,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["src/googleauthentication/googleauthentication.service.ts:68",{"_index":1059,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["src/logger/customlogger.ts",{"_index":688,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{}}}],["src/logger/customlogger.ts:24",{"_index":706,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["src/logger/customlogger.ts:34",{"_index":704,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["src/logger/customlogger.ts:43",{"_index":710,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["src/logger/customlogger.ts:52",{"_index":700,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["src/logger/customlogger.ts:61",{"_index":708,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["src/logger/customlogger.ts:9",{"_index":698,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["src/logger/dto/createlog.dto.ts",{"_index":633,"title":{},"body":{"classes/CreateLogDto.html":{},"coverage.html":{}}}],["src/logger/dto/createlog.dto.ts:2",{"_index":636,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["src/logger/dto/createlog.dto.ts:3",{"_index":638,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["src/logger/dto/createlog.dto.ts:4",{"_index":637,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["src/logger/log.entity",{"_index":784,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/logger/log.entity.ts",{"_index":1189,"title":{},"body":{"entities/Log.html":{},"coverage.html":{}}}],["src/logger/log.entity.ts:12",{"_index":1196,"title":{},"body":{"entities/Log.html":{}}}],["src/logger/log.entity.ts:15",{"_index":1195,"title":{},"body":{"entities/Log.html":{}}}],["src/logger/log.entity.ts:18",{"_index":1193,"title":{},"body":{"entities/Log.html":{}}}],["src/logger/log.entity.ts:6",{"_index":1194,"title":{},"body":{"entities/Log.html":{}}}],["src/logger/log.entity.ts:9",{"_index":1191,"title":{},"body":{"entities/Log.html":{}}}],["src/logger/logger.module.ts",{"_index":1200,"title":{},"body":{"modules/LoggerModule.html":{}}}],["src/logger/logs.service.ts",{"_index":1219,"title":{},"body":{"injectables/LogsService.html":{},"coverage.html":{}}}],["src/logger/logs.service.ts:14",{"_index":1225,"title":{},"body":{"injectables/LogsService.html":{}}}],["src/logger/logs.service.ts:8",{"_index":1222,"title":{},"body":{"injectables/LogsService.html":{}}}],["src/main.ts",{"_index":2211,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/optimize/image.processor.ts",{"_index":1109,"title":{},"body":{"classes/ImageProcessor.html":{},"coverage.html":{}}}],["src/optimize/image.processor.ts:11",{"_index":1114,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["src/optimize/optimize.controller.ts",{"_index":1242,"title":{},"body":{"controllers/OptimizeController.html":{},"coverage.html":{}}}],["src/optimize/optimize.controller.ts:25",{"_index":1251,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["src/optimize/optimize.controller.ts:36",{"_index":1248,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["src/optimize/optimize.module.ts",{"_index":1279,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["src/posts/dto/createpost.dto.ts",{"_index":2214,"title":{},"body":{"coverage.html":{},"classes/createPostDto.html":{}}}],["src/posts/dto/createpost.dto.ts:5",{"_index":2238,"title":{},"body":{"classes/createPostDto.html":{}}}],["src/posts/dto/createpost.dto.ts:9",{"_index":2237,"title":{},"body":{"classes/createPostDto.html":{}}}],["src/posts/dto/updatepost.dto.ts",{"_index":2215,"title":{},"body":{"coverage.html":{},"classes/updatePostDto.html":{}}}],["src/posts/dto/updatepost.dto.ts:11",{"_index":2442,"title":{},"body":{"classes/updatePostDto.html":{}}}],["src/posts/dto/updatepost.dto.ts:16",{"_index":2443,"title":{},"body":{"classes/updatePostDto.html":{}}}],["src/posts/dto/updatepost.dto.ts:5",{"_index":2440,"title":{},"body":{"classes/updatePostDto.html":{}}}],["src/posts/exception/postnotfound.exception.ts",{"_index":1322,"title":{},"body":{"classes/PostNotFoundException.html":{},"coverage.html":{}}}],["src/posts/exception/postnotfound.exception.ts:3",{"_index":1324,"title":{},"body":{"classes/PostNotFoundException.html":{}}}],["src/posts/httpcache.interceptor.ts",{"_index":1094,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"coverage.html":{}}}],["src/posts/httpcache.interceptor.ts:10",{"_index":1098,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["src/posts/post.entity.ts",{"_index":1301,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/post.entity.ts:16",{"_index":1310,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:19",{"_index":1314,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:26",{"_index":1313,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:33",{"_index":1306,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:39",{"_index":1309,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.interface.ts",{"_index":2216,"title":{},"body":{"coverage.html":{}}}],["src/posts/posts.controller.ts",{"_index":1406,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:41",{"_index":1422,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:54",{"_index":1419,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:61",{"_index":1415,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:66",{"_index":1425,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:74",{"_index":1417,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":1465,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/posts.service.ts",{"_index":1479,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/posts.service.ts:102",{"_index":1490,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:111",{"_index":1499,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:15",{"_index":1486,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:24",{"_index":1488,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:33",{"_index":1495,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:59",{"_index":1497,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:65",{"_index":1492,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:77",{"_index":1489,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:88",{"_index":1501,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/postscachekey.constant.ts",{"_index":2218,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/posts/postssearch.service.ts",{"_index":1335,"title":{},"body":{"injectables/PostSearchService.html":{},"coverage.html":{}}}],["src/posts/postssearch.service.ts:10",{"_index":1341,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["src/posts/postssearch.service.ts:103",{"_index":1353,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["src/posts/postssearch.service.ts:14",{"_index":1348,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["src/posts/postssearch.service.ts:26",{"_index":1344,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["src/posts/postssearch.service.ts:41",{"_index":1350,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["src/posts/postssearch.service.ts:88",{"_index":1346,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["src/posts/types/postcountbody.interface.ts",{"_index":1319,"title":{},"body":{"interfaces/PostCountResult.html":{},"coverage.html":{}}}],["src/posts/types/postsearchresponse.interface.ts",{"_index":1330,"title":{},"body":{"interfaces/PostSearchResult.html":{},"coverage.html":{}}}],["src/posts/types/postssearchbody.interface.ts",{"_index":1327,"title":{},"body":{"interfaces/PostSearchBody.html":{},"coverage.html":{}}}],["src/privatefiles/privatefile.entity.ts",{"_index":1548,"title":{},"body":{"entities/PrivateFile.html":{},"coverage.html":{}}}],["src/privatefiles/privatefile.entity.ts:10",{"_index":1551,"title":{},"body":{"entities/PrivateFile.html":{}}}],["src/privatefiles/privatefile.entity.ts:13",{"_index":1553,"title":{},"body":{"entities/PrivateFile.html":{}}}],["src/privatefiles/privatefile.entity.ts:7",{"_index":1550,"title":{},"body":{"entities/PrivateFile.html":{}}}],["src/privatefiles/privatefiles.module",{"_index":2005,"title":{},"body":{"modules/UserModule.html":{}}}],["src/privatefiles/privatefiles.module.ts",{"_index":1584,"title":{},"body":{"modules/PrivateFilesModule.html":{}}}],["src/privatefiles/privatefiles.service.ts",{"_index":1555,"title":{},"body":{"injectables/PrivateFileService.html":{},"coverage.html":{}}}],["src/privatefiles/privatefiles.service.ts:10",{"_index":1561,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["src/privatefiles/privatefiles.service.ts:17",{"_index":1569,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["src/privatefiles/privatefiles.service.ts:41",{"_index":1566,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["src/privatefiles/privatefiles.service.ts:64",{"_index":1564,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["src/productcategories/dto/createproductcategory.dto.ts",{"_index":640,"title":{},"body":{"classes/CreateProductCategoryDto.html":{},"coverage.html":{}}}],["src/productcategories/dto/createproductcategory.dto.ts:6",{"_index":641,"title":{},"body":{"classes/CreateProductCategoryDto.html":{}}}],["src/productcategories/productcategories.controller.ts",{"_index":1599,"title":{},"body":{"controllers/ProductCategoriesController.html":{},"coverage.html":{}}}],["src/productcategories/productcategories.controller.ts:20",{"_index":1604,"title":{},"body":{"controllers/ProductCategoriesController.html":{}}}],["src/productcategories/productcategories.controller.ts:26",{"_index":1603,"title":{},"body":{"controllers/ProductCategoriesController.html":{}}}],["src/productcategories/productcategories.entity",{"_index":780,"title":{},"body":{"modules/DatabaseModule.html":{},"entities/Product.html":{}}}],["src/productcategories/productcategories.entity.ts",{"_index":1617,"title":{},"body":{"entities/ProductCategory.html":{},"coverage.html":{}}}],["src/productcategories/productcategories.entity.ts:10",{"_index":1620,"title":{},"body":{"entities/ProductCategory.html":{}}}],["src/productcategories/productcategories.entity.ts:13",{"_index":1623,"title":{},"body":{"entities/ProductCategory.html":{}}}],["src/productcategories/productcategories.entity.ts:7",{"_index":1619,"title":{},"body":{"entities/ProductCategory.html":{}}}],["src/productcategories/productcategories.module.ts",{"_index":1613,"title":{},"body":{"modules/ProductCategoriesModule.html":{}}}],["src/productcategories/productcategories.service.ts",{"_index":2219,"title":{},"body":{"coverage.html":{},"injectables/productCategoriesService.html":{}}}],["src/productcategories/productcategories.service.ts:14",{"_index":2396,"title":{},"body":{"injectables/productCategoriesService.html":{}}}],["src/productcategories/productcategories.service.ts:18",{"_index":2395,"title":{},"body":{"injectables/productCategoriesService.html":{}}}],["src/productcategories/productcategories.service.ts:8",{"_index":2392,"title":{},"body":{"injectables/productCategoriesService.html":{}}}],["src/products/dto/createproduct.dto.ts",{"_index":643,"title":{},"body":{"classes/CreateProductDto.html":{},"coverage.html":{}}}],["src/products/dto/createproduct.dto.ts:12",{"_index":646,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["src/products/dto/createproduct.dto.ts:8",{"_index":647,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["src/products/product.entity",{"_index":778,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/products/product.entity.ts",{"_index":1587,"title":{},"body":{"entities/Product.html":{},"coverage.html":{}}}],["src/products/product.entity.ts:12",{"_index":1592,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:22",{"_index":1590,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:27",{"_index":1595,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:9",{"_index":1591,"title":{},"body":{"entities/Product.html":{}}}],["src/products/products.controller.ts",{"_index":1641,"title":{},"body":{"controllers/ProductsController.html":{},"coverage.html":{}}}],["src/products/products.controller.ts:20",{"_index":1643,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:26",{"_index":1642,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.module.ts",{"_index":1649,"title":{},"body":{"modules/ProductsModule.html":{}}}],["src/products/products.service.ts",{"_index":1626,"title":{},"body":{"injectables/ProductService.html":{},"coverage.html":{}}}],["src/products/products.service.ts:14",{"_index":1632,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/products/products.service.ts:18",{"_index":1631,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/products/products.service.ts:8",{"_index":1628,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/products/types/bookproperties.interface.ts",{"_index":440,"title":{},"body":{"interfaces/BookProperties.html":{},"coverage.html":{}}}],["src/products/types/carproperties.interface.ts",{"_index":447,"title":{},"body":{"interfaces/CarProperties.html":{},"coverage.html":{}}}],["src/search/search.module.ts",{"_index":1673,"title":{},"body":{"modules/SearchModule.html":{}}}],["src/sms/dto/checkverificationcode.dto.ts",{"_index":619,"title":{},"body":{"classes/CheckVerificationCodeDto.html":{},"coverage.html":{}}}],["src/sms/dto/checkverificationcode.dto.ts:6",{"_index":621,"title":{},"body":{"classes/CheckVerificationCodeDto.html":{}}}],["src/sms/sms.controller.ts",{"_index":1683,"title":{},"body":{"controllers/SmsController.html":{},"coverage.html":{}}}],["src/sms/sms.controller.ts:23",{"_index":1696,"title":{},"body":{"controllers/SmsController.html":{}}}],["src/sms/sms.controller.ts:34",{"_index":1692,"title":{},"body":{"controllers/SmsController.html":{}}}],["src/sms/sms.module.ts",{"_index":1714,"title":{},"body":{"modules/SmsModule.html":{}}}],["src/sms/sms.service.ts",{"_index":1716,"title":{},"body":{"injectables/SmsService.html":{},"coverage.html":{}}}],["src/sms/sms.service.ts:16",{"_index":1720,"title":{},"body":{"injectables/SmsService.html":{}}}],["src/sms/sms.service.ts:28",{"_index":1725,"title":{},"body":{"injectables/SmsService.html":{}}}],["src/sms/sms.service.ts:37",{"_index":1723,"title":{},"body":{"injectables/SmsService.html":{}}}],["src/sms/sms.service.ts:58",{"_index":1727,"title":{},"body":{"injectables/SmsService.html":{}}}],["src/stripe/stripe.module",{"_index":2006,"title":{},"body":{"modules/UserModule.html":{}}}],["src/stripe/stripe.module.ts",{"_index":1761,"title":{},"body":{"modules/StripeModule.html":{}}}],["src/stripe/stripe.service",{"_index":1065,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/UserService.html":{}}}],["src/stripe/stripe.service.ts",{"_index":1763,"title":{},"body":{"injectables/StripeService.html":{},"coverage.html":{}}}],["src/stripe/stripe.service.ts:100",{"_index":1779,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:12",{"_index":1772,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:20",{"_index":1782,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:27",{"_index":1777,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:42",{"_index":1775,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:49",{"_index":1787,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:57",{"_index":1791,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:75",{"_index":1784,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:93",{"_index":1789,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripewebhook/requestwithrawbody.interface.ts",{"_index":1670,"title":{},"body":{"interfaces/RequestWithRawBody.html":{},"coverage.html":{}}}],["src/stripewebhook/stripeevent.entity",{"_index":783,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/stripewebhook/stripeevent.entity.ts",{"_index":1755,"title":{},"body":{"entities/StripeEvent.html":{},"coverage.html":{}}}],["src/stripewebhook/stripeevent.entity.ts:6",{"_index":1757,"title":{},"body":{"entities/StripeEvent.html":{}}}],["src/stripewebhook/stripewebhook.controller.ts",{"_index":1830,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{}}}],["src/stripewebhook/stripewebhook.controller.ts:23",{"_index":1834,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["src/stripewebhook/stripewebhook.module.ts",{"_index":1854,"title":{},"body":{"modules/StripeWebhookModule.html":{}}}],["src/stripewebhook/stripewebhook.service.ts",{"_index":2220,"title":{},"body":{"coverage.html":{},"injectables/stripeWebhookService.html":{}}}],["src/stripewebhook/stripewebhook.service.ts:10",{"_index":2407,"title":{},"body":{"injectables/stripeWebhookService.html":{}}}],["src/stripewebhook/stripewebhook.service.ts:17",{"_index":2410,"title":{},"body":{"injectables/stripeWebhookService.html":{}}}],["src/stripewebhook/stripewebhook.service.ts:21",{"_index":2413,"title":{},"body":{"injectables/stripeWebhookService.html":{}}}],["src/subscriptions/subscriptions.controller.ts",{"_index":1859,"title":{},"body":{"controllers/SubscriptionsController.html":{},"coverage.html":{}}}],["src/subscriptions/subscriptions.controller.ts:12",{"_index":1865,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["src/subscriptions/subscriptions.controller.ts:20",{"_index":1868,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["src/subscriptions/subscriptions.module.ts",{"_index":1880,"title":{},"body":{"modules/SubscriptionsModule.html":{}}}],["src/subscriptions/subscriptions.service.ts",{"_index":2221,"title":{},"body":{"coverage.html":{},"injectables/subscriptionsService.html":{}}}],["src/subscriptions/subscriptions.service.ts:10",{"_index":2427,"title":{},"body":{"injectables/subscriptionsService.html":{}}}],["src/subscriptions/subscriptions.service.ts:16",{"_index":2429,"title":{},"body":{"injectables/subscriptionsService.html":{}}}],["src/subscriptions/subscriptions.service.ts:29",{"_index":2431,"title":{},"body":{"injectables/subscriptionsService.html":{}}}],["src/users/address.entity.ts",{"_index":29,"title":{},"body":{"entities/Address.html":{},"coverage.html":{}}}],["src/users/address.entity.ts:12",{"_index":38,"title":{},"body":{"entities/Address.html":{}}}],["src/users/address.entity.ts:15",{"_index":39,"title":{},"body":{"entities/Address.html":{}}}],["src/users/address.entity.ts:18",{"_index":46,"title":{},"body":{"entities/Address.html":{}}}],["src/users/address.entity.ts:6",{"_index":42,"title":{},"body":{"entities/Address.html":{}}}],["src/users/address.entity.ts:9",{"_index":43,"title":{},"body":{"entities/Address.html":{}}}],["src/users/dto/createuser.dto.ts",{"_index":651,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/createuser.dto.ts:2",{"_index":652,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/dto/createuser.dto.ts:3",{"_index":653,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/dto/createuser.dto.ts:4",{"_index":654,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/user.entity",{"_index":606,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/users/user.entity.ts",{"_index":1945,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:17",{"_index":1966,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:20",{"_index":1963,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:23",{"_index":1973,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:27",{"_index":1974,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:34",{"_index":1956,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:37",{"_index":1977,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:44",{"_index":1958,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:47",{"_index":1965,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:53",{"_index":1961,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:56",{"_index":1979,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:59",{"_index":1971,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:62",{"_index":1978,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:65",{"_index":1972,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:68",{"_index":1968,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:71",{"_index":1975,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:74",{"_index":1969,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:77",{"_index":1970,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.service",{"_index":1836,"title":{},"body":{"controllers/StripeWebhookController.html":{},"injectables/stripeWebhookService.html":{}}}],["src/users/user.service.ts",{"_index":2008,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/users/user.service.ts:111",{"_index":2033,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/user.service.ts:119",{"_index":2047,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/user.service.ts:127",{"_index":2041,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/user.service.ts:148",{"_index":2057,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/user.service.ts:155",{"_index":2049,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/user.service.ts:169",{"_index":2055,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/user.service.ts:175",{"_index":2059,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/user.service.ts:18",{"_index":2027,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/user.service.ts:181",{"_index":2061,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/user.service.ts:187",{"_index":2063,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/user.service.ts:199",{"_index":2051,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/user.service.ts:208",{"_index":2053,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/user.service.ts:219",{"_index":2037,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/user.service.ts:28",{"_index":2043,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/user.service.ts:42",{"_index":2045,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/user.service.ts:52",{"_index":2035,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/user.service.ts:65",{"_index":2031,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/user.service.ts:78",{"_index":2039,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/users.controller.ts",{"_index":2112,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:26",{"_index":2116,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:39",{"_index":2122,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:46",{"_index":2119,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:59",{"_index":2128,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:73",{"_index":2125,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":2001,"title":{},"body":{"modules/UserModule.html":{}}}],["src/utils/exceptionslogger.filter.ts",{"_index":948,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{},"coverage.html":{}}}],["src/utils/exceptionslogger.filter.ts:5",{"_index":952,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["src/utils/excludenull.interceptor.ts",{"_index":958,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{}}}],["src/utils/excludenull.interceptor.ts:13",{"_index":964,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["src/utils/findoneparams",{"_index":2131,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/utils/findoneparams.ts",{"_index":1022,"title":{},"body":{"classes/FindOneParams.html":{},"coverage.html":{}}}],["src/utils/findoneparams.ts:5",{"_index":1024,"title":{},"body":{"classes/FindOneParams.html":{}}}],["src/utils/getloglevels.ts",{"_index":2223,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/log.middlware.ts",{"_index":1203,"title":{},"body":{"injectables/LogsMiddleware.html":{},"coverage.html":{}}}],["src/utils/log.middlware.ts:6",{"_index":1209,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["src/utils/log.middlware.ts:7",{"_index":1207,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["src/utils/mocks/config.service.ts",{"_index":2224,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/mocks/jwt.service.ts",{"_index":2226,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/rawbody.middleware.ts",{"_index":2228,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/recursivelystripnullvalues.ts",{"_index":2230,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/runincluster.ts",{"_index":2231,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/stripeerror.enum",{"_index":1794,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/utils/stripeerror.enum.ts",{"_index":2306,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/utils/types/objectwithid.dto",{"_index":649,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["src/utils/types/objectwithid.dto.ts",{"_index":1239,"title":{},"body":{"classes/ObjectWithDto.html":{},"coverage.html":{}}}],["src/utils/types/objectwithid.dto.ts:5",{"_index":1240,"title":{},"body":{"classes/ObjectWithDto.html":{}}}],["src/utils/types/paginationparam.ts",{"_index":1288,"title":{},"body":{"classes/PaginationParams.html":{},"coverage.html":{}}}],["src/utils/types/paginationparam.ts:15",{"_index":1295,"title":{},"body":{"classes/PaginationParams.html":{}}}],["src/utils/types/paginationparam.ts:21",{"_index":1293,"title":{},"body":{"classes/PaginationParams.html":{}}}],["src/utils/types/paginationparam.ts:9",{"_index":1296,"title":{},"body":{"classes/PaginationParams.html":{}}}],["srtategy",{"_index":1150,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{}}}],["stack",{"_index":703,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["start",{"_index":2339,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":2342,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":2343,"title":{},"body":{"index.html":{}}}],["started",{"_index":2322,"title":{"index.html":{}},"body":{}}],["starter",{"_index":2332,"title":{},"body":{"index.html":{},"properties.html":{}}}],["startid",{"_index":1291,"title":{},"body":{"classes/PaginationParams.html":{},"injectables/PostSearchService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["statements",{"_index":2193,"title":{},"body":{"coverage.html":{}}}],["statuscode",{"_index":1214,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["statusmessage",{"_index":1215,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["stay",{"_index":2364,"title":{},"body":{"index.html":{}}}],["store",{"_index":1473,"title":{},"body":{"modules/PostsModule.html":{},"dependencies.html":{}}}],["strategy",{"_index":1158,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthentication.html":{},"injectables/LocalStrategy.html":{},"injectables/jwtStrategy.html":{}}}],["stream",{"_index":1258,"title":{},"body":{"controllers/OptimizeController.html":{},"injectables/PrivateFileService.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["stream.pipe(response",{"_index":1278,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["street",{"_index":34,"title":{},"body":{"entities/Address.html":{},"miscellaneous/variables.html":{}}}],["streetname",{"_index":2455,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string",{"_index":13,"title":{},"body":{"classes/AddCreditCardDto.html":{},"entities/Address.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthenticationServices.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"entities/Category.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"injectables/FileService.html":{},"classes/FindOneParams.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"entities/Message.html":{},"controllers/OptimizeController.html":{},"entities/Post.html":{},"interfaces/PostSearchBody.html":{},"injectables/PostSearchService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"entities/Product.html":{},"entities/ProductCategory.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"injectables/SmsService.html":{},"entities/StripeEvent.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"classes/createPostDto.html":{},"injectables/stripeWebhookService.html":{},"injectables/subscriptionsService.html":{},"classes/updatePostDto.html":{},"miscellaneous/variables.html":{},"interfaces/verificationTokenPayload.html":{}}}],["stringifyparameters",{"_index":738,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["stringifyparameters(parameters",{"_index":756,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["stripe",{"_index":1764,"title":{},"body":{"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"dependencies.html":{},"injectables/stripeWebhookService.html":{}}}],["stripe(configservice.get('stripe_secret_key",{"_index":1796,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripe.event",{"_index":2412,"title":{},"body":{"injectables/stripeWebhookService.html":{}}}],["stripe.service",{"_index":1762,"title":{},"body":{"modules/StripeModule.html":{}}}],["stripe.subscription",{"_index":2421,"title":{},"body":{"injectables/stripeWebhookService.html":{}}}],["stripe/stripe.module",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"modules/ChargeModule.html":{},"modules/CreditCardsModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscriptionsModule.html":{}}}],["stripe/stripe.service",{"_index":537,"title":{},"body":{"controllers/ChargeController.html":{},"controllers/CreditCardsController.html":{},"controllers/StripeWebhookController.html":{},"injectables/subscriptionsService.html":{}}}],["stripe_currency",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["stripe_customer_id",{"_index":2458,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stripe_secret_key",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["stripe_webhook_secret",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["stripecustomer",{"_index":2071,"title":{},"body":{"injectables/UserService.html":{}}}],["stripecustomer.id",{"_index":2076,"title":{},"body":{"injectables/UserService.html":{}}}],["stripecustomerid",{"_index":1953,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["stripeerror",{"_index":1793,"title":{},"body":{"injectables/StripeService.html":{},"miscellaneous/enumerations.html":{}}}],["stripeerror.invalidrequest",{"_index":1818,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripeerror.resourcemissing",{"_index":1822,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripeevent",{"_index":782,"title":{"entities/StripeEvent.html":{}},"body":{"modules/DatabaseModule.html":{},"entities/StripeEvent.html":{},"modules/StripeWebhookModule.html":{},"coverage.html":{},"injectables/stripeWebhookService.html":{}}}],["stripeevent.entity",{"_index":1856,"title":{},"body":{"modules/StripeWebhookModule.html":{},"injectables/stripeWebhookService.html":{}}}],["stripeinvalidrequesterror",{"_index":2308,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stripemodule",{"_index":89,"title":{"modules/StripeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChargeModule.html":{},"modules/CreditCardsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscriptionsModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["stripeservice",{"_index":536,"title":{"injectables/StripeService.html":{}},"body":{"controllers/ChargeController.html":{},"controllers/CreditCardsController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{},"injectables/subscriptionsService.html":{}}}],["stripewebhook.controller",{"_index":1855,"title":{},"body":{"modules/StripeWebhookModule.html":{}}}],["stripewebhook.service",{"_index":1839,"title":{},"body":{"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{}}}],["stripewebhook/requestwithrawbody.interface",{"_index":1837,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["stripewebhook/stripewebhook.module",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["stripewebhookcontroller",{"_index":1829,"title":{"controllers/StripeWebhookController.html":{}},"body":{"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"coverage.html":{}}}],["stripewebhookmodule",{"_index":90,"title":{"modules/StripeWebhookModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StripeWebhookModule.html":{},"modules.html":{},"overview.html":{}}}],["stripewebhookservice",{"_index":1838,"title":{"injectables/stripeWebhookService.html":{}},"body":{"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"coverage.html":{},"injectables/stripeWebhookService.html":{}}}],["subject",{"_index":858,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"injectables/EmailSchedulingService.html":{}}}],["subscribed",{"_index":2436,"title":{},"body":{"injectables/subscriptionsService.html":{}}}],["subscribemessage",{"_index":569,"title":{},"body":{"classes/ChatGateway.html":{}}}],["subscribemessage('request_all_messages",{"_index":565,"title":{},"body":{"classes/ChatGateway.html":{}}}],["subscribemessage('send_message",{"_index":561,"title":{},"body":{"classes/ChatGateway.html":{}}}],["subscriptions",{"_index":1860,"title":{},"body":{"controllers/SubscriptionsController.html":{},"injectables/subscriptionsService.html":{}}}],["subscriptions.controller",{"_index":1881,"title":{},"body":{"modules/SubscriptionsModule.html":{}}}],["subscriptions.data.length",{"_index":2434,"title":{},"body":{"injectables/subscriptionsService.html":{}}}],["subscriptions.data[0",{"_index":2439,"title":{},"body":{"injectables/subscriptionsService.html":{}}}],["subscriptions.service",{"_index":1870,"title":{},"body":{"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{}}}],["subscriptions/subscriptions.module",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["subscriptionscontroller",{"_index":1858,"title":{"controllers/SubscriptionsController.html":{}},"body":{"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"coverage.html":{}}}],["subscriptionsmodule",{"_index":91,"title":{"modules/SubscriptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SubscriptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["subscriptionsservice",{"_index":1869,"title":{"injectables/subscriptionsService.html":{}},"body":{"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"coverage.html":{},"injectables/subscriptionsService.html":{}}}],["subscriptionstatus",{"_index":2423,"title":{},"body":{"injectables/stripeWebhookService.html":{}}}],["super",{"_index":1161,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/jwtStrategy.html":{}}}],["super(`post",{"_index":503,"title":{},"body":{"classes/CategoriesNotFoundException.html":{},"classes/PostNotFoundException.html":{}}}],["super(context",{"_index":718,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.catch(exception",{"_index":956,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["super.debug.apply(this",{"_index":727,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.error.apply(this",{"_index":725,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.log.apply(this",{"_index":723,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.trackby(context",{"_index":1107,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["super.warn.apply(this",{"_index":726,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["support",{"_index":2357,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":2378,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":2460,"title":{},"body":{"miscellaneous/variables.html":{}}}],["synchronize",{"_index":794,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["sửa",{"_index":1374,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["t",{"_index":1379,"title":{},"body":{"injectables/PostSearchService.html":{},"controllers/PostsController.html":{}}}],["ta",{"_index":1994,"title":{},"body":{"entities/User.html":{}}}],["table",{"_index":2234,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2233,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1521,"title":{},"body":{"injectables/PostsService.html":{}}}],["test",{"_index":2346,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":2349,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2348,"title":{},"body":{"index.html":{}}}],["tests",{"_index":2345,"title":{},"body":{"index.html":{}}}],["text",{"_index":851,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/PostSearchService.html":{},"injectables/PostsService.html":{}}}],["th",{"_index":281,"title":{},"body":{"controllers/AuthenticationController.html":{},"entities/User.html":{}}}],["thanks",{"_index":2355,"title":{},"body":{"index.html":{}}}],["thay",{"_index":415,"title":{},"body":{"injectables/AuthenticationServices.html":{},"entities/User.html":{}}}],["this.appservice.gethello",{"_index":64,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authenticationservice.getauthenticateduser(email",{"_index":1188,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.authenticationservice.getcookieforlogout",{"_index":318,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken",{"_index":1916,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken(request.user.id",{"_index":322,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken(user.id",{"_index":301,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["this.authenticationservice.getcookiewithjwtrefreshtoken(user.id",{"_index":306,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["this.authenticationservice.getuserfromauthenticationtoken",{"_index":611,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.authenticationservice.register(registrationdata",{"_index":267,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.cachemanager.del(key",{"_index":1513,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.cachemanager.store.keys",{"_index":1510,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.categoriesrepository.create(category",{"_index":2183,"title":{},"body":{"injectables/categoriesService.html":{}}}],["this.categoriesrepository.find",{"_index":2176,"title":{},"body":{"injectables/categoriesService.html":{}}}],["this.categoriesrepository.findone",{"_index":2177,"title":{},"body":{"injectables/categoriesService.html":{}}}],["this.categoriesrepository.save(newcategory",{"_index":2184,"title":{},"body":{"injectables/categoriesService.html":{}}}],["this.categoriesrepository.softdelete(id",{"_index":2188,"title":{},"body":{"injectables/categoriesService.html":{}}}],["this.categoriesrepository.update(id",{"_index":2180,"title":{},"body":{"injectables/categoriesService.html":{}}}],["this.categoriesservice.createcategory(category",{"_index":491,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.deletecategory(number(id",{"_index":495,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.getallcategories",{"_index":487,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.getcategorybyid(number(id",{"_index":489,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.updatecategory(number(id",{"_index":493,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.chatservice.getallmessages",{"_index":581,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.chatservice.getuserfromsocket(socket",{"_index":574,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.chatservice.savemessage(content",{"_index":577,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.clearcache",{"_index":1535,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.configservice.get",{"_index":432,"title":{},"body":{"injectables/AuthenticationServices.html":{},"injectables/EmailConfirmationService.html":{},"injectables/SmsService.html":{}}}],["this.configservice.get('aws_public_bucket_name",{"_index":1009,"title":{},"body":{"injectables/FileService.html":{}}}],["this.configservice.get('google_auth_client_id",{"_index":1067,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.configservice.get('google_auth_client_secret",{"_index":1069,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.configservice.get('jwt_expiration_time')}s",{"_index":423,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["this.configservice.get('jwt_refresh_token_secret",{"_index":431,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["this.configservice.get('jwt_secret",{"_index":422,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["this.configservice.get('jwt_verification_token_secret",{"_index":848,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.configservice.get('monthly_subscription_price_id",{"_index":2432,"title":{},"body":{"injectables/subscriptionsService.html":{}}}],["this.configservice.get('stripe_currency",{"_index":1806,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get('stripe_webhook_secret",{"_index":1827,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get('twilio_verification_service_sid",{"_index":1745,"title":{},"body":{"injectables/SmsService.html":{}}}],["this.configservice.get('two_factor_authentication_app_name",{"_index":1935,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["this.connection.createqueryrunner",{"_index":2081,"title":{},"body":{"injectables/UserService.html":{}}}],["this.consfigservice.get('aws_private_bucket_name",{"_index":1572,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["this.count(text",{"_index":1369,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["this.createevent(event.id",{"_index":2417,"title":{},"body":{"injectables/stripeWebhookService.html":{}}}],["this.deletecategory(id",{"_index":2186,"title":{},"body":{"injectables/categoriesService.html":{}}}],["this.elasticsearchservice.count",{"_index":1365,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["this.elasticsearchservice.deletebyquery",{"_index":1393,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["this.elasticsearchservice.index",{"_index":1359,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["this.elasticsearchservice.search",{"_index":1371,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["this.elasticsearchservice.updatebyquery",{"_index":1403,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["this.emailconfirmationservice.confirmemail(email",{"_index":815,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["this.emailconfirmationservice.decodeconfirmationtoken",{"_index":813,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["this.emailconfirmationservice.resendconfirmationlink(request.user.id",{"_index":818,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["this.emailconfirmationservice.sendverificationlink",{"_index":268,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.emailschedulingservice.scheduleemail(emailschedule",{"_index":892,"title":{},"body":{"controllers/EmailModuleController.html":{}}}],["this.emailservice.sendmail",{"_index":857,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{}}}],["this.eventrepository.insert",{"_index":2416,"title":{},"body":{"injectables/stripeWebhookService.html":{}}}],["this.fileservice.deletepublicfile(fileid",{"_index":2090,"title":{},"body":{"injectables/UserService.html":{}}}],["this.fileservice.deletepublicfilewithqueryrunner",{"_index":2094,"title":{},"body":{"injectables/UserService.html":{}}}],["this.fileservice.uploadpublicfile",{"_index":2078,"title":{},"body":{"injectables/UserService.html":{}}}],["this.getbyid(userid",{"_index":2079,"title":{},"body":{"injectables/UserService.html":{}}}],["this.getcookieforuser(user",{"_index":1092,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.getposts(offset",{"_index":1523,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.getuserdata(token",{"_index":1080,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.googleauthenticationservice.authenticate(tokendata.token",{"_index":1038,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["this.handleregistereduser(user",{"_index":1075,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.imagequeue.add('optimize",{"_index":1265,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["this.imagequeue.getjob(id",{"_index":1270,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["this.index",{"_index":1360,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["this.jwtservice.sign(payload",{"_index":421,"title":{},"body":{"injectables/AuthenticationServices.html":{},"injectables/EmailConfirmationService.html":{}}}],["this.jwtservice.verify(token",{"_index":434,"title":{},"body":{"injectables/AuthenticationServices.html":{},"injectables/EmailConfirmationService.html":{}}}],["this.logger.debug(message",{"_index":766,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.logger.error",{"_index":762,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.logger.error(message",{"_index":1217,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["this.logger.log",{"_index":760,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.logger.log(message",{"_index":765,"title":{},"body":{"classes/DatabaseLogger.html":{},"injectables/LogsMiddleware.html":{}}}],["this.logger.warn",{"_index":764,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.logger.warn('tried",{"_index":1528,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.logger.warn(message",{"_index":767,"title":{},"body":{"classes/DatabaseLogger.html":{},"injectables/LogsMiddleware.html":{}}}],["this.logrepository.create(log",{"_index":1229,"title":{},"body":{"injectables/LogsService.html":{}}}],["this.logrepository.save(newlog",{"_index":1230,"title":{},"body":{"injectables/LogsService.html":{}}}],["this.logsservice",{"_index":722,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["this.logsservice.createlog",{"_index":724,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["this.messagesrepository.create",{"_index":614,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.messagesrepository.find",{"_index":616,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.messagesrepository.save(newmessage",{"_index":615,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.nodemailertransport",{"_index":939,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.nodemailertransport.sendmail(option",{"_index":946,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.oauthclient",{"_index":1070,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.oauthclient.gettokeninfo(token",{"_index":1073,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.oauthclient.setcredentials",{"_index":1085,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.postsrepository.count",{"_index":1517,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.create",{"_index":1532,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.delete(id",{"_index":1538,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.find",{"_index":1546,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findandcount",{"_index":1519,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findone",{"_index":1527,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.save(newpost",{"_index":1533,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.update(id",{"_index":1536,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postssearchservice.delete(id",{"_index":1540,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postssearchservice.indexpost(newpost",{"_index":1534,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postssearchservice.search",{"_index":1541,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postssearchservice.update(updatepost",{"_index":1537,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.createpost(post",{"_index":1457,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.deletepost(number(id",{"_index":1461,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getpostbyid(number(id",{"_index":1454,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getpostswithauthor(offset",{"_index":1451,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.searchforposts(search",{"_index":1450,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.updatepost(number(id",{"_index":1459,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.privatefilesrepository.create",{"_index":1573,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["this.privatefilesrepository.findone",{"_index":1576,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["this.privatefilesrepository.save(newfile",{"_index":1574,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["this.privatefilesservice.generatepresignedurl",{"_index":2105,"title":{},"body":{"injectables/UserService.html":{}}}],["this.privatefilesservice.getprivatefile(fileid",{"_index":2100,"title":{},"body":{"injectables/UserService.html":{}}}],["this.privatefilesservice.uploadprivatefile",{"_index":2099,"title":{},"body":{"injectables/UserService.html":{}}}],["this.productcategoriesrepository.create(category",{"_index":2401,"title":{},"body":{"injectables/productCategoriesService.html":{}}}],["this.productcategoriesrepository.find",{"_index":2398,"title":{},"body":{"injectables/productCategoriesService.html":{}}}],["this.productcategoriesrepository.save(newproductcategory",{"_index":2402,"title":{},"body":{"injectables/productCategoriesService.html":{}}}],["this.productrepository.create(product",{"_index":1638,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.productrepository.find",{"_index":1636,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.productrepository.save(newproduct",{"_index":1639,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.productservice.createproductcategory(productcategory",{"_index":1612,"title":{},"body":{"controllers/ProductCategoriesController.html":{}}}],["this.productservice.getallproductcategories",{"_index":1610,"title":{},"body":{"controllers/ProductCategoriesController.html":{}}}],["this.productsservice.createproduct(product",{"_index":1648,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.getallproducts",{"_index":1647,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.publicfilerepository.create",{"_index":1012,"title":{},"body":{"injectables/FileService.html":{}}}],["this.publicfilerepository.delete",{"_index":1019,"title":{},"body":{"injectables/FileService.html":{}}}],["this.publicfilerepository.findone",{"_index":1016,"title":{},"body":{"injectables/FileService.html":{}}}],["this.publicfilerepository.save(newfile",{"_index":1015,"title":{},"body":{"injectables/FileService.html":{}}}],["this.reflector.get",{"_index":1101,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["this.registeruser(token",{"_index":1078,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.scheduleregistery.addcronjob",{"_index":923,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["this.sendverificationlink(user.email",{"_index":872,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.server.sockets.emit('receive_message",{"_index":578,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.smsservice.confirmphonenumber",{"_index":1707,"title":{},"body":{"controllers/SmsController.html":{}}}],["this.smsservice.initiatephonenumberverification",{"_index":1704,"title":{},"body":{"controllers/SmsController.html":{}}}],["this.stringifyparameters",{"_index":763,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.stringifyparameters(parameters",{"_index":761,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.stripe",{"_index":1795,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.customers.create",{"_index":1801,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.customers.update(customerid",{"_index":1814,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.paymentintents.create",{"_index":1802,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.paymentmethods.list",{"_index":1809,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.setupintents.create",{"_index":1808,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.subscriptions.create",{"_index":1820,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.subscriptions.list",{"_index":1825,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.webhooks.constructevent",{"_index":1828,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripeservice.attachcreditcard",{"_index":676,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["this.stripeservice.charge",{"_index":539,"title":{},"body":{"controllers/ChargeController.html":{}}}],["this.stripeservice.constructeventfrompayload",{"_index":1847,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.stripeservice.createcustomer",{"_index":2072,"title":{},"body":{"injectables/UserService.html":{}}}],["this.stripeservice.createcustomer(name",{"_index":2111,"title":{},"body":{"injectables/UserService.html":{}}}],["this.stripeservice.createsubscription(priceid",{"_index":2437,"title":{},"body":{"injectables/subscriptionsService.html":{}}}],["this.stripeservice.listcreditcards(request.user.stripecustomerid",{"_index":680,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["this.stripeservice.listsubscriptions",{"_index":2433,"title":{},"body":{"injectables/subscriptionsService.html":{}}}],["this.stripeservice.setdefaultcreditcard",{"_index":682,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["this.stripewebhookservice.processsubscriptionupdate(event",{"_index":1851,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.subscriptionsservice.createmonthlysubscription",{"_index":1874,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["this.subscriptionsservice.getmonthlysubscription",{"_index":1877,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["this.twilioclient",{"_index":1735,"title":{},"body":{"injectables/SmsService.html":{}}}],["this.twilioclient.messages.create",{"_index":1754,"title":{},"body":{"injectables/SmsService.html":{}}}],["this.twilioclient.verify",{"_index":1738,"title":{},"body":{"injectables/SmsService.html":{}}}],["this.twofactorauthenticationservice.generatetwofactorauthenticationsecret",{"_index":1909,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.twofactorauthenticationservice.istwofactorauthenticationcodevalid",{"_index":1912,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.twofactorauthenticationservice.pipeqrcodestream",{"_index":1910,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.userrepository.create",{"_index":2075,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone",{"_index":2068,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":2077,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.update",{"_index":2110,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.update(userid",{"_index":2080,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.addavatar",{"_index":2135,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.addprivatefile",{"_index":2142,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.create",{"_index":395,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["this.userservice.deletepublicavatar(request.user.id",{"_index":2140,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.getallprivatefiles(request.user.id",{"_index":2149,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.getbyemail(email",{"_index":411,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["this.userservice.getbyid(payload.userid",{"_index":436,"title":{},"body":{"injectables/AuthenticationServices.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/jwtStrategy.html":{}}}],["this.userservice.getprivatefile",{"_index":2144,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.getuserifrefreshtokenmatches",{"_index":1169,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["this.userservice.removerefreshtoken(request.user.id",{"_index":315,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.userservice.setcurrentrefreshtoken(refreshtoken",{"_index":307,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.userservice.setwofactorauthenticationsecret(secret",{"_index":1936,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["this.userservice.turnontwofactorauthentication(request.user.id",{"_index":1914,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.usersservice.createwithgoogle(email",{"_index":1082,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.usersservice.getbyemail(email",{"_index":859,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["this.usersservice.getbyid(userid",{"_index":871,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.usersservice.markemailasconfirmed(email",{"_index":863,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.usersservice.markphonenumberasconfirmed(userid",{"_index":1752,"title":{},"body":{"injectables/SmsService.html":{}}}],["this.usersservice.setcurrentrefreshtoken(refreshtoken",{"_index":1090,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.usersservice.updatemonthlysubscriptionstatus",{"_index":2425,"title":{},"body":{"injectables/stripeWebhookService.html":{}}}],["this.verifypassword(plaintextpassword",{"_index":412,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["thoát",{"_index":2087,"title":{},"body":{"injectables/UserService.html":{}}}],["throw",{"_index":402,"title":{},"body":{"injectables/AuthenticationServices.html":{},"injectables/ChatService.html":{},"injectables/EmailConfirmationService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/UserService.html":{},"injectables/categoriesService.html":{},"guards/emailConfirmationGuard.html":{},"injectables/stripeWebhookService.html":{},"injectables/subscriptionsService.html":{}}}],["thuộc",{"_index":253,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/PostsController.html":{}}}],["thêm",{"_index":295,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["thích",{"_index":289,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["thông",{"_index":293,"title":{},"body":{"controllers/AuthenticationController.html":{},"entities/User.html":{}}}],["thất",{"_index":2086,"title":{},"body":{"injectables/UserService.html":{}}}],["time",{"_index":753,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["tin",{"_index":294,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["title",{"_index":1303,"title":{},"body":{"entities/Post.html":{},"interfaces/PostSearchBody.html":{},"injectables/PostSearchService.html":{},"classes/createPostDto.html":{},"classes/updatePostDto.html":{}}}],["tofilestream",{"_index":1930,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["tofilestream(stream",{"_index":1937,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["token",{"_index":304,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationServices.html":{},"classes/ConfirmEmailDto.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/TokenVerificationDto.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["token.strategy",{"_index":342,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["token.strategy.ts",{"_index":1152,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["token.strategy.ts:13",{"_index":1154,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["token.strategy.ts:29",{"_index":1156,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["token=${token",{"_index":850,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["tokendata",{"_index":1032,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["tokenexpirederror",{"_index":868,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["tokeninfo",{"_index":1072,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["tokeninfo.email",{"_index":1074,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["tokenpayload",{"_index":386,"title":{"interfaces/TokenPayload.html":{}},"body":{"injectables/AuthenticationServices.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{},"injectables/jwtStrategy.html":{}}}],["tokenpayload.interface",{"_index":387,"title":{},"body":{"injectables/AuthenticationServices.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/jwtStrategy.html":{}}}],["tokenverificationdto",{"_index":1030,"title":{"classes/TokenVerificationDto.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"classes/TokenVerificationDto.html":{},"coverage.html":{}}}],["total",{"_index":1333,"title":{},"body":{"interfaces/PostSearchResult.html":{}}}],["touch",{"_index":2365,"title":{},"body":{"index.html":{}}}],["tr",{"_index":259,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/PostsController.html":{}}}],["trackby",{"_index":1096,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["trackby(context",{"_index":1097,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["transformer",{"_index":414,"title":{},"body":{"injectables/AuthenticationServices.html":{},"classes/CreateProductDto.html":{},"classes/PaginationParams.html":{},"entities/User.html":{},"dependencies.html":{}}}],["trong",{"_index":1526,"title":{},"body":{"injectables/PostsService.html":{}}}],["true",{"_index":795,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/LogsService.html":{},"entities/Post.html":{},"entities/Product.html":{},"injectables/StripeService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"entities/User.html":{},"injectables/UserService.html":{},"classes/createPostDto.html":{},"guards/emailConfirmationGuard.html":{},"classes/updatePostDto.html":{}}}],["true})@exclude",{"_index":1960,"title":{},"body":{"entities/User.html":{}}}],["true})@isnotempty",{"_index":2236,"title":{},"body":{"classes/createPostDto.html":{}}}],["true})@isnotempty()@isoptional",{"_index":2441,"title":{},"body":{"classes/updatePostDto.html":{}}}],["true})@joincolumn",{"_index":1955,"title":{},"body":{"entities/User.html":{}}}],["true})@jointable",{"_index":1308,"title":{},"body":{"entities/Post.html":{}}}],["truy",{"_index":1990,"title":{},"body":{"entities/User.html":{}}}],["try",{"_index":393,"title":{},"body":{"injectables/AuthenticationServices.html":{},"classes/DatabaseLogger.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/StripeService.html":{},"injectables/UserService.html":{},"injectables/stripeWebhookService.html":{}}}],["tránh",{"_index":284,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/UserService.html":{}}}],["trước",{"_index":1987,"title":{},"body":{"entities/User.html":{}}}],["ttl",{"_index":1477,"title":{},"body":{"modules/PostsModule.html":{}}}],["turnontwofactorauthentication",{"_index":1892,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{},"injectables/UserService.html":{}}}],["turnontwofactorauthentication(request",{"_index":1899,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["turnontwofactorauthentication(userid",{"_index":2060,"title":{},"body":{"injectables/UserService.html":{}}}],["twilio",{"_index":1729,"title":{},"body":{"injectables/SmsService.html":{},"dependencies.html":{}}}],["twilio(accountsid",{"_index":1736,"title":{},"body":{"injectables/SmsService.html":{}}}],["twilio_account_sid",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["twilio_auth_token",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["twilio_sender_phone_number",{"_index":179,"title":{},"body":{"modules/AppModule.html":{},"injectables/SmsService.html":{}}}],["twilio_verification_service_sid",{"_index":178,"title":{},"body":{"modules/AppModule.html":{},"injectables/SmsService.html":{}}}],["twilioclient",{"_index":1717,"title":{},"body":{"injectables/SmsService.html":{}}}],["twitter",{"_index":2370,"title":{},"body":{"index.html":{}}}],["two",{"_index":345,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["twofactor/twofactorauthentication.controller",{"_index":343,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["twofactor/twofactorauthentication.service",{"_index":344,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["twofactorauthentication.service",{"_index":1903,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["twofactorauthenticationcode",{"_index":1888,"title":{},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["twofactorauthenticationcodedto",{"_index":1886,"title":{"classes/TwoFactorAuthenticationCodeDto.html":{}},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{}}}],["twofactorauthenticationcontroller",{"_index":333,"title":{"controllers/TwoFactorAuthenticationController.html":{}},"body":{"modules/AuthenticationModule.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{}}}],["twofactorauthenticationsecret",{"_index":1954,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["twofactorauthenticationservice",{"_index":330,"title":{"injectables/TwoFactorAuthenticationService.html":{}},"body":{"modules/AuthenticationModule.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["type",{"_index":11,"title":{},"body":{"classes/AddCreditCardDto.html":{},"entities/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationServices.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"classes/CategoriesNotFoundException.html":{},"entities/Category.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailModuleController.html":{},"classes/EmailScheduleDto.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FileService.html":{},"classes/FindOneParams.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/ImageProcessor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"entities/Message.html":{},"classes/ObjectWithDto.html":{},"controllers/OptimizeController.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"interfaces/PostCountResult.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"injectables/PostSearchService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"entities/Product.html":{},"controllers/ProductCategoriesController.html":{},"entities/ProductCategory.html":{},"injectables/ProductService.html":{},"controllers/ProductsController.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"entities/StripeEvent.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscriptionsController.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/categoriesService.html":{},"coverage.html":{},"classes/createPostDto.html":{},"guards/emailConfirmationGuard.html":{},"miscellaneous/functions.html":{},"injectables/jwtStrategy.html":{},"injectables/productCategoriesService.html":{},"injectables/stripeWebhookService.html":{},"injectables/subscriptionsService.html":{},"classes/updatePostDto.html":{},"miscellaneous/variables.html":{},"interfaces/verificationTokenPayload.html":{}}}],["typeof",{"_index":864,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["typeorm",{"_index":48,"title":{},"body":{"entities/Address.html":{},"entities/Category.html":{},"injectables/ChatService.html":{},"classes/DatabaseLogger.html":{},"injectables/FileService.html":{},"entities/Log.html":{},"injectables/LogsService.html":{},"entities/Message.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"entities/Product.html":{},"entities/ProductCategory.html":{},"injectables/ProductService.html":{},"entities/PublicFile.html":{},"entities/StripeEvent.html":{},"entities/User.html":{},"injectables/UserService.html":{},"injectables/categoriesService.html":{},"dependencies.html":{},"injectables/productCategoriesService.html":{},"injectables/stripeWebhookService.html":{}}}],["typeormlogger",{"_index":731,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["typeormmodule",{"_index":523,"title":{},"body":{"modules/CategoryModule.html":{},"modules/ChatModule.html":{},"modules/DatabaseModule.html":{},"modules/FileModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/PrivateFilesModule.html":{},"modules/ProductCategoriesModule.html":{},"modules/ProductsModule.html":{},"modules/StripeWebhookModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([category",{"_index":526,"title":{},"body":{"modules/CategoryModule.html":{}}}],["typeormmodule.forfeature([log",{"_index":1202,"title":{},"body":{"modules/LoggerModule.html":{}}}],["typeormmodule.forfeature([message",{"_index":589,"title":{},"body":{"modules/ChatModule.html":{}}}],["typeormmodule.forfeature([postentity",{"_index":1474,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([privatefile",{"_index":1586,"title":{},"body":{"modules/PrivateFilesModule.html":{}}}],["typeormmodule.forfeature([product",{"_index":1651,"title":{},"body":{"modules/ProductsModule.html":{}}}],["typeormmodule.forfeature([productcategory",{"_index":1616,"title":{},"body":{"modules/ProductCategoriesModule.html":{}}}],["typeormmodule.forfeature([publicfile",{"_index":982,"title":{},"body":{"modules/FileModule.html":{}}}],["typeormmodule.forfeature([stripeevent",{"_index":1857,"title":{},"body":{"modules/StripeWebhookModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":2007,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":785,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types/bookproperties.interface",{"_index":1596,"title":{},"body":{"entities/Product.html":{}}}],["types/carproperties.interface",{"_index":1597,"title":{},"body":{"entities/Product.html":{}}}],["types/component",{"_index":2255,"title":{},"body":{"dependencies.html":{}}}],["types/cookie",{"_index":2258,"title":{},"body":{"dependencies.html":{}}}],["types/postcountbody.interface",{"_index":1356,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["types/postsearchresponse.interface",{"_index":1357,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["types/postssearchbody.interface",{"_index":1358,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["typescript",{"_index":2331,"title":{},"body":{"index.html":{},"properties.html":{}}}],["tài",{"_index":276,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["tác",{"_index":1377,"title":{},"body":{"injectables/PostSearchService.html":{},"injectables/PostsService.html":{}}}],["tính",{"_index":254,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/PostsController.html":{}}}],["tương",{"_index":288,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["tạo",{"_index":1992,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["tới",{"_index":273,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/LocalAuthentication.html":{}}}],["unauthorizedexception",{"_index":1063,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/UserService.html":{},"guards/emailConfirmationGuard.html":{}}}],["unauthorizedexception('confirm",{"_index":2297,"title":{},"body":{"guards/emailConfirmationGuard.html":{}}}],["unauthorizedexception('wrong",{"_index":1913,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["undefined",{"_index":312,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationServices.html":{},"injectables/HttpCacheInterceptor.html":{},"controllers/PostsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["unique",{"_index":1982,"title":{},"body":{"entities/User.html":{}}}],["uniqueviolation",{"_index":2304,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unit",{"_index":2344,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":211,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationServices.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CreditCardsController.html":{},"classes/DatabaseLogger.html":{},"injectables/EmailConfirmationService.html":{},"injectables/FileService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"injectables/PostSearchService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductService.html":{},"controllers/ProductsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/categoriesService.html":{},"injectables/jwtStrategy.html":{},"injectables/productCategoriesService.html":{},"injectables/subscriptionsService.html":{}}}],["up",{"_index":1824,"title":{},"body":{"injectables/StripeService.html":{}}}],["update",{"_index":1338,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["update(post",{"_index":1352,"title":{},"body":{"injectables/PostSearchService.html":{}}}],["updatecategory",{"_index":457,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/categoriesService.html":{}}}],["updatecategory(id",{"_index":2167,"title":{},"body":{"injectables/categoriesService.html":{}}}],["updatecategory(undefined",{"_index":471,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["updatecategorydto",{"_index":472,"title":{"classes/UpdateCategoryDto.html":{}},"body":{"controllers/CategoriesController.html":{},"classes/UpdateCategoryDto.html":{},"injectables/categoriesService.html":{},"coverage.html":{}}}],["updatedcategory",{"_index":2181,"title":{},"body":{"injectables/categoriesService.html":{}}}],["updatemonthlysubscriptionstatus",{"_index":2023,"title":{},"body":{"injectables/UserService.html":{}}}],["updatemonthlysubscriptionstatus(stripecustomerid",{"_index":2062,"title":{},"body":{"injectables/UserService.html":{}}}],["updatepost",{"_index":1411,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost(id",{"_index":1500,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost(undefined",{"_index":1423,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepostdto",{"_index":1424,"title":{"classes/updatePostDto.html":{}},"body":{"controllers/PostsController.html":{},"coverage.html":{},"classes/updatePostDto.html":{}}}],["upload",{"_index":1007,"title":{},"body":{"injectables/FileService.html":{},"injectables/PrivateFileService.html":{}}}],["uploadedfile",{"_index":2129,"title":{},"body":{"controllers/UsersController.html":{}}}],["uploadedfiles",{"_index":1252,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["uploadpostdto",{"_index":1431,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["uploadprivatefile",{"_index":1558,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["uploadprivatefile(databuffer",{"_index":1567,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["uploadpublicfile",{"_index":986,"title":{},"body":{"injectables/FileService.html":{}}}],["uploadpublicfile(databuffer",{"_index":995,"title":{},"body":{"injectables/FileService.html":{}}}],["uploadresult",{"_index":1006,"title":{},"body":{"injectables/FileService.html":{},"injectables/PrivateFileService.html":{}}}],["uploadresult.key",{"_index":1013,"title":{},"body":{"injectables/FileService.html":{},"injectables/PrivateFileService.html":{}}}],["uploadresult.location",{"_index":1014,"title":{},"body":{"injectables/FileService.html":{}}}],["url",{"_index":849,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"injectables/FileService.html":{},"entities/PublicFile.html":{},"injectables/UserService.html":{}}}],["use",{"_index":1204,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["use(req",{"_index":1205,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["usefactory",{"_index":183,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/PostsModule.html":{},"modules/SearchModule.html":{}}}],["useguards",{"_index":228,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailModuleController.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["useguards(emailconfirmationguard",{"_index":678,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["useguards(jwtauthenticationguard",{"_index":313,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailModuleController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtrefreshguard",{"_index":319,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtrefreshguard)@get('refresh",{"_index":217,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwttwofactorguard",{"_index":1455,"title":{},"body":{"controllers/PostsController.html":{}}}],["useguards(localauthentication",{"_index":271,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useinterceptors",{"_index":231,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors(anyfilesinterceptor",{"_index":1263,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":251,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["useinterceptors(excludenullinterceptor",{"_index":1446,"title":{},"body":{"controllers/PostsController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":2134,"title":{},"body":{"controllers/UsersController.html":{}}}],["useinterceptors(httpcacheinterceptor",{"_index":1440,"title":{},"body":{"controllers/PostsController.html":{}}}],["useinterceptors(httpcacheinterceptor)@cachekey(get_posts_cache_key)@cachettl(120)@get",{"_index":1421,"title":{},"body":{"controllers/PostsController.html":{}}}],["user",{"_index":36,"title":{"entities/User.html":{}},"body":{"entities/Address.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationServices.html":{},"injectables/ChatService.html":{},"modules/DatabaseModule.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/Message.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"interfaces/RequestWithUser.html":{},"injectables/TwoFactorAuthenticationService.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.address",{"_index":45,"title":{},"body":{"entities/Address.html":{}}}],["user.avatar?.id",{"_index":2082,"title":{},"body":{"injectables/UserService.html":{}}}],["user.currenthashedrefreshtoken",{"_index":2108,"title":{},"body":{"injectables/UserService.html":{}}}],["user.email",{"_index":1934,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["user.entity",{"_index":49,"title":{},"body":{"entities/Address.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.id",{"_index":308,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["user.isemailconfirmed",{"_index":860,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["user.isregisterwithgoogle",{"_index":1091,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["user.istwofactorauthenticationenabled",{"_index":310,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["user.password",{"_index":311,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationServices.html":{}}}],["user.service",{"_index":2003,"title":{},"body":{"modules/UserModule.html":{},"controllers/UsersController.html":{}}}],["user.twofactorauthenticationsecret",{"_index":1939,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["user@email.com",{"_index":2451,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdata",{"_index":1079,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/UserService.html":{}}}],["userdata.email",{"_index":2073,"title":{},"body":{"injectables/UserService.html":{}}}],["userdata.name",{"_index":1081,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/UserService.html":{}}}],["userid",{"_index":373,"title":{},"body":{"injectables/AuthenticationServices.html":{},"injectables/EmailConfirmationService.html":{},"injectables/SmsService.html":{},"interfaces/TokenPayload.html":{},"injectables/UserService.html":{}}}],["userinfoclient",{"_index":1083,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["userinfoclient.get",{"_index":1088,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["userinforesponse",{"_index":1087,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["userinforesponse.data",{"_index":1089,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["usermodule",{"_index":92,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/SmsModule.html":{},"modules/StripeWebhookModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":789,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/SearchModule.html":{}}}],["usernamefield",{"_index":1187,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userrepository",{"_index":2028,"title":{},"body":{"injectables/UserService.html":{}}}],["users",{"_index":2113,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":2004,"title":{},"body":{"modules/UserModule.html":{}}}],["users/address.entity",{"_index":771,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["users/user.entity",{"_index":770,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/LocalStrategy.html":{},"entities/Message.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"interfaces/RequestWithUser.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["users/user.service",{"_index":238,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationServices.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/SmsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/jwtStrategy.html":{}}}],["users/users.module",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/SmsModule.html":{},"modules/StripeWebhookModule.html":{}}}],["userscontroller",{"_index":2002,"title":{"controllers/UsersController.html":{}},"body":{"modules/UserModule.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["userservice",{"_index":237,"title":{"injectables/UserService.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationServices.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/SmsService.html":{},"controllers/StripeWebhookController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"injectables/jwtStrategy.html":{},"overview.html":{},"injectables/stripeWebhookService.html":{}}}],["usersservice",{"_index":834,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/SmsService.html":{},"injectables/stripeWebhookService.html":{}}}],["userwithfiles",{"_index":2102,"title":{},"body":{"injectables/UserService.html":{}}}],["userwithfiles.files.map(async",{"_index":2104,"title":{},"body":{"injectables/UserService.html":{}}}],["utils/excludenull.interceptor",{"_index":1433,"title":{},"body":{"controllers/PostsController.html":{}}}],["utils/findoneparams",{"_index":481,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{}}}],["utils/getloglevels",{"_index":714,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["utils/log.middlware",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["utils/types/paginationparam",{"_index":1434,"title":{},"body":{"controllers/PostsController.html":{}}}],["uuid",{"_index":1004,"title":{},"body":{"injectables/FileService.html":{},"injectables/PrivateFileService.html":{},"dependencies.html":{}}}],["v",{"_index":260,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationServices.html":{},"controllers/PostsController.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["v4",{"_index":1003,"title":{},"body":{"injectables/FileService.html":{},"injectables/PrivateFileService.html":{}}}],["validate",{"_index":1153,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/jwtStrategy.html":{}}}],["validate(email",{"_index":1184,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":1175,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{},"injectables/jwtStrategy.html":{}}}],["validate(request",{"_index":1155,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["validatenested",{"_index":648,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["validatenested()@type(undefined",{"_index":645,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["validationschema",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":21,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/EmailScheduleDto.html":{},"classes/FindOneParams.html":{},"classes/ObjectWithDto.html":{},"classes/PaginationParams.html":{},"classes/RegisterDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/createPostDto.html":{},"dependencies.html":{},"classes/updatePostDto.html":{}}}],["value",{"_index":372,"title":{},"body":{"injectables/AuthenticationServices.html":{},"classes/DatabaseLogger.html":{},"injectables/LogsMiddleware.html":{},"interfaces/PostSearchResult.html":{},"injectables/PostSearchService.html":{},"injectables/PostsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":2201,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2444,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verbose",{"_index":693,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["verbose(message",{"_index":707,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["verification",{"_index":1690,"title":{},"body":{"controllers/SmsController.html":{}}}],["verification')@useguards(jwtauthenticationguard",{"_index":1695,"title":{},"body":{"controllers/SmsController.html":{}}}],["verificationchecks.create",{"_index":1747,"title":{},"body":{"injectables/SmsService.html":{}}}],["verificationcode",{"_index":1722,"title":{},"body":{"injectables/SmsService.html":{}}}],["verificationdata",{"_index":1688,"title":{},"body":{"controllers/SmsController.html":{}}}],["verificationdata.code",{"_index":1709,"title":{},"body":{"controllers/SmsController.html":{}}}],["verifications.create",{"_index":1740,"title":{},"body":{"injectables/SmsService.html":{}}}],["verificationtokenpayload",{"_index":845,"title":{"interfaces/verificationTokenPayload.html":{}},"body":{"injectables/EmailConfirmationService.html":{},"coverage.html":{},"interfaces/verificationTokenPayload.html":{}}}],["verificationtokenpayload.interface",{"_index":846,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["verifypassword",{"_index":360,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["verifypassword(plaintextpassword",{"_index":380,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["version",{"_index":2403,"title":{},"body":{"properties.html":{}}}],["vi",{"_index":1743,"title":{},"body":{"injectables/SmsService.html":{}}}],["void",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/EmailSchedulingService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/LogsMiddleware.html":{}}}],["vấn",{"_index":1991,"title":{},"body":{"entities/User.html":{}}}],["warn",{"_index":694,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{}}}],["warn(message",{"_index":709,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["watch",{"_index":2340,"title":{},"body":{"index.html":{}}}],["webhook",{"_index":1831,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["webhooksecret",{"_index":1826,"title":{},"body":{"injectables/StripeService.html":{}}}],["website",{"_index":2368,"title":{},"body":{"index.html":{}}}],["websocketgateway",{"_index":570,"title":{},"body":{"classes/ChatGateway.html":{}}}],["websocketserver",{"_index":556,"title":{},"body":{"classes/ChatGateway.html":{}}}],["welcome",{"_index":852,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["went",{"_index":408,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["where.id",{"_index":1515,"title":{},"body":{"injectables/PostsService.html":{}}}],["world",{"_index":197,"title":{},"body":{"injectables/AppService.html":{}}}],["wrong",{"_index":409,"title":{},"body":{"injectables/AuthenticationServices.html":{}}}],["wsexception",{"_index":605,"title":{},"body":{"injectables/ChatService.html":{}}}],["wsexception('invalid",{"_index":612,"title":{},"body":{"injectables/ChatService.html":{}}}],["xóa",{"_index":283,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["yes",{"_index":701,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/PostSearchService.html":{},"injectables/PostsService.html":{}}}],["you'd",{"_index":2360,"title":{},"body":{"index.html":{}}}],["zip",{"_index":1120,"title":{},"body":{"classes/ImageProcessor.html":{},"dependencies.html":{}}}],["zip.addfile(filedata.originalname",{"_index":1142,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["zip.tobuffer",{"_index":1145,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["zoom",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoryModule.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"modules/CreditCardsModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FileModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/PrivateFilesModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscriptionsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AddCreditCardDto.html":{"url":"classes/AddCreditCardDto.html","title":"class - AddCreditCardDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddCreditCardDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/credit-cards/dto/addCreditCardDto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                paymentMethodId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        paymentMethodId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/credit-cards/dto/addCreditCardDto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class AddCreditCardDto {\n  @IsString()\n  @IsNotEmpty()\n  paymentMethodId: string;\n}\n\nexport default AddCreditCardDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Address.html":{"url":"entities/Address.html","title":"entity - Address","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Address\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/address.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                city\n                            \n                            \n                                    Public\n                                country\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                street\n                            \n                            \n                                    Public\n                                    Optional\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/address.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/address.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/address.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        street\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/address.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, user => user.address)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/address.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn, OneToOne } from 'typeorm';\nimport User from './user.entity';\n@Entity()\nclass Address {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public street: string;\n\n  @Column()\n  public city: string;\n\n  @Column()\n  public country: string;\n\n  @OneToOne(() => User, (user: User) => user.address)\n  public user?: User;\n}\n\nexport default Address;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nChargeModule\n\nChargeModule\n\nAppModule -->\n\nChargeModule->AppModule\n\n\n\n\n\nChatModule\n\nChatModule\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nCreditCardsModule\n\nCreditCardsModule\n\nAppModule -->\n\nCreditCardsModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmailConfirmationModule\n\nEmailConfirmationModule\n\nAppModule -->\n\nEmailConfirmationModule->AppModule\n\n\n\n\n\nEmailSchedulingModule\n\nEmailSchedulingModule\n\nAppModule -->\n\nEmailSchedulingModule->AppModule\n\n\n\n\n\nFileModule\n\nFileModule\n\nAppModule -->\n\nFileModule->AppModule\n\n\n\n\n\nGoogleAuthenticationModule\n\nGoogleAuthenticationModule\n\nAppModule -->\n\nGoogleAuthenticationModule->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nOptimizeModule\n\nOptimizeModule\n\nAppModule -->\n\nOptimizeModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPrivateFilesModule\n\nPrivateFilesModule\n\nAppModule -->\n\nPrivateFilesModule->AppModule\n\n\n\n\n\nProductCategoriesModule\n\nProductCategoriesModule\n\nAppModule -->\n\nProductCategoriesModule->AppModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nSearchModule\n\nSearchModule\n\nAppModule -->\n\nSearchModule->AppModule\n\n\n\n\n\nSmsModule\n\nSmsModule\n\nAppModule -->\n\nSmsModule->AppModule\n\n\n\n\n\nStripeModule\n\nStripeModule\n\nAppModule -->\n\nStripeModule->AppModule\n\n\n\n\n\nStripeWebhookModule\n\nStripeWebhookModule\n\nAppModule -->\n\nStripeWebhookModule->AppModule\n\n\n\n\n\nSubscriptionsModule\n\nSubscriptionsModule\n\nAppModule -->\n\nSubscriptionsModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                        \n                            CategoryModule\n                        \n                        \n                            ChargeModule\n                        \n                        \n                            ChatModule\n                        \n                        \n                            CreditCardsModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            EmailConfirmationModule\n                        \n                        \n                            EmailSchedulingModule\n                        \n                        \n                            FileModule\n                        \n                        \n                            GoogleAuthenticationModule\n                        \n                        \n                            LoggerModule\n                        \n                        \n                            OptimizeModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            PrivateFilesModule\n                        \n                        \n                            ProductCategoriesModule\n                        \n                        \n                            ProductsModule\n                        \n                        \n                            SearchModule\n                        \n                        \n                            SmsModule\n                        \n                        \n                            StripeModule\n                        \n                        \n                            StripeWebhookModule\n                        \n                        \n                            SubscriptionsModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { PostsModule } from './posts/posts.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport * as Joi from '@hapi/joi';\nimport { DatabaseModule } from './database/database.module';\nimport { UserModule } from './users/users.module';\nimport { AuthenticationModule } from './authentication/authentication.module';\nimport { CategoryModule } from './categories/category.module';\nimport { FileModule } from './files/files.module';\nimport { PrivateFilesModule } from './privateFiles/privateFiles.module';\nimport { SearchModule } from './search/search.module';\nimport { ProductCategoriesModule } from './productCategories/productCategories.module';\nimport { ProductsModule } from './products/products.module';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { EmailSchedulingModule } from './emaillScheduling/emailScheduling.module';\nimport { ChatModule } from './chat/chat.module';\nimport { BullModule } from '@nestjs/bull';\nimport { OptimizeModule } from './optimize/optimize.module';\nimport { StripeModule } from './stripe/stripe.module';\nimport { ChargeModule } from './charge/charge.module';\nimport { CreditCardsModule } from './credit-cards/creditCards.module';\nimport { SubscriptionsModule } from './subscriptions/subscriptions.module';\nimport { StripeWebhookModule } from './stripeWebhook/stripeWebhook.module';\nimport { EmailConfirmationModule } from './emailConfirmation/emailConfirmation.module';\nimport { SmsModule } from './sms/sms.module';\nimport { GoogleAuthenticationModule } from './googleAuthentication/googleAuthentication.module';\nimport LogsMiddleware from './utils/log.middlware';\nimport { LoggerModule } from './logger/logger.module';\n@Module({\n  imports: [\n    ScheduleModule.forRoot(),\n    PostsModule,\n    ConfigModule.forRoot({\n      validationSchema: Joi.object({\n        POSTGRES_HOST: Joi.string().required(),\n        POSTGRES_PORT: Joi.number().required(),\n        POSTGRES_USER: Joi.string().required(),\n        POSTGRES_PASSWORD: Joi.string().required(),\n        POSTGRES_DB: Joi.string().required(),\n        PORT: Joi.number(),\n        JWT_SECRET: Joi.string().required(),\n        JWT_EXPIRATION_TIME: Joi.string().required(),\n        JWT_REFRESH_TOKEN_SECRET: Joi.string().required(),\n        JWT_REFRESH_TOKEN_EXPIRATION_TIME: Joi.string().required(),\n        AWS_REGION: Joi.string().required(),\n        AWS_ACCESS_KEY_ID: Joi.string().required(),\n        AWS_SECRET_ACCESS_KEY: Joi.string().required(),\n        AWS_PUBLIC_BUCKET_NAME: Joi.string().required(),\n        REDIS_HOST: Joi.string().required(),\n        REDIS_PORT: Joi.string().required(),\n        EMAIL_SERVICE: Joi.string().required(),\n        EMAIL_USER: Joi.string().required(),\n        EMAIL_PASSWORD: Joi.string().required(),\n        STRIPE_SECRET_KEY: Joi.string(),\n        STRIPE_CURRENCY: Joi.string(),\n        FRONTEND_URL: Joi.string(),\n        MONTHLY_SUBSCRIPTION_PRICE_ID: Joi.string(),\n        STRIPE_WEBHOOK_SECRET: Joi.string(),\n        JWT_VERIFICATION_TOKEN_SECRET: Joi.string().required(),\n        JWT_VERIFICATION_TOKEN_EXPIRATION_TIME: Joi.string().required(),\n        EMAIL_CONFIRMATION_URL: Joi.string().required(),\n        TWILIO_ACCOUNT_SID: Joi.string().required(),\n        TWILIO_AUTH_TOKEN: Joi.string().required(),\n        TWILIO_VERIFICATION_SERVICE_SID: Joi.string().required(),\n        TWILIO_SENDER_PHONE_NUMBER: Joi.string().required(),\n        GOOGLE_AUTH_CLIENT_ID: Joi.string().required(),\n        GOOGLE_AUTH_CLIENT_SECRET: Joi.string().required(),\n      }),\n    }),\n    BullModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        redis: {\n          host: configService.get('REDIS_HOST'),\n          port: Number(configService.get('REDIS_PORT')),\n        },\n      }),\n      inject: [ConfigService],\n    }),\n    DatabaseModule,\n    UserModule,\n    AuthenticationModule,\n    CategoryModule,\n    FileModule,\n    PrivateFilesModule,\n    SearchModule,\n    ProductCategoriesModule,\n    ProductsModule,\n    EmailSchedulingModule,\n    ChatModule,\n    OptimizeModule,\n    StripeModule,\n    ChargeModule,\n    CreditCardsModule,\n    SubscriptionsModule,\n    StripeWebhookModule,\n    EmailConfirmationModule,\n    SmsModule,\n    GoogleAuthenticationModule,\n    LoggerModule\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(LogsMiddleware).forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthenticationController.html":{"url":"controllers/AuthenticationController.html","title":"controller - AuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                logIn\n                            \n                            \n                                    Async\n                                logOut\n                            \n                            \n                                refresh\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    logIn(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@UseGuards(LocalAuthentication)@Post('log-in')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('log-out')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refresh\n                        \n                    \n                \n            \n            \n                \nrefresh(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtRefreshGuard)@Get('refresh')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registrationData: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Req,\n  Controller,\n  Post,\n  HttpCode,\n  UseGuards,\n  Res,\n  SerializeOptions,\n  UseInterceptors,\n  ClassSerializerInterceptor,\n  Get,\n} from '@nestjs/common';\nimport { Response } from 'express';\nimport { EmailConfirmationService } from 'src/emailConfirmation/emailConfirmation.service';\nimport { UserService } from '../users/user.service';\nimport { AuthenticationServices } from './authentication.service';\nimport RegisterDto from './dto/register.dto';\nimport JwtAuthenticationGuard from './jwt-authentication.guard';\nimport JwtRefreshGuard from './jwt-refresh.guard';\nimport { LocalAuthentication } from './localAuthentication.guard';\nimport RequestWithUser from './requestWithUser.interface';\n\n@Controller('authentication')\n@UseInterceptors(ClassSerializerInterceptor) // những thuộc tính có @Exclude() sẽ không được trả về\nexport class AuthenticationController {\n  constructor(\n    private readonly authenticationService: AuthenticationServices,\n    private readonly userService: UserService,\n    private readonly emailConfirmationService: EmailConfirmationService,\n  ) {}\n\n  @Post('register')\n  async register(@Body() registrationData: RegisterDto) {\n    const user = await this.authenticationService.register(registrationData);\n    await this.emailConfirmationService.sendVerificationLink(\n      registrationData.email,\n    );\n    return user;\n  }\n\n  @HttpCode(200)\n  @UseGuards(LocalAuthentication) // gọi tới LocalStategy => nếu tài khoản và mật khẩu đúng thì trẻ về user\n  @Post('log-in')\n  async logIn(@Req() request: RequestWithUser) {\n    //Xóa response: Response để tránh mất khả năng tương thích nest như interceptors,decorators.\n    // Thông tin thêm https://docs.nestjs.com/controllers#library-specific-approach\n    const user = request.user;\n    const accessTokenCookie =\n      this.authenticationService.getCookieWithJwtAccessToken(user.id);\n    const { cookie: refreshTokenCookie, token: refreshToken } =\n      this.authenticationService.getCookieWithJwtRefreshToken(user.id);\n\n    await this.userService.setCurrentRefreshToken(refreshToken, user.id);\n    request.res.setHeader('Set-Cookie', [\n      accessTokenCookie,\n      refreshTokenCookie,\n    ]);\n    if (user.isTwoFactorAuthenticationEnabled) {\n      return;\n    }\n    // user.password = undefined;\n    return user;\n  }\n\n  @Post('log-out')\n  @UseGuards(JwtAuthenticationGuard)\n  async logOut(@Req() request: RequestWithUser) {\n    await this.userService.removeRefreshToken(request.user.id);\n    request.res.setHeader(\n      'Set-Cookie',\n      this.authenticationService.getCookieForLogout(),\n    );\n  }\n\n  @UseGuards(JwtRefreshGuard)\n  @Get('refresh')\n  refresh(@Req() request: RequestWithUser) {\n    const accessTokenCookie =\n      this.authenticationService.getCookieWithJwtAccessToken(request.user.id);\n    request.res.setHeader('Set-Cookie', accessTokenCookie);\n    return request.user;\n  }\n}\n\nexport default AuthenticationController;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthenticationModule.html":{"url":"modules/AuthenticationModule.html","title":"module - AuthenticationModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthenticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_imports\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_AuthenticationModule_exports\n\n\n\n\nEmailConfirmationModule\n\nEmailConfirmationModule\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\nAuthenticationModule -->\n\nEmailConfirmationModule->AuthenticationModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthenticationModule -->\n\nUserModule->AuthenticationModule\n\n\n\n\n\nAuthenticationServices \n\nAuthenticationServices \n\nAuthenticationServices  -->\n\nAuthenticationModule->AuthenticationServices \n\n\n\n\n\nAuthenticationServices\n\nAuthenticationServices\n\nAuthenticationModule -->\n\nAuthenticationServices->AuthenticationModule\n\n\n\n\n\nJwtRefreshTokenStrategy\n\nJwtRefreshTokenStrategy\n\nAuthenticationModule -->\n\nJwtRefreshTokenStrategy->AuthenticationModule\n\n\n\n\n\nJwtTwoFactorStrategy\n\nJwtTwoFactorStrategy\n\nAuthenticationModule -->\n\nJwtTwoFactorStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\nTwoFactorAuthenticationService\n\nTwoFactorAuthenticationService\n\nAuthenticationModule -->\n\nTwoFactorAuthenticationService->AuthenticationModule\n\n\n\n\n\njwtStrategy\n\njwtStrategy\n\nAuthenticationModule -->\n\njwtStrategy->AuthenticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/authentication/authentication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticationServices\n                        \n                        \n                            JwtRefreshTokenStrategy\n                        \n                        \n                            JwtTwoFactorStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            TwoFactorAuthenticationService\n                        \n                        \n                            jwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthenticationController\n                        \n                        \n                            TwoFactorAuthenticationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailConfirmationModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthenticationServices\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthenticationServices } from './authentication.service';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './local.strategy';\nimport { UserModule } from '../users/users.module';\nimport AuthenticationController from './authentication.controller';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwtStrategy } from './jwt.strategy';\nimport { JwtRefreshTokenStrategy } from './jwt-refresh-token.strategy';\nimport { TwoFactorAuthenticationController } from './twoFactor/twoFactorAuthentication.controller';\nimport { TwoFactorAuthenticationService } from './twoFactor/twoFactorAuthentication.service';\nimport { JwtTwoFactorStrategy } from './jwt-two-factor.strategy';\nimport { EmailConfirmationModule } from 'src/emailConfirmation/emailConfirmation.module';\n\n@Module({\n  imports: [\n    UserModule,\n    PassportModule,\n    ConfigModule,\n    EmailConfirmationModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: {\n          expiresIn: `${configService.get('JWT_EXPIRATION_TIME')}s`,\n        },\n      }),\n    }),\n  ],\n  providers: [\n    AuthenticationServices,\n    LocalStrategy,\n    jwtStrategy,\n    JwtRefreshTokenStrategy,\n    TwoFactorAuthenticationService,\n    JwtTwoFactorStrategy,\n  ],\n  controllers: [AuthenticationController, TwoFactorAuthenticationController],\n  exports: [AuthenticationServices],\n})\nexport class AuthenticationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationServices.html":{"url":"injectables/AuthenticationServices.html","title":"injectable - AuthenticationServices","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationServices\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getAuthenticatedUser\n                            \n                            \n                                    Public\n                                getCookieForLogout\n                            \n                            \n                                    Public\n                                getCookieWithJwtAccessToken\n                            \n                            \n                                    Public\n                                getCookieWithJwtRefreshToken\n                            \n                            \n                                    Public\n                                    Async\n                                getUserFromAuthenticationToken\n                            \n                            \n                                    Public\n                                    Async\n                                register\n                            \n                            \n                                    Private\n                                    Async\n                                verifyPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/authentication.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAuthenticatedUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAuthenticatedUser(email: string, plainTextPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieForLogout\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieForLogout()\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieWithJwtAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtAccessToken(userId: number, isSecondFactorAuthenticated)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    isSecondFactorAuthenticated\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieWithJwtRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtRefreshToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { cookie: string; token: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getUserFromAuthenticationToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserFromAuthenticationToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registrationData: RegisterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        verifyPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyPassword(plainTextPassword: string, hashedPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hashedPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { UserService } from '../users/user.service';\nimport RegisterDto from './dto/register.dto';\nimport * as bcrypt from 'bcrypt';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport TokenPayload from './tokenPayload.interface';\nimport PosgresErrorCode from '../database/posgresErrorCodes.enum';\n\n@Injectable()\nexport class AuthenticationServices {\n  constructor(\n    private readonly userService: UserService,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  public async register(registrationData: RegisterDto) {\n    const hashPassword = await bcrypt.hash(registrationData.password, 10);\n    try {\n      const createUser = await this.userService.create({\n        ...registrationData,\n        password: hashPassword,\n      });\n\n      // createUser.password = undefined;\n      return createUser;\n    } catch (error) {\n      if (error?.code === PosgresErrorCode.UniqueViolation) {\n        throw new HttpException(\n          'User with that email already exists',\n          HttpStatus.BAD_REQUEST,\n        );\n      }\n      throw new HttpException(\n        'Something went wrong' + error,\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  public async getAuthenticatedUser(email: string, plainTextPassword: string) {\n    try {\n      const user = await this.userService.getByEmail(email);\n      await this.verifyPassword(plainTextPassword, user.password);\n      // user.password = undefined; // Đã dùng @Exclude class-transformer thay vì\n\n      return user;\n    } catch (error) {\n      throw new HttpException(\n        'Wrong credentials provided',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n\n  private async verifyPassword(\n    plainTextPassword: string,\n    hashedPassword: string,\n  ) {\n    const isPasswordMatching = await bcrypt.compare(\n      plainTextPassword,\n      hashedPassword,\n    );\n    if (!isPasswordMatching) {\n      throw new HttpException(\n        'Wrong credentials provided',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n\n  public getCookieWithJwtAccessToken(\n    userId: number,\n    isSecondFactorAuthenticated = false,\n  ) {\n    const payload: TokenPayload = { userId, isSecondFactorAuthenticated };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_SECRET'),\n      expiresIn: `${this.configService.get('JWT_EXPIRATION_TIME')}s`,\n    });\n    return `Authentication=${token}; HttpOnly; Path=/;Max-Age=${this.configService.get(\n      'JWT_EXPIRATION_TIME',\n    )}`;\n  }\n\n  public getCookieForLogout() {\n    return [\n      `Authentication=; HttpOnly; Path=/; Max-Age=0`,\n      `Refresh=; HttpOnly; Path=/; Max-Age=0`,\n    ];\n  }\n\n  public getCookieWithJwtRefreshToken(userId: number) {\n    const payload: TokenPayload = { userId };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_REFRESH_TOKEN_SECRET'),\n      expiresIn: `${this.configService.get(\n        'JWT_REFRESH_TOKEN_EXPIRATION_TIME',\n      )}s`,\n    });\n    const cookie = `Refresh=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get(\n      'JWT_REFRESH_TOKEN_EXPIRATION_TIME',\n    )}`;\n    return {\n      cookie,\n      token,\n    };\n  }\n\n  public async getUserFromAuthenticationToken(token: string) {\n    const payload: TokenPayload = this.jwtService.verify(token, {\n      secret: this.configService.get('JWT_SECRET'),\n    });\n    if (payload.userId) {\n      return this.userService.getById(payload.userId);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BookProperties.html":{"url":"interfaces/BookProperties.html","title":"interface - BookProperties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BookProperties\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/types/bookProperties.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            brand\n                                        \n                                \n                                \n                                        \n                                            engine\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        brand\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        brand:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        engine\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        engine:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface BookProperties {\n  brand: string;\n  engine: {\n    fuel: string;\n    numberOfCylinders: number;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CarProperties.html":{"url":"interfaces/CarProperties.html","title":"interface - CarProperties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CarProperties\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/types/carProperties.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            authors\n                                        \n                                \n                                \n                                        \n                                            publicactionYear\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        authors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        authors:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        publicactionYear\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        publicactionYear:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface CarProperties {\n  authors: string[];\n  publicactionYear: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoriesController.html":{"url":"controllers/CategoriesController.html","title":"controller - CategoriesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoriesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/category.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                categories\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCategory\n                            \n                            \n                                    Async\n                                deleteCategory\n                            \n                            \n                                getAllCategories\n                            \n                            \n                                getCategoryById\n                            \n                            \n                                    Async\n                                updateCategory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCategory(category: CreateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/categories/category.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    category\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteCategory(undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/categories/category.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllCategories\n                        \n                    \n                \n            \n            \n                \ngetAllCategories()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/categories/category.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCategoryById\n                        \n                    \n                \n            \n            \n                \ngetCategoryById(undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/categories/category.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateCategory(undefined: FindOneParams, category: UpdateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/categories/category.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    category\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport JwtAuthenticationGuard from '../authentication/jwt-authentication.guard';\nimport FindOneParams from '../utils/findOneParams';\nimport { categoriesService } from './category.service';\nimport CreateCategoryDto from './dto/createCategory.dto';\nimport UpdateCategoryDto from './dto/updateCategory.dto';\n\n@Controller('categories')\nexport default class CategoriesController {\n  constructor(private readonly categoriesService: categoriesService) {}\n\n  @Get()\n  getAllCategories() {\n    return this.categoriesService.getAllCategories();\n  }\n\n  @Get(':id')\n  getCategoryById(@Param() { id }: FindOneParams) {\n    return this.categoriesService.getCategoryById(Number(id));\n  }\n\n  @Post()\n  @UseGuards(JwtAuthenticationGuard)\n  async createCategory(@Body() category: CreateCategoryDto) {\n    return this.categoriesService.createCategory(category);\n  }\n\n  @Patch(':id')\n  async updateCategory(\n    @Param() { id }: FindOneParams,\n    @Body() category: UpdateCategoryDto,\n  ) {\n    console.log(['id'], id);\n\n    return this.categoriesService.updateCategory(Number(id), category);\n  }\n\n  @Delete(':id')\n  async deleteCategory(@Param() { id }: FindOneParams) {\n    return this.categoriesService.deleteCategory(Number(id));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoriesNotFoundException.html":{"url":"classes/CategoriesNotFoundException.html","title":"class - CategoriesNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoriesNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/exception/categoriesNotFound.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoriesId: number)\n                    \n                \n                        \n                            \n                                Defined in src/categories/exception/categoriesNotFound.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoriesId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\nclass CategoriesNotFoundException extends NotFoundException {\n  constructor(categoriesId: number) {\n    super(`Post with id ${categoriesId} not found`);\n  }\n}\nexport default CategoriesNotFoundException;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Category.html":{"url":"entities/Category.html","title":"entity - Category","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/category.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                deletedAt\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/category.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/category.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/category.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.categories, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/category.entity.ts:15\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import Post from '../posts/post.entity';\nimport { Column, DeleteDateColumn, Entity, ManyToMany, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nclass Category {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public name: string;\n\n  @ManyToMany(() => Post, (post: Post) => post.categories, {\n    onDelete: 'CASCADE',\n  })\n  public posts: Post[];\n\n  @DeleteDateColumn()\n  public deletedAt: Date;\n}\n\nexport default Category;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoryModule.html":{"url":"modules/CategoryModule.html","title":"module - CategoryModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_providers\n\n\n\n\ncategoriesService\n\ncategoriesService\n\n\n\nCategoryModule\n\nCategoryModule\n\nCategoryModule -->\n\ncategoriesService->CategoryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/categories/category.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            categoriesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoriesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport CategoriesController from './category.controller';\nimport Category from './category.entity';\nimport { categoriesService } from './category.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Category])],\n  controllers: [CategoriesController],\n  providers: [categoriesService],\n})\nexport class CategoryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ChargeController.html":{"url":"controllers/ChargeController.html","title":"controller - ChargeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ChargeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/charge/charge.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                charge\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCharge\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCharge\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCharge(charge: CreateChargeDto, request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/charge/charge.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    charge\n                                    \n                                                CreateChargeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Req, UseGuards } from '@nestjs/common';\nimport JwtAuthenticationGuard from '../authentication/jwt-authentication.guard';\nimport { CreateChargeDto } from './dto/createCharge.dto';\nimport RequestWithUser from '../authentication/requestWithUser.interface';\nimport StripeService from '../stripe/stripe.service';\n\n@Controller('charge')\nexport default class ChargeController {\n  constructor(private readonly stripeService: StripeService) {}\n\n  @Post()\n  @UseGuards(JwtAuthenticationGuard)\n  async createCharge(\n    @Body() charge: CreateChargeDto,\n    @Req() request: RequestWithUser,\n  ) {\n    return await this.stripeService.charge(\n      charge.amount,\n      charge.paymentMethodId,\n      request.user.stripeCustomerId,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ChargeModule.html":{"url":"modules/ChargeModule.html","title":"module - ChargeModule","body":"\n                   \n\n\n\n\n    Modules\n    ChargeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ChargeModule\n\n\n\ncluster_ChargeModule_imports\n\n\n\n\nStripeModule\n\nStripeModule\n\n\n\nChargeModule\n\nChargeModule\n\nChargeModule -->\n\nStripeModule->ChargeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/charge/charge.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            ChargeController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StripeModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { StripeModule } from '../stripe/stripe.module';\nimport ChargeController from './charge.controller';\n\n@Module({\n  imports: [StripeModule],\n  controllers: [ChargeController],\n  providers: [],\n})\nexport class ChargeModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChatGateway.html":{"url":"classes/ChatGateway.html","title":"class - ChatGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChatGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/chat.gateway.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleConnection\n                            \n                            \n                                    Async\n                                listenForMessages\n                            \n                            \n                                    Async\n                                requestAllMessages\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(chatService: ChatService)\n                    \n                \n                        \n                            \n                                Defined in src/chat/chat.gateway.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        chatService\n                                                  \n                                                        \n                                                                        ChatService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chat/chat.gateway.ts:14\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleConnection\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleConnection(socket: Socket)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.gateway.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listenForMessages\n                        \n                    \n                \n            \n            \n                \n                    \n                    listenForMessages(content: string, socket: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('send_message')\n                \n            \n\n            \n                \n                    Defined in src/chat/chat.gateway.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        requestAllMessages\n                        \n                    \n                \n            \n            \n                \n                    \n                    requestAllMessages(socket: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('request_all_messages')\n                \n            \n\n            \n                \n                    Defined in src/chat/chat.gateway.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ConnectedSocket,\n  MessageBody,\n  SubscribeMessage,\n  WebSocketGateway,\n  WebSocketServer,\n} from '@nestjs/websockets';\nimport { Server, Socket } from 'socket.io';\nimport { ChatService } from './chat.service';\n\n@WebSocketGateway()\nexport class ChatGateway {\n  @WebSocketServer()\n  server: Server;\n  constructor(private readonly chatService: ChatService) {}\n\n  async handleConnection(socket: Socket) {\n    await this.chatService.getUserFromSocket(socket);\n  }\n\n  @SubscribeMessage('send_message')\n  async listenForMessages(\n    @MessageBody() content: string,\n    @ConnectedSocket() socket: Socket,\n  ) {\n    const author = await this.chatService.getUserFromSocket(socket);\n    const message = await this.chatService.saveMessage(content, author);\n    this.server.sockets.emit('receive_message', message);\n    return message;\n  }\n\n  @SubscribeMessage('request_all_messages')\n  async requestAllMessages(@ConnectedSocket() socket: Socket) {\n    await this.chatService.getUserFromSocket(socket);\n    const messages = await this.chatService.getAllMessages();\n    socket.emit('send_all_messages', messages);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ChatModule.html":{"url":"modules/ChatModule.html","title":"module - ChatModule","body":"\n                   \n\n\n\n\n    Modules\n    ChatModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ChatModule\n\n\n\ncluster_ChatModule_providers\n\n\n\ncluster_ChatModule_imports\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nChatModule\n\nChatModule\n\nChatModule -->\n\nAuthenticationModule->ChatModule\n\n\n\n\n\nChatService\n\nChatService\n\nChatModule -->\n\nChatService->ChatModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/chat/chat.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ChatService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ChatGateway } from './chat.gateway';\nimport { AuthenticationModule } from '../authentication/authentication.module';\nimport { ChatService } from './chat.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport Message from './message.entity';\n\n@Module({\n  imports: [\n    AuthenticationModule,\n    TypeOrmModule.forFeature([Message]),\n  ],\n  controllers: [],\n  providers: [ChatGateway, ChatService],\n})\nexport class ChatModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChatService.html":{"url":"injectables/ChatService.html","title":"injectable - ChatService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ChatService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/chat.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAllMessages\n                            \n                            \n                                    Async\n                                getUserFromSocket\n                            \n                            \n                                    Async\n                                saveMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authenticationService: AuthenticationServices, messagesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/chat/chat.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                        AuthenticationServices\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        messagesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllMessages\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserFromSocket\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserFromSocket(socket: Socket)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveMessage(content: string, author: User)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    author\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthenticationServices } from '../authentication/authentication.service';\nimport { Socket } from 'socket.io';\nimport { parse } from 'cookie';\nimport { WsException } from '@nestjs/websockets';\nimport User from 'src/users/user.entity';\nimport { Repository } from 'typeorm';\nimport Message from './message.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class ChatService {\n  constructor(\n    private readonly authenticationService: AuthenticationServices,\n    @InjectRepository(Message)\n    private messagesRepository: Repository,\n  ) {}\n\n  async getUserFromSocket(socket: Socket) {\n    const cookie = socket.handshake.headers.cookie;\n    const { Authentication: authenticationToken } = parse(cookie);\n    const user =\n      await this.authenticationService.getUserFromAuthenticationToken(\n        authenticationToken,\n      );\n    if (!user) {\n      throw new WsException('Invalid credentials');\n    }\n    return user;\n  }\n\n  async saveMessage(content: string, author: User) {\n    const newMessage = await this.messagesRepository.create({\n      content,\n      author,\n    });\n\n    await this.messagesRepository.save(newMessage);\n    return newMessage;\n  }\n\n  async getAllMessages() {\n    return this.messagesRepository.find({\n      relations: ['author'],\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CheckVerificationCodeDto.html":{"url":"classes/CheckVerificationCodeDto.html","title":"class - CheckVerificationCodeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CheckVerificationCodeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sms/dto/checkVerificationCode.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sms/dto/checkVerificationCode.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class CheckVerificationCodeDto {\n  @IsString()\n  @IsNotEmpty()\n  code: string;\n}\n\nexport default CheckVerificationCodeDto;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfirmEmailDto.html":{"url":"classes/ConfirmEmailDto.html","title":"class - ConfirmEmailDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfirmEmailDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emailConfirmation/dto/confirmEmail.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emailConfirmation/dto/confirmEmail.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class ConfirmEmailDto {\n  @IsString()\n  @IsNotEmpty()\n  token: string;\n}\n\nexport default ConfirmEmailDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDto.html":{"url":"classes/CreateCategoryDto.html","title":"class - CreateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/dto/createCategory.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dto/createCategory.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class CreateCategoryDto {\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n}\n\nexport default CreateCategoryDto;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateChargeDto.html":{"url":"classes/CreateChargeDto.html","title":"class - CreateChargeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateChargeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/charge/dto/createCharge.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                amount\n                            \n                            \n                                paymentMethodId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/charge/dto/createCharge.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        paymentMethodId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/charge/dto/createCharge.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsNumber } from 'class-validator';\n\nexport class CreateChargeDto {\n  @IsString()\n  @IsNotEmpty()\n  paymentMethodId: string;\n\n  @IsNumber()\n  amount: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateLogDto.html":{"url":"classes/CreateLogDto.html","title":"class - CreateLogDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateLogDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/dto/createLog.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                context\n                            \n                            \n                                level\n                            \n                            \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/logger/dto/createLog.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/logger/dto/createLog.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/logger/dto/createLog.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateLogDto {\n  context: string;\n  message: string;\n  level: string;\n}\n\nexport default CreateLogDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductCategoryDto.html":{"url":"classes/CreateProductCategoryDto.html","title":"class - CreateProductCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/productCategories/dto/createProductCategory.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/productCategories/dto/createProductCategory.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class CreateProductCategoryDto {\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductDto.html":{"url":"classes/CreateProductDto.html","title":"class - CreateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dto/createProduct.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                category\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ObjectWithDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/createProduct.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/createProduct.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, ValidateNested } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport ObjectWithDto from 'src/utils/types/objectWithId.dto';\n\nexport class CreateProductDto {\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @ValidateNested()\n  @Type(() => ObjectWithDto)\n  category: ObjectWithDto;\n}\n\nexport default CreateProductDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/createUser.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/createUser.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/createUser.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/createUser.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateUserDto {\n  email: string;\n  name: string;\n  password: string;\n}\nexport default CreateUserDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CreditCardsController.html":{"url":"controllers/CreditCardsController.html","title":"controller - CreditCardsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CreditCardsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/credit-cards/creditCards.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                credit-cards\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCreditCard\n                            \n                            \n                                    Async\n                                getCreditCards\n                            \n                            \n                                    Async\n                                setDefaultCard\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addCreditCard\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCreditCard(creditCard: AddCreditCardDto, request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/credit-cards/creditCards.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    creditCard\n                                    \n                                                AddCreditCardDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCreditCards\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCreditCards(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(emailConfirmationGuard)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/credit-cards/creditCards.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setDefaultCard\n                        \n                    \n                \n            \n            \n                \n                    \n                    setDefaultCard(creditCard: SetDefaultCreditCardDto, request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('default')@HttpCode(200)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/credit-cards/creditCards.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    creditCard\n                                    \n                                                SetDefaultCreditCardDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  Post,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport emailConfirmationGuard from 'src/emailConfirmation/emailConfirmation.guard';\nimport JwtAuthenticationGuard from '../authentication/jwt-authentication.guard';\nimport RequestWithUser from '../authentication/requestWithUser.interface';\nimport StripeService from '../stripe/stripe.service';\nimport AddCreditCardDto from './dto/addCreditCardDto';\nimport SetDefaultCreditCardDto from './dto/setDefaultCreditCard.dto';\n\n@Controller('credit-cards')\nexport default class CreditCardsController {\n  constructor(private readonly stripeService: StripeService) {}\n\n  @Post()\n  @UseGuards(JwtAuthenticationGuard)\n  async addCreditCard(\n    @Body() creditCard: AddCreditCardDto,\n    @Req() request: RequestWithUser,\n  ) {\n    return this.stripeService.attachCreditCard(\n      creditCard.paymentMethodId,\n      request.user.stripeCustomerId,\n    );\n  }\n\n  @Get()\n  @UseGuards(emailConfirmationGuard)\n  @UseGuards(JwtAuthenticationGuard)\n  async getCreditCards(@Req() request: RequestWithUser) {\n    return this.stripeService.listCreditCards(request.user.stripeCustomerId);\n  }\n\n  @Post('default')\n  @HttpCode(200)\n  @UseGuards(JwtAuthenticationGuard)\n  async setDefaultCard(\n    @Body() creditCard: SetDefaultCreditCardDto,\n    @Req() request: RequestWithUser,\n  ) {\n    await this.stripeService.setDefaultCreditCard(\n      creditCard.paymentMethodId,\n      request.user.stripeCustomerId,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CreditCardsModule.html":{"url":"modules/CreditCardsModule.html","title":"module - CreditCardsModule","body":"\n                   \n\n\n\n\n    Modules\n    CreditCardsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CreditCardsModule\n\n\n\ncluster_CreditCardsModule_imports\n\n\n\n\nStripeModule\n\nStripeModule\n\n\n\nCreditCardsModule\n\nCreditCardsModule\n\nCreditCardsModule -->\n\nStripeModule->CreditCardsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/credit-cards/creditCards.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            CreditCardsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StripeModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { StripeModule } from '../stripe/stripe.module';\nimport CreditCardsController from './creditCards.controller';\n\n@Module({\n  imports: [StripeModule],\n  controllers: [CreditCardsController],\n  providers: [],\n})\nexport class CreditCardsModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomLogger.html":{"url":"injectables/CustomLogger.html","title":"injectable - CustomLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/customLogger.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ConsoleLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logsService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                verbose\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(context: string, options: ConsoleLoggerOptions, configService: ConfigService, logsService: LogsService)\n                    \n                \n                        \n                            \n                                Defined in src/logger/customLogger.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        context\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        ConsoleLoggerOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logsService\n                                                  \n                                                        \n                                                                        LogsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/customLogger.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: string, stack?: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/customLogger.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stack\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/customLogger.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/customLogger.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/customLogger.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LogsService\n\n                    \n                \n                    \n                        \n                                Defined in src/logger/customLogger.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ConsoleLogger } from '@nestjs/common';\nimport { ConsoleLoggerOptions } from '@nestjs/common/services/console-logger.service';\nimport { ConfigService } from '@nestjs/config';\nimport getLogLevels from '../utils/getLogLevels';\nimport LogsService from './logs.service';\n\n@Injectable()\nclass CustomLogger extends ConsoleLogger {\n  private readonly logsService: LogsService;\n  constructor(\n    context: string,\n    options: ConsoleLoggerOptions,\n    configService: ConfigService,\n    logsService: LogsService,\n  ) {\n    const environment = configService.get('NODE_ENV');\n    super(context, {\n      ...options,\n      logLevels: getLogLevels(environment === 'production'),\n    });\n    this.logsService = logsService;\n  }\n\n  log(message: string, context?: string): void {\n    super.log.apply(this, [message, context]);\n\n    this.logsService.createLog({\n      message,\n      context,\n      level: 'log',\n    });\n  }\n\n  error(message: string, stack?: string, context?: string) {\n    super.error.apply(this, [message, stack, context]);\n\n    this.logsService.createLog({\n      message,\n      context,\n      level: 'error',\n    });\n  }\n  warn(message: string, context?: string) {\n    super.warn.apply(this, [message, context]);\n\n    this.logsService.createLog({\n      message,\n      context,\n      level: 'error',\n    });\n  }\n  debug(message: string, context?: string) {\n    super.debug.apply(this, [message, context]);\n\n    this.logsService.createLog({\n      message,\n      context,\n      level: 'error',\n    });\n  }\n  verbose(message: string, context?: string) {\n    super.debug.apply(this, [message, context]);\n\n    this.logsService.createLog({\n      message,\n      context,\n      level: 'error',\n    });\n  }\n}\n\nexport default CustomLogger;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatabaseLogger.html":{"url":"classes/DatabaseLogger.html","title":"class - DatabaseLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatabaseLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/databaseLogger.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            TypeOrmLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                log\n                            \n                            \n                                logMigration\n                            \n                            \n                                logQuery\n                            \n                            \n                                logQueryError\n                            \n                            \n                                logQuerySlow\n                            \n                            \n                                logSchemaBuild\n                            \n                            \n                                    Private\n                                stringifyParameters\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NestLogger('SQL')\n                    \n                \n                    \n                        \n                                Defined in src/database/databaseLogger.ts:5\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(level: \"log\" | \"info\" | \"warn\", message: any, queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/databaseLogger.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                            \"log\" | \"info\" | \"warn\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logMigration\n                        \n                    \n                \n            \n            \n                \nlogMigration(message: string, queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/databaseLogger.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuery\n                        \n                    \n                \n            \n            \n                \nlogQuery(query: string, parameters?: any[], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/databaseLogger.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQueryError\n                        \n                    \n                \n            \n            \n                \nlogQueryError(error: string | Error, query: string, parameters?: any[], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/databaseLogger.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            string | Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuerySlow\n                        \n                    \n                \n            \n            \n                \nlogQuerySlow(time: number, query: string, parameters?: any[], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/databaseLogger.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    time\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSchemaBuild\n                        \n                    \n                \n            \n            \n                \nlogSchemaBuild(message: string, queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/databaseLogger.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        stringifyParameters\n                        \n                    \n                \n            \n            \n                \n                    \n                    stringifyParameters(parameters?: [])\n                \n            \n\n\n            \n                \n                    Defined in src/database/databaseLogger.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger as TypeOrmLogger, QueryRunner } from 'typeorm';\nimport { Logger as NestLogger } from '@nestjs/common';\n\nclass DatabaseLogger implements TypeOrmLogger {\n  private readonly logger = new NestLogger('SQL');\n\n  logQuery(query: string, parameters?: any[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data?.isCreatingLogs) {\n      return;\n    }\n    this.logger.log(\n      `${query} -- Parameters: ${this.stringifyParameters(parameters)}`,\n    );\n  }\n\n  logQueryError(\n    error: string | Error,\n    query: string,\n    parameters?: any[],\n    queryRunner?: QueryRunner,\n  ) {\n    if (queryRunner?.data?.isCreatingLogs) {\n      return;\n    }\n    this.logger.error(\n      `${query} -- Parameters: ${this.stringifyParameters(\n        parameters,\n      )} -- ${error}`,\n    );\n  }\n  logQuerySlow(\n    time: number,\n    query: string,\n    parameters?: any[],\n    queryRunner?: QueryRunner,\n  ) {\n    if (queryRunner?.data?.isCreatingLogs) {\n      return;\n    }\n    this.logger.warn(\n      `Time: ${time} -- Parameters: ${this.stringifyParameters(\n        parameters,\n      )} -- ${query}`,\n    );\n  }\n\n  logMigration(message: string, queryRunner?: QueryRunner) {\n    if (queryRunner?.data?.isCreatingLogs) {\n      return;\n    }\n    this.logger.log(message);\n  }\n\n  logSchemaBuild(message: string, queryRunner?: QueryRunner) {\n    if (queryRunner?.data?.isCreatingLogs) {\n      return;\n    }\n    this.logger.log(message);\n  }\n\n  log(level: 'log' | 'info' | 'warn', message: any, queryRunner?: QueryRunner) {\n    if (queryRunner?.data?.isCreatingLogs) {\n      return;\n    }\n    if (level === 'log') {\n      return this.logger.log(message);\n    }\n    if (level === 'info') {\n      return this.logger.debug(message);\n    }\n    if (level === 'warn') {\n      return this.logger.warn(message);\n    }\n  }\n\n  private stringifyParameters(parameters?: unknown[]) {\n    try {\n      return JSON.stringify(parameters);\n    } catch {\n      return '';\n    }\n  }\n}\n\nexport default DatabaseLogger;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport Post from '../posts/post.entity';\nimport User from '../users/user.entity';\nimport Address from '../users/address.entity';\nimport Category from '../categories/category.entity';\nimport PublicFile from '../files/publicFile.entity';\nimport PrivateFIle from '../privateFiles/privateFile.entity';\nimport Product from 'src/products/product.entity';\nimport ProductCategory from 'src/productCategories/productCategories.entity';\nimport Message from 'src/chat/message.entity';\nimport StripeEvent from 'src/stripeWebhook/stripeEvent.entity';\nimport DatabaseLogger from './databaseLogger';\nimport Log from 'src/logger/log.entity';\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        logger: new DatabaseLogger(),\n        host: configService.get('POSTGRES_HOST'),\n        port: configService.get('POSTGRES_PORT'),\n        username: configService.get('POSTGRES_USER'),\n        password: configService.get('POSTGRES_PASSWORD'),\n        database: configService.get('POSTGRES_DB'),\n        entities: [\n          Post,\n          User,\n          Address,\n          Category,\n          PublicFile,\n          PrivateFIle,\n          Product,\n          ProductCategory,\n          Message,\n          StripeEvent,\n          Log,\n        ],\n        synchronize: true,\n      }),\n    }),\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmailConfirmationController.html":{"url":"controllers/EmailConfirmationController.html","title":"controller - EmailConfirmationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmailConfirmationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emailConfirmation/emailConfirmation.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                email-confirmation\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                confirm\n                            \n                            \n                                    Async\n                                resendConfirmationLink\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        confirm\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirm(confirmationData: ConfirmEmailDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('confirm')\n                \n            \n\n            \n                \n                    Defined in src/emailConfirmation/emailConfirmation.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    confirmationData\n                                    \n                                                ConfirmEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        resendConfirmationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    resendConfirmationLink(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('resend-confirmation-link')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/emailConfirmation/emailConfirmation.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  ClassSerializerInterceptor,\n  UseInterceptors,\n  Post,\n  Body,\n  UseGuards,\n  Req,\n} from '@nestjs/common';\nimport ConfirmEmailDto from './dto/confirmEmail.dto';\nimport { EmailConfirmationService } from './emailConfirmation.service';\nimport JwtAuthenticationGuard from '../authentication/jwt-authentication.guard';\nimport RequestWithUser from '../authentication/requestWithUser.interface';\n\n@Controller('email-confirmation')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class EmailConfirmationController {\n  constructor(\n    private readonly emailConfirmationService: EmailConfirmationService,\n  ) {}\n\n  @Post('confirm')\n  async confirm(@Body() confirmationData: ConfirmEmailDto) {\n    const email = await this.emailConfirmationService.decodeConfirmationToken(\n      confirmationData.token,\n    );\n    await this.emailConfirmationService.confirmEmail(email);\n  }\n\n  @Post('resend-confirmation-link')\n  @UseGuards(JwtAuthenticationGuard)\n  async resendConfirmationLink(@Req() request: RequestWithUser) {\n    await this.emailConfirmationService.resendConfirmationLink(request.user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailConfirmationModule.html":{"url":"modules/EmailConfirmationModule.html","title":"module - EmailConfirmationModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailConfirmationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailConfirmationModule\n\n\n\ncluster_EmailConfirmationModule_exports\n\n\n\ncluster_EmailConfirmationModule_imports\n\n\n\ncluster_EmailConfirmationModule_providers\n\n\n\n\nEmailModule\n\nEmailModule\n\n\n\nEmailConfirmationModule\n\nEmailConfirmationModule\n\nEmailConfirmationModule -->\n\nEmailModule->EmailConfirmationModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nEmailConfirmationModule -->\n\nUserModule->EmailConfirmationModule\n\n\n\n\n\nEmailConfirmationService \n\nEmailConfirmationService \n\nEmailConfirmationService  -->\n\nEmailConfirmationModule->EmailConfirmationService \n\n\n\n\n\nEmailConfirmationService\n\nEmailConfirmationService\n\nEmailConfirmationModule -->\n\nEmailConfirmationService->EmailConfirmationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/emailConfirmation/emailConfirmation.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailConfirmationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmailConfirmationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailConfirmationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EmailConfirmationService } from './emailConfirmation.service';\nimport { ConfigModule } from '@nestjs/config';\nimport { EmailModule } from '../email/email.module';\nimport { JwtModule } from '@nestjs/jwt';\nimport { EmailConfirmationController } from './emailConfirmation.controller';\nimport { UserModule } from '../users/users.module';\n\n@Module({\n  imports: [ConfigModule, EmailModule, JwtModule.register({}), UserModule],\n  providers: [EmailConfirmationService],\n  exports: [EmailConfirmationService],\n  controllers: [EmailConfirmationController],\n})\nexport class EmailConfirmationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailConfirmationService.html":{"url":"injectables/EmailConfirmationService.html","title":"injectable - EmailConfirmationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailConfirmationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emailConfirmation/emailConfirmation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                confirmEmail\n                            \n                            \n                                    Public\n                                    Async\n                                decodeConfirmationToken\n                            \n                            \n                                    Public\n                                    Async\n                                resendConfirmationLink\n                            \n                            \n                                    Public\n                                sendVerificationLink\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService, emailService: EmailService, usersService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/emailConfirmation/emailConfirmation.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        confirmEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/emailConfirmation/emailConfirmation.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        decodeConfirmationToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    decodeConfirmationToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/emailConfirmation/emailConfirmation.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        resendConfirmationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    resendConfirmationLink(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/emailConfirmation/emailConfirmation.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        sendVerificationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendVerificationLink(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/emailConfirmation/emailConfirmation.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport VerificationTokenPayload from './verificationTokenPayload.interface';\nimport EmailService from '../email/email.service';\nimport { UserService } from '../users/user.service';\n\n@Injectable()\nexport class EmailConfirmationService {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    private readonly emailService: EmailService,\n    private readonly usersService: UserService,\n  ) {}\n\n  public sendVerificationLink(email: string) {\n    const payload: VerificationTokenPayload = { email };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_VERIFICATION_TOKEN_SECRET'),\n      expiresIn: `${this.configService.get(\n        'JWT_VERIFICATION_TOKEN_EXPIRATION_TIME',\n      )}s`,\n    });\n    const url = `${this.configService.get(\n      'EMAIL_CONFIRMATION_URL',\n    )}?token=${token}`;\n    const text = `Welcome to the application. To comfirm the email address, click here: ${url}`;\n\n    return this.emailService.sendMail({\n      to: email,\n      subject: 'Email confirmation',\n      text,\n    });\n  }\n\n  public async confirmEmail(email: string) {\n    const user = await this.usersService.getByEmail(email);\n    if (user.isEmailConfirmed) {\n      throw new BadRequestException('Email already confirmed');\n    }\n    await this.usersService.markEmailAsConfirmed(email);\n  }\n\n  public async decodeConfirmationToken(token: string) {\n    try {\n      const payload = await this.jwtService.verify(token, {\n        secret: this.configService.get('JWT_VERIFICATION_TOKEN_SECRET'),\n      });\n      if (typeof payload === 'object' && 'email' in payload) {\n        return payload.email;\n      }\n      throw new BadRequestException();\n    } catch (error) {\n      if (error?.name === 'TokenExpiredError') {\n        throw new BadRequestException('Email confirmation token expired');\n      }\n      throw new BadRequestException('Bad confirmation token');\n    }\n  }\n\n  public async resendConfirmationLink(userId: number) {\n    const user = await this.usersService.getById(userId);\n\n    if (user.isEmailConfirmed) {\n      throw new BadRequestException('Email already confirmed');\n    }\n    await this.sendVerificationLink(user.email);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailModule.html":{"url":"modules/EmailModule.html","title":"module - EmailModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/email/email.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport EmailService from './email.service';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [ConfigModule],\n  controllers: [],\n  providers: [EmailService],\n  exports: [EmailService],\n})\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmailModuleController.html":{"url":"controllers/EmailModuleController.html","title":"controller - EmailModuleController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmailModuleController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emaillScheduling/emailScheduling.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                email-scheduling\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                scheduleEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        scheduleEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    scheduleEmail(emailSchedule: EmailScheduleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('schedule')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/emaillScheduling/emailScheduling.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    emailSchedule\n                                    \n                                                EmailScheduleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, UseGuards, Post } from '@nestjs/common';\nimport JwtAuthenticationGuard from '../authentication/jwt-authentication.guard';\nimport EmailSchedulingService from './emailScheduling.service';\nimport EmailScheduleDto from './dto/emailScheduling.dto';\n\n@Controller('email-scheduling')\nexport default class EmailModuleController {\n  constructor(\n    private readonly emailSchedulingService: EmailSchedulingService,\n  ) {}\n\n  @Post('schedule')\n  @UseGuards(JwtAuthenticationGuard)\n  async scheduleEmail(@Body() emailSchedule: EmailScheduleDto) {\n    this.emailSchedulingService.scheduleEmail(emailSchedule);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailScheduleDto.html":{"url":"classes/EmailScheduleDto.html","title":"class - EmailScheduleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailScheduleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emaillScheduling/dto/emailScheduling.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                date\n                            \n                            \n                                recipient\n                            \n                            \n                                subject\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emaillScheduling/dto/emailScheduling.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emaillScheduling/dto/emailScheduling.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recipient\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emaillScheduling/dto/emailScheduling.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emaillScheduling/dto/emailScheduling.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsDateString, IsEmail } from 'class-validator';\n\nexport class EmailScheduleDto {\n  @IsEmail()\n  recipient: string;\n\n  @IsString()\n  @IsNotEmpty()\n  subject: string;\n\n  @IsString()\n  @IsNotEmpty()\n  content: string;\n\n  @IsDateString()\n  date: string;\n}\n\nexport default EmailScheduleDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailSchedulingModule.html":{"url":"modules/EmailSchedulingModule.html","title":"module - EmailSchedulingModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailSchedulingModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailSchedulingModule\n\n\n\ncluster_EmailSchedulingModule_providers\n\n\n\ncluster_EmailSchedulingModule_imports\n\n\n\n\nEmailModule\n\nEmailModule\n\n\n\nEmailSchedulingModule\n\nEmailSchedulingModule\n\nEmailSchedulingModule -->\n\nEmailModule->EmailSchedulingModule\n\n\n\n\n\nEmailSchedulingService\n\nEmailSchedulingService\n\nEmailSchedulingModule -->\n\nEmailSchedulingService->EmailSchedulingModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/emaillScheduling/emailScheduling.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailSchedulingService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport EmailSchedulingService from './emailScheduling.service';\nimport { EmailModule } from '../email/email.module';\nimport EmailSchedulingController from './emailScheduling.controller';\n\n@Module({\n  imports: [EmailModule],\n  controllers: [EmailSchedulingController],\n  providers: [EmailSchedulingService],\n})\nexport class EmailSchedulingModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailSchedulingService.html":{"url":"injectables/EmailSchedulingService.html","title":"injectable - EmailSchedulingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailSchedulingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emaillScheduling/emailScheduling.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                scheduleEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(emailService: EmailService, scheduleRegistery: SchedulerRegistry)\n                    \n                \n                        \n                            \n                                Defined in src/emaillScheduling/emailScheduling.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        scheduleRegistery\n                                                  \n                                                        \n                                                                    SchedulerRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        scheduleEmail\n                        \n                    \n                \n            \n            \n                \nscheduleEmail(emailSchedule: EmailScheduleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/emaillScheduling/emailScheduling.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    emailSchedule\n                                    \n                                                EmailScheduleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Cron, SchedulerRegistry } from '@nestjs/schedule';\nimport EmailService from 'src/email/email.service';\nimport EmailScheduleDto from './dto/emailScheduling.dto';\nimport { CronJob } from 'cron';\n@Injectable()\nexport default class EmailSchedulingService {\n  constructor(\n    private readonly emailService: EmailService,\n    private readonly scheduleRegistery: SchedulerRegistry,\n  ) {}\n\n  scheduleEmail(emailSchedule: EmailScheduleDto) {\n    console.log(['date'], emailSchedule);\n\n    const date = new Date(emailSchedule.date);\n    const job = new CronJob(date, () => {\n      this.emailService.sendMail({\n        to: emailSchedule.recipient,\n        subject: emailSchedule.subject,\n        text: emailSchedule.content,\n      });\n    });\n\n    this.scheduleRegistery.addCronJob(\n      `${Date.now()}-${emailSchedule.subject}`,\n      job,\n    );\n    job.start();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/email.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                nodemailerTransport\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/email/email.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendMail\n                        \n                    \n                \n            \n            \n                \nsendMail(option: Mail.Options)\n                \n            \n\n\n            \n                \n                    Defined in src/email/email.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    option\n                                    \n                                            Mail.Options\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        nodemailerTransport\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Mail\n\n                    \n                \n                    \n                        \n                                Defined in src/email/email.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { createTransport } from 'nodemailer';\nimport * as Mail from 'nodemailer/lib/mailer';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport default class EmailService {\n  private nodemailerTransport: Mail;\n\n  constructor(private readonly configService: ConfigService) {\n    this.nodemailerTransport = createTransport({\n      service: configService.get('EMAIL_SERVICE'),\n      auth: {\n        user: configService.get('EMAIL_USER'),\n        pass: configService.get('EMAIL_PASSWORD'),\n      },\n    });\n  }\n\n  sendMail(option: Mail.Options) {\n    return this.nodemailerTransport.sendMail(option);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExceptionsLoggerFilter.html":{"url":"classes/ExceptionsLoggerFilter.html","title":"class - ExceptionsLoggerFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExceptionsLoggerFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/exceptionsLogger.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    BaseExceptionFilter\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/exceptionsLogger.filter.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Catch, ArgumentsHost } from '@nestjs/common';\nimport { BaseExceptionFilter } from '@nestjs/core';\n@Catch()\nexport class ExceptionsLoggerFilter extends BaseExceptionFilter {\n  catch(exception: any, host: ArgumentsHost): void {\n    console.log('Exception throw', exception);\n    super.catch(exception, host);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExcludeNullInterceptor.html":{"url":"injectables/ExcludeNullInterceptor.html","title":"injectable - ExcludeNullInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExcludeNullInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/excludeNull.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/excludeNull.interceptor.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport recursivelyStripNullValues from './recursivelyStripNullValues';\n\n@Injectable()\nexport class ExcludeNullInterceptor implements NestInterceptor {\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable | Promise> {\n    return next\n      .handle()\n      .pipe(map((value) => recursivelyStripNullValues(value)));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FileModule.html":{"url":"modules/FileModule.html","title":"module - FileModule","body":"\n                   \n\n\n\n\n    Modules\n    FileModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FileModule\n\n\n\ncluster_FileModule_providers\n\n\n\ncluster_FileModule_exports\n\n\n\n\nFileService \n\nFileService \n\n\n\nFileModule\n\nFileModule\n\nFileService  -->\n\nFileModule->FileService \n\n\n\n\n\nFileService\n\nFileService\n\nFileModule -->\n\nFileService->FileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/files/files.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FileService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FileService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport FileService from './files.service';\nimport PublicFile from './publicFile.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([PublicFile]), ConfigModule],\n  providers: [FileService],\n  exports: [FileService],\n})\nexport class FileModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FileService.html":{"url":"injectables/FileService.html","title":"injectable - FileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/files/files.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deletePublicFile\n                            \n                            \n                                    Async\n                                deletePublicFileWithQueryRunner\n                            \n                            \n                                    Async\n                                uploadPublicFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(publicFileRepository: Repository, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/files/files.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        publicFileRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePublicFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePublicFile(fileId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/files/files.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePublicFileWithQueryRunner\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePublicFileWithQueryRunner(fileId: number, queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/files/files.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPublicFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPublicFile(dataBuffer: Buffer, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/files/files.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { QueryRunner, Repository } from 'typeorm';\nimport PublicFile from './publicFile.entity';\nimport { S3 } from 'aws-sdk';\nimport { ConfigService } from '@nestjs/config';\nimport { v4 as uuid } from 'uuid';\n\n@Injectable()\nexport class FileService {\n  constructor(\n    @InjectRepository(PublicFile)\n    private publicFileRepository: Repository,\n    private readonly configService: ConfigService,\n  ) {}\n\n  async uploadPublicFile(dataBuffer: Buffer, filename: string) {\n    const s3 = new S3();\n    const uploadResult = await s3\n      .upload({\n        Bucket: this.configService.get('AWS_PUBLIC_BUCKET_NAME'),\n        Body: dataBuffer,\n        Key: `${uuid()}-${filename}`,\n      })\n      .promise();\n\n    const newFile = this.publicFileRepository.create({\n      key: uploadResult.Key,\n      url: uploadResult.Location,\n    });\n\n    await this.publicFileRepository.save(newFile);\n    return newFile;\n  }\n\n  async deletePublicFile(fileId: number) {\n    const file = await this.publicFileRepository.findOne({\n      where: { id: fileId },\n    });\n\n    const s3 = new S3();\n    await s3\n      .deleteObject({\n        Bucket: this.configService.get('AWS_PUBLIC_BUCKET_NAME'),\n        Key: file.key,\n      })\n      .promise();\n\n    await this.publicFileRepository.delete({\n      id: fileId,\n    });\n  }\n\n  async deletePublicFileWithQueryRunner(\n    fileId: number,\n    queryRunner: QueryRunner,\n  ) {\n    const file = await queryRunner.manager.findOne(PublicFile, {\n      where: { id: fileId },\n    });\n    const s3 = new S3();\n    await s3\n      .deleteObject({\n        Bucket: this.configService.get('AWS_PUBLIC_BUCKET_NAME'),\n        Key: file.key,\n      })\n      .promise();\n    await queryRunner.manager.delete(PublicFile, fileId);\n  }\n}\n\nexport default FileService;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindOneParams.html":{"url":"classes/FindOneParams.html","title":"class - FindOneParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindOneParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/findOneParams.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/findOneParams.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumberString } from 'class-validator';\n\nclass FindOneParams {\n  @IsNumberString()\n  id: string;\n}\n\nexport default FindOneParams;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GoogleAuthenticationController.html":{"url":"controllers/GoogleAuthenticationController.html","title":"controller - GoogleAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GoogleAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/googleAuthentication/googleAuthencation.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                google-authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authenticate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticate(tokenData: TokenVerificationDto, request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/googleAuthentication/googleAuthencation.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenData\n                                    \n                                                TokenVerificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  ClassSerializerInterceptor,\n  UseInterceptors,\n  Body,\n  Req,\n} from '@nestjs/common';\nimport TokenVerificationDto from './dto/tokenVerification.dto';\nimport { GoogleAuthenticationService } from './googleAuthentication.service';\nimport { Request } from 'express';\n\n@Controller('google-authentication')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class GoogleAuthenticationController {\n  constructor(\n    private readonly googleAuthenticationService: GoogleAuthenticationService,\n  ) {}\n\n  @Post()\n  async authenticate(\n    @Body() tokenData: TokenVerificationDto,\n    @Req() request: Request,\n  ) {\n    console.log(['alo']);\n\n    const { accessTokenCookie, refreshTokenCookie, user } =\n      await this.googleAuthenticationService.authenticate(tokenData.token);\n\n    request.res.setHeader('Set-Cookie', [\n      accessTokenCookie,\n      refreshTokenCookie,\n    ]);\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GoogleAuthenticationModule.html":{"url":"modules/GoogleAuthenticationModule.html","title":"module - GoogleAuthenticationModule","body":"\n                   \n\n\n\n\n    Modules\n    GoogleAuthenticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_GoogleAuthenticationModule\n\n\n\ncluster_GoogleAuthenticationModule_imports\n\n\n\ncluster_GoogleAuthenticationModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nGoogleAuthenticationModule\n\nGoogleAuthenticationModule\n\nGoogleAuthenticationModule -->\n\nAuthenticationModule->GoogleAuthenticationModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nGoogleAuthenticationModule -->\n\nUserModule->GoogleAuthenticationModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nGoogleAuthenticationModule -->\n\nGoogleAuthenticationService->GoogleAuthenticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/googleAuthentication/googleAuthentication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GoogleAuthenticationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GoogleAuthenticationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GoogleAuthenticationController } from './googleAuthencation.controller';\nimport { ConfigModule } from '@nestjs/config';\nimport { UserModule } from '../users/users.module';\nimport { GoogleAuthenticationService } from './googleAuthentication.service';\nimport { AuthenticationModule } from '../authentication/authentication.module';\n\n@Module({\n  imports: [ConfigModule, UserModule, AuthenticationModule],\n  providers: [GoogleAuthenticationService],\n  controllers: [GoogleAuthenticationController],\n  exports: []\n})\nexport class GoogleAuthenticationModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthenticationService.html":{"url":"injectables/GoogleAuthenticationService.html","title":"injectable - GoogleAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/googleAuthentication/googleAuthentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                oauthClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authenticate\n                            \n                            \n                                    Async\n                                getCookieForUser\n                            \n                            \n                                    Async\n                                getUserData\n                            \n                            \n                                    Async\n                                handleRegisteredUser\n                            \n                            \n                                    Async\n                                registerUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UserService, configService: ConfigService, authenticationService: AuthenticationServices)\n                    \n                \n                        \n                            \n                                Defined in src/googleAuthentication/googleAuthentication.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                        AuthenticationServices\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticate(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/googleAuthentication/googleAuthentication.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCookieForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieForUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/googleAuthentication/googleAuthentication.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserData\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserData(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/googleAuthentication/googleAuthentication.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleRegisteredUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleRegisteredUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/googleAuthentication/googleAuthentication.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        registerUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    registerUser(token: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/googleAuthentication/googleAuthentication.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        oauthClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Auth.OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/googleAuthentication/googleAuthentication.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { UserService } from '../users/user.service';\nimport { ConfigService } from '@nestjs/config';\nimport { google, Auth } from 'googleapis';\nimport { AuthenticationServices } from '../authentication/authentication.service';\nimport User from '../users/user.entity';\nimport StripeService from 'src/stripe/stripe.service';\n\n@Injectable()\nexport class GoogleAuthenticationService {\n  oauthClient: Auth.OAuth2Client;\n  constructor(\n    private readonly usersService: UserService,\n    private readonly configService: ConfigService,\n    private readonly authenticationService: AuthenticationServices,\n  ) {\n    const clientID = this.configService.get('GOOGLE_AUTH_CLIENT_ID');\n    const clientSecret = this.configService.get('GOOGLE_AUTH_CLIENT_SECRET');\n    this.oauthClient = new google.auth.OAuth2(clientID, clientSecret);\n  }\n\n  async authenticate(token: string) {\n    const tokenInfo = await this.oauthClient.getTokenInfo(token);\n    const email = tokenInfo.email;\n\n    try {\n      const user = await this.usersService.getByEmail(email);\n      return this.handleRegisteredUser(user);\n    } catch (error) {\n      if (error.status !== 404) {\n        throw new error();\n      }\n      return this.registerUser(token, email);\n    }\n  }\n\n  async registerUser(token: string, email: string) {\n    const userData = await this.getUserData(token);\n    const name = userData.name;\n\n    const user = await this.usersService.createWithGoogle(email, name);\n    return this.handleRegisteredUser(user);\n  }\n\n  async getUserData(token: string) {\n    const userInfoClient = google.oauth2('v2').userinfo;\n\n    this.oauthClient.setCredentials({\n      access_token: token,\n    });\n\n    const userInfoResponse = await userInfoClient.get({\n      auth: this.oauthClient,\n    });\n    return userInfoResponse.data;\n  }\n\n  async getCookieForUser(user: User) {\n    const accessTokenCookie =\n      this.authenticationService.getCookieWithJwtAccessToken(user.id);\n    const { cookie: refreshTokenCookie, token: refreshToken } =\n      this.authenticationService.getCookieWithJwtRefreshToken(user.id);\n\n    await this.usersService.setCurrentRefreshToken(refreshToken, user.id);\n    return { accessTokenCookie, refreshTokenCookie };\n  }\n\n  async handleRegisteredUser(user: User) {\n    if (!user.isRegisterWithGoogle) {\n      throw new UnauthorizedException();\n    }\n    const { accessTokenCookie, refreshTokenCookie } =\n      await this.getCookieForUser(user);\n    return { accessTokenCookie, refreshTokenCookie, user };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpCacheInterceptor.html":{"url":"injectables/HttpCacheInterceptor.html","title":"injectable - HttpCacheInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpCacheInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/httpCache.interceptor.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    CacheInterceptor\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                trackBy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        trackBy\n                        \n                    \n                \n            \n            \n                \ntrackBy(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/httpCache.interceptor.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CACHE_KEY_METADATA,\n  CacheInterceptor,\n  ExecutionContext,\n  Injectable,\n} from '@nestjs/common';\n\n@Injectable()\nexport class HttpCacheInterceptor extends CacheInterceptor {\n  trackBy(context: ExecutionContext): string | undefined {\n    const cacheKey = this.reflector.get(\n      CACHE_KEY_METADATA,\n      context.getHandler(),\n    );\n\n    if (cacheKey) {\n      const request = context.switchToHttp().getRequest();\n      console.log(['request rqq'], request.query);\n\n      return `${cacheKey}-${request.query}`;\n    }\n    return super.trackBy(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ImageProcessor.html":{"url":"classes/ImageProcessor.html","title":"class - ImageProcessor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ImageProcessor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/optimize/image.processor.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleOptimization\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleOptimization\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleOptimization(job: Job, doneCallBack: DoneCallback)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Process('optimize')\n                \n            \n\n            \n                \n                    Defined in src/optimize/image.processor.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    job\n                                    \n                                            Job\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    doneCallBack\n                                    \n                                            DoneCallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Process, Processor } from '@nestjs/bull';\nimport { DoneCallback, Job } from 'bull';\nimport * as AdmZip from 'adm-zip';\nimport buffer from 'imagemin';\nimport imageminPngquant from 'imagemin-pngquant';\nimport { Express } from 'express';\n\n@Processor('image')\nexport class ImageProcessor {\n  @Process('optimize')\n  async handleOptimization(job: Job, doneCallBack: DoneCallback) {\n    const files: Express.Multer.File[] = job.data.files;\n\n    const optimizationPromise: Promise[] = files.map((file) => {\n      const fileBuffer = Buffer.from(file.buffer);\n      return buffer.buffer(fileBuffer, {\n        plugins: [\n          imageminPngquant({\n            quality: [0.6, 0.8],\n          }),\n        ],\n      });\n    });\n\n    const optimizeImages = await Promise.all(optimizationPromise);\n\n    const zip = new AdmZip();\n\n    optimizeImages.forEach((image, index) => {\n      const fileData = files[index];\n      zip.addFile(fileData.originalname, image);\n    });\n    doneCallBack(null, zip.toBuffer());\n  }\n}\n\nexport default ImageProcessor;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthenticationGuard.html":{"url":"injectables/JwtAuthenticationGuard.html","title":"injectable - JwtAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/jwt-authentication.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport default class JwtAuthenticationGuard extends AuthGuard('jwt') {} //Gọi tới jwt Srtategy\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshGuard.html":{"url":"injectables/JwtRefreshGuard.html","title":"injectable - JwtRefreshGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/jwt-refresh.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport default class JwtRefreshGuard extends AuthGuard('jwt-refresh-token') {} \n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshTokenStrategy.html":{"url":"injectables/JwtRefreshTokenStrategy.html","title":"injectable - JwtRefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/jwt-refresh-token.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/jwt-refresh-token.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(request: Request, payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/jwt-refresh-token.strategy.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UserService } from '../users/user.service';\nimport TokenPayload from './tokenPayload.interface';\n\n@Injectable()\nexport class JwtRefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh-token',\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UserService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Refresh;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_REFRESH_TOKEN_SECRET'),\n      passReqToCallback: true,\n    });\n  }\n\n  async validate(request: Request, payload: TokenPayload) {\n    const refreshToken = request.cookies?.Refresh;\n    return this.userService.getUserIfRefreshTokenMatches(\n      refreshToken,\n      payload.userId,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtTwoFactorGuard.html":{"url":"injectables/JwtTwoFactorGuard.html","title":"injectable - JwtTwoFactorGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtTwoFactorGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/jwt-two-factor.guards.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport default class JwtTwoFactorGuard extends AuthGuard('jwt-two-factor') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtTwoFactorStrategy.html":{"url":"injectables/JwtTwoFactorStrategy.html","title":"injectable - JwtTwoFactorStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtTwoFactorStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/jwt-two-factor.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/jwt-two-factor.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/jwt-two-factor.strategy.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UserService } from '../users/user.service';\nimport TokenPayload from './tokenPayload.interface';\n\n@Injectable()\nexport class JwtTwoFactorStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-two-factor',\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UserService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Authentication;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_SECRET'),\n    });\n  }\n\n  async validate(payload: TokenPayload) {\n    const user = await this.userService.getById(payload.userId);\n    if (!user.isTwoFactorAuthenticationEnabled) {\n      return user;\n    }\n    if (payload.isSecondFactorAuthenticated) {\n      return user;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthentication.html":{"url":"injectables/LocalAuthentication.html","title":"injectable - LocalAuthentication","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthentication\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/localAuthentication.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthentication extends AuthGuard('local') {} //Gọi tới local Strategy\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authenticationService: AuthenticationServices)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                        AuthenticationServices\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/local.strategy.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { AuthenticationServices } from './authentication.service';\nimport User from '../users/user.entity';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authenticationService: AuthenticationServices) {\n    super({\n      usernameField: 'email',\n    });\n  }\n\n  async validate(email: string, password: string): Promise {\n    return this.authenticationService.getAuthenticatedUser(email, password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Log.html":{"url":"entities/Log.html","title":"entity - Log","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Log\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/log.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                context\n                            \n                            \n                                creationDate\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                level\n                            \n                            \n                                    Public\n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/log.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creationDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/log.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/log.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/log.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/log.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, CreateDateColumn, Entity, PrimaryGeneratedColumn } from 'typeorm';\n \n@Entity()\nclass Log {\n  @PrimaryGeneratedColumn()\n  public id: number;\n \n  @Column()\n  public context: string;\n \n  @Column()\n  public message: string;\n \n  @Column()\n  public level: string;\n \n  @CreateDateColumn()\n  creationDate: Date;\n}\n \nexport default Log;\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoggerModule.html":{"url":"modules/LoggerModule.html","title":"module - LoggerModule","body":"\n                   \n\n\n\n\n    Modules\n    LoggerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_exports\n\n\n\ncluster_LoggerModule_providers\n\n\n\n\nCustomLogger \n\nCustomLogger \n\n\n\nLoggerModule\n\nLoggerModule\n\nCustomLogger  -->\n\nLoggerModule->CustomLogger \n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLoggerModule -->\n\nCustomLogger->LoggerModule\n\n\n\n\n\nLogsService\n\nLogsService\n\nLoggerModule -->\n\nLogsService->LoggerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/logger/logger.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomLogger\n                        \n                        \n                            LogsService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CustomLogger\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport CustomLogger from './customLogger';\nimport { ConfigModule } from '@nestjs/config';\nimport LogsService from './logs.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport Log from './log.entity';\n \n@Module({\n  imports: [ConfigModule, TypeOrmModule.forFeature([Log])],\n  providers: [CustomLogger, LogsService],\n  exports: [CustomLogger],\n})\nexport class LoggerModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogsMiddleware.html":{"url":"injectables/LogsMiddleware.html","title":"injectable - LogsMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LogsMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/log.middlware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/log.middlware.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('HTTP')\n                    \n                \n                    \n                        \n                                Defined in src/utils/log.middlware.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\n\n@Injectable()\nclass LogsMiddleware implements NestMiddleware {\n  private readonly logger = new Logger('HTTP');\n  use(req: Request, res: Response, next: NextFunction) {\n    res.on('finish', () => {\n      const { method, originalUrl } = req;\n      const { statusCode, statusMessage } = res;\n\n      const message = `${method} ${originalUrl} ${statusCode} ${statusMessage}`;\n\n      if (statusCode >= 500) {\n        return this.logger.error(message);\n      }\n      if (statusCode >= 400) {\n        return this.logger.warn(message);\n      }\n      return this.logger.log(message);\n    });\n    next();\n  }\n}\nexport default LogsMiddleware;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogsService.html":{"url":"injectables/LogsService.html","title":"injectable - LogsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LogsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/logs.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/logger/logs.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createLog\n                        \n                    \n                \n            \n            \n                \n                    \n                    createLog(log: CreateLogDto)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/logs.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    log\n                                    \n                                                CreateLogDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport Log from './log.entity';\nimport CreateLogDto from './dto/createLog.dto';\n\n@Injectable()\nexport default class LogsService {\n  constructor(\n    @InjectRepository(Log)\n    private logRepository: Repository,\n  ) {}\n\n  async createLog(log: CreateLogDto) {\n    const newLog = await this.logRepository.create(log);\n    await this.logRepository.save(newLog, {\n      data: {\n        isCreatingLogs: true,\n      },\n    });\n    return newLog;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Message.html":{"url":"entities/Message.html","title":"entity - Message","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Message\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/message.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                author\n                            \n                            \n                                    Public\n                                content\n                            \n                            \n                                    Public\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chat/message.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chat/message.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chat/message.entity.ts:7\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport User from '../users/user.entity';\n \n@Entity()\nclass Message {\n  @PrimaryGeneratedColumn()\n  public id: number;\n \n  @Column()\n  public content: string;\n \n  @ManyToOne(() => User)\n  public author: User;\n}\n \nexport default Message;\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ObjectWithDto.html":{"url":"classes/ObjectWithDto.html","title":"class - ObjectWithDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ObjectWithDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/types/objectWithId.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/types/objectWithId.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber } from 'class-validator';\n\nclass ObjectWithDto {\n  @IsNumber()\n  id: number;\n}\n\nexport default ObjectWithDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OptimizeController.html":{"url":"controllers/OptimizeController.html","title":"controller - OptimizeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OptimizeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/optimize/optimize.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                optimize\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getJobResult\n                            \n                            \n                                    Async\n                                processImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getJobResult\n                        \n                    \n                \n            \n            \n                \n                    \n                    getJobResult(response: Response, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('image/:id')\n                \n            \n\n            \n                \n                    Defined in src/optimize/optimize.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        processImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    processImage(files: Express.Multer.File[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('image')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/optimize/optimize.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Express.Multer.File[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Param,\n  Post,\n  Res,\n  UploadedFiles,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { AnyFilesInterceptor } from '@nestjs/platform-express';\nimport { Response } from 'express';\nimport { InjectQueue } from '@nestjs/bull';\nimport { Queue } from 'bull';\nimport { Readable } from 'stream';\n\n@Controller('optimize')\nexport class OptimizeController {\n  constructor(\n    @InjectQueue('image')\n    private readonly imageQueue: Queue,\n  ) {}\n\n  @Post('image')\n  @UseInterceptors(AnyFilesInterceptor())\n  async processImage(@UploadedFiles() files: Express.Multer.File[]) {\n    const job = await this.imageQueue.add('optimize', {\n      files,\n    });\n\n    return {\n      jobId: job.id,\n    };\n  }\n\n  @Get('image/:id')\n  async getJobResult(@Res() response: Response, @Param('id') id: string) {\n    const job = await this.imageQueue.getJob(id);\n\n    if (!job) {\n      return response.sendStatus(404);\n    }\n    const isCompleted = await job.isCompleted();\n    if (!isCompleted) {\n      return response.sendStatus(202);\n    }\n    const result = Buffer.from(job.returnvalue);\n    const stream = Readable.from(result);\n    stream.pipe(response);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OptimizeModule.html":{"url":"modules/OptimizeModule.html","title":"module - OptimizeModule","body":"\n                   \n\n\n\n\n    Modules\n    OptimizeModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/optimize/optimize.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            OptimizeController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { OptimizeController } from './optimize.controller';\nimport { BullModule } from '@nestjs/bull';\nimport { join } from 'path';\n// import { ImageProcessor } from './image.processor';\n\n@Module({\n  imports: [\n    BullModule.registerQueue({\n      name: 'image',\n      processors: [\n        {\n          name: 'optimize',\n          path: join(__dirname, 'image.processor.js'),\n        },\n      ],\n    }),\n  ],\n  providers: [],\n  exports: [],\n  controllers: [OptimizeController],\n})\nexport class OptimizeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationParams.html":{"url":"classes/PaginationParams.html","title":"class - PaginationParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/types/paginationParam.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                limit\n                            \n                            \n                                    Optional\n                                offset\n                            \n                            \n                                    Optional\n                                startId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/types/paginationParam.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/types/paginationParam.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        startId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/types/paginationParam.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber, Min, IsOptional } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nexport class PaginationParams {\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  startId?: number;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(0)\n  offset?: number;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  limit?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                author\n                            \n                            \n                                    Public\n                                categories\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                paragraphs\n                            \n                            \n                                    Public\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index('post_authorId_index')@ManyToOne(undefined, author => author.posts)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, category => category.posts, {cascade: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        paragraphs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('text', {array: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import Category from '../categories/category.entity';\nimport User from '../users/user.entity';\nimport {\n  Column,\n  Entity,\n  PrimaryGeneratedColumn,\n  ManyToOne,\n  ManyToMany,\n  JoinTable,\n  Index,\n} from 'typeorm';\n\n@Entity()\nclass Post {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public title: string;\n\n  // @Column()\n  // public content: string;\n  @Column('text', {\n    array: true,\n  })\n  public paragraphs: string[];\n\n  // @Column({ nullable: true })\n  // public category?: string;\n\n  @Index('post_authorId_index')\n  @ManyToOne(() => User, (author: User) => author.posts)\n  public author: User;\n\n  @ManyToMany(() => Category, (category: Category) => category.posts, {\n    cascade: true,\n  })\n  @JoinTable()\n  public categories: Category[];\n}\n\nexport default Post;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PostCountResult.html":{"url":"interfaces/PostCountResult.html","title":"interface - PostCountResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PostCountResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/types/postCountBody.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            count\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface PostCountResult {\n  count: number;\n}\n\nexport default PostCountResult;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostNotFoundException.html":{"url":"classes/PostNotFoundException.html","title":"class - PostNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/exception/postNotFound.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postId: number)\n                    \n                \n                        \n                            \n                                Defined in src/posts/exception/postNotFound.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\nclass PostNotFoundException extends NotFoundException {\n  constructor(postId: number) {\n    super(`Post with id ${postId} not found`);\n  }\n}\nexport default PostNotFoundException;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PostSearchBody.html":{"url":"interfaces/PostSearchBody.html","title":"interface - PostSearchBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PostSearchBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/types/postsSearchBody.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            authorId\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            paragraphs\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        authorId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        authorId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        paragraphs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        paragraphs:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface PostSearchBody {\n  id: number;\n  title: string;\n  paragraphs: string[];\n  authorId: number;\n}\n\nexport default PostSearchBody;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PostSearchResult.html":{"url":"interfaces/PostSearchResult.html","title":"interface - PostSearchResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PostSearchResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/types/postSearchResponse.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            hits\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        hits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hits:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import PostSearchBody from './postsSearchBody.interface';\n\ninterface PostSearchResult {\n  hits: {\n    total: {\n      value: number;\n    };\n    hits: Array;\n  };\n}\n\nexport default PostSearchResult;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostSearchService.html":{"url":"injectables/PostSearchService.html","title":"injectable - PostSearchService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostSearchService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/postsSearch.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                index\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                count\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                indexPost\n                            \n                            \n                                    Async\n                                search\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(elasticsearchService: ElasticsearchService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/postsSearch.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        elasticsearchService\n                                                  \n                                                        \n                                                                    ElasticsearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        count\n                        \n                    \n                \n            \n            \n                \n                    \n                    count(text: string, fields: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/posts/postsSearch.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fields\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(postId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/postsSearch.service.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        indexPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    indexPost(post: Post)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/postsSearch.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                Post\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        search\n                        \n                    \n                \n            \n            \n                \n                    \n                    search(text: string, offset?: number, limit?: number, startId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/postsSearch.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    startId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(post: Post)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/postsSearch.service.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                Post\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'posts'\n                    \n                \n                    \n                        \n                                Defined in src/posts/postsSearch.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ElasticsearchService } from '@nestjs/elasticsearch';\nimport Post from './post.entity';\nimport PostCountResult from './types/postCountBody.interface';\nimport PostSearchResult from './types/postSearchResponse.interface';\nimport PostSearchBody from './types/postsSearchBody.interface';\n\n@Injectable()\nexport default class PostSearchService {\n  index = 'posts';\n\n  constructor(private readonly elasticsearchService: ElasticsearchService) {}\n\n  async indexPost(post: Post) {\n    return this.elasticsearchService.index({\n      index: this.index,\n      body: {\n        id: post.id,\n        title: post.title,\n        paragraphs: post.paragraphs,\n        authorId: post.author.id,\n      },\n    });\n  }\n\n  async count(text: string, fields: string[]) {\n    const { body } = await this.elasticsearchService.count({\n      index: this.index,\n      body: {\n        query: {\n          multi_match: {\n            query: text,\n            fields: fields,\n          },\n        },\n      },\n    });\n    return body.count;\n  }\n\n  async search(text: string, offset?: number, limit?: number, startId = 0) {\n    let separateCount = 0;\n    if (startId) {\n      separateCount = await this.count(text, ['title', 'paragraphs']);\n    }\n    console.log(['sep'], separateCount);\n    const { body } = await this.elasticsearchService.search({\n      index: this.index,\n      from: offset,\n      size: limit,\n      body: {\n        query: {\n          bool: {\n            must: {\n              // sửa lại của tác giả từ should => must\n              multi_match: {\n                query: text,\n                fields: ['title', 'paragraphs'],\n              },\n            },\n            filter: {\n              range: {\n                id: {\n                  gt: startId,\n                },\n              },\n            },\n          },\n        },\n        sort: {\n          id: {\n            order: 'asc',\n          },\n        },\n      },\n    });\n    const count = body.hits.total.value;\n    const hits = body.hits.hits;\n    const results = hits.map((item) => item._source);\n    console.log(['search 2'], results);\n\n    return {\n      count: startId ? separateCount : count,\n      results,\n    };\n  }\n\n  async delete(postId: number) {\n    console.log(['dadad'], postId);\n\n    this.elasticsearchService.deleteByQuery({\n      index: this.index,\n      body: {\n        query: {\n          match: {\n            id: postId,\n          },\n        },\n      },\n    });\n  }\n\n  async update(post: Post) {\n    const newBody: PostSearchBody = {\n      id: post.id,\n      title: post.title,\n      paragraphs: post.paragraphs,\n      authorId: post.author.id,\n    };\n\n    console.log(['this is newpost'], newBody);\n\n    const script = Object.entries(newBody).reduce((result, [key, value]) => {\n      console.log(['result'], result);\n\n      return `${result} ctx._source.${key}='${value}';`;\n    }, '');\n\n    const postUpdate = await this.elasticsearchService.updateByQuery({\n      index: this.index,\n      body: {\n        query: {\n          match: {\n            id: post.id,\n          },\n        },\n        script: {\n          inline: script,\n        },\n      },\n    });\n    return postUpdate;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                getPostById\n                            \n                            \n                                getPosts\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(post: CreatePostDto, req: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtTwoFactorGuard)\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPostById\n                        \n                    \n                \n            \n            \n                \ngetPostById(undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPosts\n                        \n                    \n                \n            \n            \n                \ngetPosts(search: string, undefined: PaginationParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(HttpCacheInterceptor)@CacheKey(GET_POSTS_CACHE_KEY)@CacheTTL(120)@Get()\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    search\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                PaginationParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(undefined: FindOneParams, post: updatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    post\n                                    \n                                                updatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  CacheInterceptor,\n  CacheKey,\n  CacheTTL,\n  ClassSerializerInterceptor,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Put,\n  Query,\n  Req,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport PostsService from './posts.service';\nimport CreatePostDto from './dto/createPost.dto';\nimport UploadPostDto from './dto/updatePost.dto';\nimport FindOneParams from '../utils/findOneParams';\nimport updatePostDto from './dto/updatePost.dto';\nimport { ExcludeNullInterceptor } from '../utils/excludeNull.interceptor';\nimport JwtAuthenticationGuard from '../authentication/jwt-authentication.guard';\nimport RequestWithUser from '../authentication/requestWithUser.interface';\nimport { PaginationParams } from '../utils/types/paginationParam';\nimport { GET_POSTS_CACHE_KEY } from './postsCacheKey.constant';\nimport { HttpCacheInterceptor } from './httpCache.interceptor';\nimport JwtTwoFactorGuard from 'src/authentication/jwt-two-factor.guards';\n@Controller('posts')\n@UseInterceptors(ClassSerializerInterceptor) // những thuộc tính có @Exclude() sẽ không được trả về\nexport default class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  @UseInterceptors(HttpCacheInterceptor) // Tự động caching phản hồi\n  @CacheKey(GET_POSTS_CACHE_KEY)\n  @CacheTTL(120)\n  @Get()\n  // @UseInterceptors(ExcludeNullInterceptor) // Không trả về thuộc tính null\n  getPosts(\n    @Query('search') search: string,\n    @Query() { offset, limit, startId }: PaginationParams,\n  ) {\n    if (search) {\n      console.log(['limit'], limit);\n\n      return this.postsService.searchForPosts(search, offset, limit, startId);\n    }\n    return this.postsService.getPostsWithAuthor(offset, limit, startId);\n  }\n\n  @Get(':id')\n  getPostById(@Param() { id }: FindOneParams) {\n    console.log(['all'], id);\n    return this.postsService.getPostById(Number(id));\n  }\n\n  @Post()\n  @UseGuards(JwtTwoFactorGuard)\n  async createPost(@Body() post: CreatePostDto, @Req() req: RequestWithUser) {\n    return this.postsService.createPost(post, req.user);\n  }\n\n  @Patch(':id')\n  async updatePost(\n    @Param() { id }: FindOneParams,\n    @Body() post: updatePostDto,\n  ) {\n    return this.postsService.updatePost(Number(id), post);\n  }\n\n  @Delete(':id')\n  async deletePost(@Param('id') id: string) {\n    this.postsService.deletePost(Number(id));\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nSearchModule\n\nSearchModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nSearchModule->PostsModule\n\n\n\n\n\nPostSearchService\n\nPostSearchService\n\nPostsModule -->\n\nPostSearchService->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostSearchService\n                        \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SearchModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, CacheModule } from '@nestjs/common';\nimport PostsService from './posts.service';\nimport PostsController from './posts.controller';\nimport Postentity from './post.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { SearchModule } from '../search/search.module';\nimport PostSearchService from './postsSearch.service';\nimport * as redisStore from 'cache-manager-redis-store';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Postentity]),\n    SearchModule,\n    CacheModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        store: redisStore,\n        host: configService.get('REDIS_HOST'),\n        port: configService.get('REDIS_PORT'),\n        ttl: 120,\n      }),\n    }),\n  ],\n  controllers: [PostsController],\n  providers: [PostsService, PostSearchService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                clearCache\n                            \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getPostById\n                            \n                            \n                                    Async\n                                getPosts\n                            \n                            \n                                    Async\n                                getPostsWithAuthor\n                            \n                            \n                                    Async\n                                searchForPosts\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postsRepository: Repository, postsSearchService: PostSearchService, cacheManager: Cache)\n                    \n                \n                        \n                            \n                                Defined in src/posts/posts.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postsSearchService\n                                                  \n                                                        \n                                                                        PostSearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cacheManager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        clearCache\n                        \n                    \n                \n            \n            \n                \n                    \n                    clearCache()\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(post: CreatePostDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPostById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPosts(offset?: number, limit?: number, startId?: number, options?: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    startId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                FindManyOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPostsWithAuthor\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostsWithAuthor(offset?: number, limit?: number, startId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    startId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchForPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchForPosts(text: string, offset?: number, limit?: number, startId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    startId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(id: number, post: UploadPostDto)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    post\n                                    \n                                                UploadPostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(PostsService.name)\n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.service.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { CACHE_MANAGER, Inject, Injectable, Logger } from '@nestjs/common';\nimport CreatePostDto from './dto/createPost.dto';\n// import Post from './post.interface';\nimport UploadPostDto from './dto/updatePost.dto';\nimport Post from './post.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { FindManyOptions, In, MoreThan, Repository } from 'typeorm';\nimport PostNotFoundException from './exception/postNotFound.exception';\nimport User from '../users/user.entity';\nimport PostSearchService from './postsSearch.service';\nimport { Cache } from 'cache-manager';\nimport { GET_POSTS_CACHE_KEY } from './postsCacheKey.constant';\n@Injectable()\nexport default class PostsService {\n  private readonly logger = new Logger(PostsService.name);\n\n  constructor(\n    @InjectRepository(Post)\n    private postsRepository: Repository,\n    private postsSearchService: PostSearchService,\n    @Inject(CACHE_MANAGER) private cacheManager: Cache,\n  ) {}\n\n  async clearCache() {\n    const keys: string[] = await this.cacheManager.store.keys();\n    keys.forEach((key) => {\n      if (key.startsWith(GET_POSTS_CACHE_KEY)) {\n        this.cacheManager.del(key);\n      }\n    });\n  }\n\n  async getPosts(\n    offset?: number,\n    limit?: number,\n    startId?: number,\n    options?: FindManyOptions,\n  ) {\n    const where: FindManyOptions['where'] = {};\n    let separateCount = 0;\n    if (startId) {\n      where.id = MoreThan(startId);\n      separateCount = await this.postsRepository.count();\n    }\n    const [items, count] = await this.postsRepository.findAndCount({\n      where,\n      order: {\n        id: 'ASC',\n      },\n      skip: offset,\n      take: limit,\n      ...options,\n    });\n    console.log(['Hello']);\n\n    return { items, count: startId ? separateCount : count };\n  }\n\n  async getPostsWithAuthor(offset?: number, limit?: number, startId?: number) {\n    return this.getPosts(offset, limit, startId, {\n      relations: ['author'], // Bao gồm tác giả trong phản hồi\n    });\n  }\n\n  async getPostById(id: number) {\n    const post = await this.postsRepository.findOne({\n      where: { id: id },\n      relations: ['author'],\n    });\n    if (post) {\n      return post;\n    }\n    this.logger.warn('Tried to access a post that does not exist');\n    throw new PostNotFoundException(id);\n  }\n\n  async createPost(post: CreatePostDto, user: User) {\n    const newPost = await this.postsRepository.create({\n      ...post,\n      author: user,\n    });\n    await this.postsRepository.save(newPost);\n    await this.postsSearchService.indexPost(newPost);\n    await this.clearCache();\n    return newPost;\n  }\n\n  async updatePost(id: number, post: UploadPostDto) {\n    await this.postsRepository.update(id, post);\n    const updatePost = await this.postsRepository.findOne({\n      where: { id: id },\n      relations: ['author'],\n    });\n    if (updatePost) {\n      await this.postsSearchService.update(updatePost);\n      await this.clearCache();\n      return updatePost;\n    }\n    throw new PostNotFoundException(id);\n  }\n\n  async deletePost(id: number) {\n    const deletePost = await this.postsRepository.delete(id);\n    if (!deletePost.affected) {\n      throw new PostNotFoundException(id);\n    }\n    await this.postsSearchService.delete(id);\n    await this.clearCache();\n  }\n\n  async searchForPosts(\n    text: string,\n    offset?: number,\n    limit?: number,\n    startId?: number,\n  ) {\n    const { results, count } = await this.postsSearchService.search(\n      text,\n      offset,\n      limit,\n      startId,\n    );\n\n    const ids = results.map((result) => result.id);\n    console.log(['search'], ids);\n\n    if (!ids.length) {\n      return {\n        items: [],\n        count,\n      };\n    }\n    const items = await this.postsRepository.find({\n      where: { id: In(ids) },\n      relations: ['author'],\n    });\n    return {\n      items,\n      count,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PrivateFile.html":{"url":"entities/PrivateFile.html","title":"entity - PrivateFile","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PrivateFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/privateFiles/privateFile.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                key\n                            \n                            \n                                    Public\n                                owner\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/privateFiles/privateFile.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/privateFiles/privateFile.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, owner => owner.files)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/privateFiles/privateFile.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport User from '../users/user.entity';\n\n@Entity()\nclass PrivateFile {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public key: string;\n\n  @ManyToOne(() => User, (owner: User) => owner.files)\n  public owner: User;\n}\n\nexport default PrivateFile;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrivateFileService.html":{"url":"injectables/PrivateFileService.html","title":"injectable - PrivateFileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrivateFileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/privateFiles/privateFiles.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                generatePresignedUrl\n                            \n                            \n                                    Public\n                                    Async\n                                getPrivateFile\n                            \n                            \n                                    Async\n                                uploadPrivateFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(privateFilesRepository: Repository, consfigService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/privateFiles/privateFiles.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        privateFilesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        consfigService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        generatePresignedUrl\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePresignedUrl(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/privateFiles/privateFiles.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getPrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrivateFile(fileId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/privateFiles/privateFiles.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPrivateFile(dataBuffer: Buffer, ownerId: number, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/privateFiles/privateFiles.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ownerId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { S3 } from 'aws-sdk';\nimport { ConfigService } from '@nestjs/config';\nimport { v4 as uuid } from 'uuid';\nimport PrivateFile from './privateFile.entity';\n\n@Injectable()\nexport class PrivateFileService {\n  constructor(\n    @InjectRepository(PrivateFile)\n    private privateFilesRepository: Repository,\n    private readonly consfigService: ConfigService,\n  ) {}\n\n  async uploadPrivateFile(\n    dataBuffer: Buffer,\n    ownerId: number,\n    filename: string,\n  ) {\n    const s3 = new S3();\n    const uploadResult = await s3\n      .upload({\n        Bucket: this.consfigService.get('AWS_PRIVATE_BUCKET_NAME'),\n        Body: dataBuffer,\n        Key: `${uuid()}-${filename}`,\n      })\n      .promise();\n\n    const newFile = this.privateFilesRepository.create({\n      key: uploadResult.Key,\n      owner: {\n        id: ownerId,\n      },\n    });\n    await this.privateFilesRepository.save(newFile);\n    return newFile;\n  }\n\n  public async getPrivateFile(fileId: number) {\n    const s3 = new S3();\n    const fileInfo = await this.privateFilesRepository.findOne({\n      where: { id: fileId },\n      relations: ['owner'],\n    });\n\n    if (fileInfo) {\n      const stream = await s3\n        .getObject({\n          Bucket: this.consfigService.get('AWS_PRIVATE_BUCKET_NAME'),\n          Key: fileInfo.key,\n        })\n        .createReadStream();\n\n      return {\n        stream,\n        info: fileInfo,\n      };\n    }\n    throw new NotFoundException();\n  }\n\n  public async generatePresignedUrl(key: string) {\n    const s3 = new S3();\n    return s3.getSignedUrlPromise('getObject', {\n      Bucket: this.consfigService.get('AWS_PRIVATE_BUCKET_NAME'),\n      Key: key,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrivateFilesModule.html":{"url":"modules/PrivateFilesModule.html","title":"module - PrivateFilesModule","body":"\n                   \n\n\n\n\n    Modules\n    PrivateFilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PrivateFilesModule\n\n\n\ncluster_PrivateFilesModule_exports\n\n\n\ncluster_PrivateFilesModule_providers\n\n\n\n\nPrivateFileService \n\nPrivateFileService \n\n\n\nPrivateFilesModule\n\nPrivateFilesModule\n\nPrivateFileService  -->\n\nPrivateFilesModule->PrivateFileService \n\n\n\n\n\nPrivateFileService\n\nPrivateFileService\n\nPrivateFilesModule -->\n\nPrivateFileService->PrivateFilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/privateFiles/privateFiles.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrivateFileService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrivateFileService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PrivateFileService } from './privateFiles.service';\nimport { ConfigModule } from '@nestjs/config';\nimport PrivateFile from './privateFile.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([PrivateFile]), ConfigModule],\n  providers: [PrivateFileService],\n  exports: [PrivateFileService],\n})\nexport class PrivateFilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Product.html":{"url":"entities/Product.html","title":"entity - Product","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/product.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                category\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                properties\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProductCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, category => category.products, {eager: true, cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CarProperties | BookProperties\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'jsonb'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import ProductCategory from 'src/productCategories/productCategories.entity';\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { BookProperties } from './types/bookProperties.interface';\nimport { CarProperties } from './types/carProperties.interface';\n\n@Entity()\nclass Product {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public name: string;\n\n  @ManyToOne(\n    () => ProductCategory,\n    (category: ProductCategory) => category.products,\n    {\n      eager: true,\n      cascade: true,\n    },\n  )\n  public category: ProductCategory;\n\n  @Column({\n    type: 'jsonb',\n  })\n  public properties: CarProperties | BookProperties;\n}\n\nexport default Product;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductCategoriesController.html":{"url":"controllers/ProductCategoriesController.html","title":"controller - ProductCategoriesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductCategoriesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/productCategories/productCategories.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                product-categories\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createProduct\n                            \n                            \n                                getAllProducts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                    \n                    createProduct(productCategory: CreateProductCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/productCategories/productCategories.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    productCategory\n                                    \n                                                CreateProductCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllProducts\n                        \n                    \n                \n            \n            \n                \ngetAllProducts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/productCategories/productCategories.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  UseGuards,\n  UseInterceptors,\n  ClassSerializerInterceptor,\n  Post,\n} from '@nestjs/common';\nimport JwtAuthenticationGuard from '../authentication/jwt-authentication.guard';\nimport ProductCategoriesService from './productCategories.service';\nimport { CreateProductCategoryDto } from './dto/createProductCategory.dto';\n\n@Controller('product-categories')\n@UseInterceptors(ClassSerializerInterceptor)\nexport default class ProductCategoriesController {\n  constructor(private readonly productService: ProductCategoriesService) {}\n\n  @Get()\n  getAllProducts() {\n    return this.productService.getAllProductCategories();\n  }\n\n  @Post()\n  @UseGuards(JwtAuthenticationGuard)\n  async createProduct(@Body() productCategory: CreateProductCategoryDto) {\n    return this.productService.createProductCategory(productCategory);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductCategoriesModule.html":{"url":"modules/ProductCategoriesModule.html","title":"module - ProductCategoriesModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductCategoriesModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/productCategories/productCategories.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            ProductCategoriesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport ProductCategory from './productCategories.entity';\nimport ProductCategoriesController from './productCategories.controller';\nimport ProductCategoriesService from './productCategories.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([ProductCategory])],\n  controllers: [ProductCategoriesController],\n  providers: [ProductCategoriesService],\n})\nexport class ProductCategoriesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ProductCategory.html":{"url":"entities/ProductCategory.html","title":"entity - ProductCategory","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ProductCategory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/productCategories/productCategories.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                products\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/productCategories/productCategories.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/productCategories/productCategories.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        products\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Product[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, product => product.category)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/productCategories/productCategories.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport Product from '../products/product.entity';\n\n@Entity()\nclass ProductCategory {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public name: string;\n\n  @OneToMany(() => Product, (product: Product) => product.category)\n  public products: Product[];\n}\n\nexport default ProductCategory;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductService.html":{"url":"injectables/ProductService.html","title":"injectable - ProductService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/products.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createProduct\n                            \n                            \n                                getAllProducts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/products/products.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                    \n                    createProduct(product: CreateProductDto)\n                \n            \n\n\n            \n                \n                    Defined in src/products/products.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    product\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllProducts\n                        \n                    \n                \n            \n            \n                \ngetAllProducts()\n                \n            \n\n\n            \n                \n                    Defined in src/products/products.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport Product from './product.entity';\nimport CreateProductDto from './dto/createProduct.dto';\n\n@Injectable()\nexport default class ProductService {\n  constructor(\n    @InjectRepository(Product)\n    private productRepository: Repository,\n  ) {}\n\n  getAllProducts() {\n    return this.productRepository.find();\n  }\n\n  async createProduct(product: CreateProductDto) {\n    const newProduct = await this.productRepository.create(product);\n    await this.productRepository.save(newProduct);\n    return newProduct;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductsController.html":{"url":"controllers/ProductsController.html","title":"controller - ProductsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/products.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                products\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createProduct\n                            \n                            \n                                getAllProducts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                    \n                    createProduct(product: CreateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/products/products.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    product\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllProducts\n                        \n                    \n                \n            \n            \n                \ngetAllProducts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/products/products.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  UseGuards,\n  UseInterceptors,\n  ClassSerializerInterceptor,\n  Post,\n} from '@nestjs/common';\nimport JwtAuthenticationGuard from '../authentication/jwt-authentication.guard';\nimport CreateProductDto from './dto/createProduct.dto';\nimport ProductsService from './products.service';\n\n@Controller('products')\n@UseInterceptors(ClassSerializerInterceptor)\nexport default class ProductsController {\n  constructor(private readonly productsService: ProductsService) {}\n\n  @Get()\n  getAllProducts() {\n    return this.productsService.getAllProducts();\n  }\n\n  @Post()\n  @UseGuards(JwtAuthenticationGuard)\n  async createProduct(@Body() product: CreateProductDto) {\n    return this.productsService.createProduct(product);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductsModule.html":{"url":"modules/ProductsModule.html","title":"module - ProductsModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductsModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/products/products.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            ProductsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport Product from './product.entity';\nimport ProductsController from './products.controller';\nimport ProductsService from './products.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Product])],\n  controllers: [ProductsController],\n  providers: [ProductsService],\n})\nexport class ProductsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PublicFile.html":{"url":"entities/PublicFile.html","title":"entity - PublicFile","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PublicFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/files/publicFile.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                key\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/files/publicFile.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/files/publicFile.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/files/publicFile.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nclass PublicFile {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public url: string;\n\n  @Column()\n  public key: string;\n}\n\nexport default PublicFile;\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/dto/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(7)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Matches(/^\\+[1-9]\\d{1,14}$/)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsString,\n  IsNotEmpty,\n  MinLength,\n  Matches,\n} from 'class-validator';\nexport class RegisterDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(7)\n  password: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^\\+[1-9]\\d{1,14}$/)\n  phoneNumber: string;\n}\n\nexport default RegisterDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithRawBody.html":{"url":"interfaces/RequestWithRawBody.html","title":"interface - RequestWithRawBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithRawBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripeWebhook/requestWithRawBody.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            rawBody\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        rawBody\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rawBody:     Buffer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Buffer\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\n\ninterface RequestWithRawBody extends Request {\n  rawBody: Buffer;\n}\n\nexport default RequestWithRawBody;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/requestWithUser.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport User from \"../users/user.entity\";\n\ninterface RequestWithUser extends Request {\n  user: User;\n}\n\n\nexport default RequestWithUser;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SearchModule.html":{"url":"modules/SearchModule.html","title":"module - SearchModule","body":"\n                   \n\n\n\n\n    Modules\n    SearchModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/search/search.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { ElasticsearchModule } from '@nestjs/elasticsearch';\n\n@Module({\n  imports: [\n    ConfigModule,\n    ElasticsearchModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        node: configService.get('ELASTICSEARCH_NODE'),\n        auth: {\n          username: configService.get('ELASTICSEARCH_USERNAME'),\n          password: configService.get('ELASTICSEARCH_PASSWORD'),\n        },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  exports: [ElasticsearchModule],\n})\nexport class SearchModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetDefaultCreditCardDto.html":{"url":"classes/SetDefaultCreditCardDto.html","title":"class - SetDefaultCreditCardDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetDefaultCreditCardDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/credit-cards/dto/setDefaultCreditCard.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                paymentMethodId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        paymentMethodId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/credit-cards/dto/setDefaultCreditCard.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class SetDefaultCreditCardDto {\n  @IsString()\n  @IsNotEmpty()\n  paymentMethodId: string;\n}\n\nexport default SetDefaultCreditCardDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SmsController.html":{"url":"controllers/SmsController.html","title":"controller - SmsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SmsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sms/sms.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                sms\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkVerificationCode\n                            \n                            \n                                    Async\n                                initiatePhoneNumberVerification\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkVerificationCode\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkVerificationCode(request: RequestWithUser, verificationData: CheckVerificationCodeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('check-verification-code')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/sms/sms.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    verificationData\n                                    \n                                                CheckVerificationCodeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        initiatePhoneNumberVerification\n                        \n                    \n                \n            \n            \n                \n                    \n                    initiatePhoneNumberVerification(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('initiate-verification')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/sms/sms.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  UseGuards,\n  UseInterceptors,\n  ClassSerializerInterceptor,\n  Post,\n  Req,\n  BadRequestException,\n  Body,\n} from '@nestjs/common';\nimport SmsService from './sms.service';\nimport JwtAuthenticationGuard from '../authentication/jwt-authentication.guard';\nimport RequestWithUser from '../authentication/requestWithUser.interface';\nimport CheckVerificationCodeDto from './dto/checkVerificationCode.dto';\n\n@Controller('sms')\n@UseInterceptors(ClassSerializerInterceptor)\nexport default class SmsController {\n  constructor(private readonly smsService: SmsService) {}\n\n  @Post('initiate-verification')\n  @UseGuards(JwtAuthenticationGuard)\n  async initiatePhoneNumberVerification(@Req() request: RequestWithUser) {\n    if (request.user.isPhoneNumberConfirmed) {\n      throw new BadRequestException('Phone number already confirmed');\n    }\n    await this.smsService.initiatePhoneNumberVerification(\n      request.user.phoneNumber,\n    );\n  }\n\n  @Post('check-verification-code')\n  @UseGuards(JwtAuthenticationGuard)\n  async checkVerificationCode(\n    @Req() request: RequestWithUser,\n    @Body() verificationData: CheckVerificationCodeDto,\n  ) {\n    console.log(['code'], verificationData);\n\n    if (request.user.isPhoneNumberConfirmed) {\n      throw new BadRequestException('Phone number already confirmed');\n    }\n    await this.smsService.confirmPhoneNumber(\n      request.user.id,\n      request.user.phoneNumber,\n      verificationData.code,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SmsModule.html":{"url":"modules/SmsModule.html","title":"module - SmsModule","body":"\n                   \n\n\n\n\n    Modules\n    SmsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SmsModule\n\n\n\ncluster_SmsModule_exports\n\n\n\ncluster_SmsModule_imports\n\n\n\ncluster_SmsModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nSmsModule\n\nSmsModule\n\nSmsModule -->\n\nUserModule->SmsModule\n\n\n\n\n\nSmsService \n\nSmsService \n\nSmsService  -->\n\nSmsModule->SmsService \n\n\n\n\n\nSmsService\n\nSmsService\n\nSmsModule -->\n\nSmsService->SmsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/sms/sms.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SmsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SmsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SmsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport SmsService from './sms.service';\nimport SmsController from './sms.controller';\nimport { UserModule } from '../users/users.module';\n\n@Module({\n  imports: [ConfigModule, UserModule],\n  controllers: [SmsController],\n  providers: [SmsService],\n  exports: [SmsService]\n})\nexport class SmsModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SmsService.html":{"url":"injectables/SmsService.html","title":"injectable - SmsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SmsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sms/sms.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                twilioClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                confirmPhoneNumber\n                            \n                            \n                                initiatePhoneNumberVerification\n                            \n                            \n                                    Async\n                                sendMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/sms/sms.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        confirmPhoneNumber\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmPhoneNumber(userId: number, phoneNumber: string, verificationCode: string)\n                \n            \n\n\n            \n                \n                    Defined in src/sms/sms.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    phoneNumber\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    verificationCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initiatePhoneNumberVerification\n                        \n                    \n                \n            \n            \n                \ninitiatePhoneNumberVerification(phoneNumber: string)\n                \n            \n\n\n            \n                \n                    Defined in src/sms/sms.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    phoneNumber\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMessage(receiverPhoneNumber: string, message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/sms/sms.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    receiverPhoneNumber\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        twilioClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Twilio\n\n                    \n                \n                    \n                        \n                                Defined in src/sms/sms.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  Post,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport JwtAuthenticationGuard from 'src/authentication/jwt-authentication.guard';\nimport RequestWithUser from 'src/authentication/requestWithUser.interface';\nimport { Twilio } from 'twilio';\nimport { UserService } from '../users/user.service';\n\n@Injectable()\nexport default class SmsService {\n  private twilioClient: Twilio;\n\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly usersService: UserService,\n  ) {\n    const accountSid = configService.get('TWILIO_ACCOUNT_SID');\n    const authToken = configService.get('TWILIO_AUTH_TOKEN');\n\n    this.twilioClient = new Twilio(accountSid, authToken);\n  }\n\n  initiatePhoneNumberVerification(phoneNumber: string) {\n    const serviceSid = this.configService.get(\n      'TWILIO_VERIFICATION_SERVICE_SID',\n    );\n    return this.twilioClient.verify\n      .services(serviceSid)\n      .verifications.create({ to: phoneNumber, channel: 'sms', locale: 'vi' });\n  }\n\n  async confirmPhoneNumber(\n    userId: number,\n    phoneNumber: string,\n    verificationCode: string,\n  ) {\n    const serviceId = this.configService.get('TWILIO_VERIFICATION_SERVICE_SID');\n\n    const result = await this.twilioClient.verify\n      .services(serviceId)\n      .verificationChecks.create({\n        to: phoneNumber,\n        code: verificationCode,\n      });\n\n    if (!result.valid || result.status !== 'approved') {\n      throw new BadRequestException('Wrong code provided');\n    }\n\n    await this.usersService.markPhoneNumberAsConfirmed(userId);\n  }\n\n  async sendMessage(receiverPhoneNumber: string, message: string) {\n    const senderPhoneNumber = this.configService.get(\n      'TWILIO_SENDER_PHONE_NUMBER',\n    );\n    return this.twilioClient.messages.create({\n      body: message,\n      from: senderPhoneNumber,\n      to: receiverPhoneNumber,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/StripeEvent.html":{"url":"entities/StripeEvent.html","title":"entity - StripeEvent","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  StripeEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripeWebhook/stripeEvent.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stripeWebhook/stripeEvent.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, PrimaryColumn } from 'typeorm';\n\n@Entity()\nclass StripeEvent {\n  @PrimaryColumn()\n  public id: string;\n}\n\nexport default StripeEvent;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeModule.html":{"url":"modules/StripeModule.html","title":"module - StripeModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeModule\n\n\n\ncluster_StripeModule_exports\n\n\n\ncluster_StripeModule_providers\n\n\n\n\nStripeService \n\nStripeService \n\n\n\nStripeModule\n\nStripeModule\n\nStripeService  -->\n\nStripeModule->StripeService \n\n\n\n\n\nStripeService\n\nStripeService\n\nStripeModule -->\n\nStripeService->StripeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stripe/stripe.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StripeService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripeService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport StripeService from './stripe.service';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [ConfigModule],\n  providers: [StripeService],\n  exports: [StripeService]\n})\nexport class StripeModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeService.html":{"url":"injectables/StripeService.html","title":"injectable - StripeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripe/stripe.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                stripe\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                attachCreditCard\n                            \n                            \n                                    Public\n                                    Async\n                                charge\n                            \n                            \n                                    Public\n                                    Async\n                                constructEventFromPayload\n                            \n                            \n                                    Public\n                                    Async\n                                createCustomer\n                            \n                            \n                                    Public\n                                    Async\n                                createSubscription\n                            \n                            \n                                    Public\n                                    Async\n                                listCreditCards\n                            \n                            \n                                    Public\n                                    Async\n                                listSubscriptions\n                            \n                            \n                                    Public\n                                    Async\n                                setDefaultCreditCard\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/stripe/stripe.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        attachCreditCard\n                        \n                    \n                \n            \n            \n                \n                    \n                    attachCreditCard(paymentMethodId: string, customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paymentMethodId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        charge\n                        \n                    \n                \n            \n            \n                \n                    \n                    charge(amount: number, paymentMethodId: string, customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    paymentMethodId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        constructEventFromPayload\n                        \n                    \n                \n            \n            \n                \n                    \n                    constructEventFromPayload(signature: string, payload: Buffer)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signature\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createCustomer\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCustomer(name: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createSubscription\n                        \n                    \n                \n            \n            \n                \n                    \n                    createSubscription(priceId: string, customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    priceId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        listCreditCards\n                        \n                    \n                \n            \n            \n                \n                    \n                    listCreditCards(customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        listSubscriptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    listSubscriptions(priceId: string, customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    priceId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        setDefaultCreditCard\n                        \n                    \n                \n            \n            \n                \n                    \n                    setDefaultCreditCard(paymentMethodId: string, customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paymentMethodId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        stripe\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Stripe\n\n                    \n                \n                    \n                        \n                                Defined in src/stripe/stripe.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  InternalServerErrorException,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport StripeError from 'src/utils/stripeError.enum';\nimport Stripe from 'stripe';\n\n@Injectable()\nexport default class StripeService {\n  private stripe: Stripe;\n\n  constructor(private configService: ConfigService) {\n    this.stripe = new Stripe(configService.get('STRIPE_SECRET_KEY'), {\n      apiVersion: '2020-08-27',\n    });\n  }\n\n  public async createCustomer(name: string, email: string) {\n    return this.stripe.customers.create({\n      name,\n      email,\n    });\n  }\n\n  public async charge(\n    amount: number,\n    paymentMethodId: string,\n    customerId: string,\n  ) {\n    return this.stripe.paymentIntents.create({\n      amount,\n      customer: customerId,\n      payment_method: paymentMethodId,\n      currency: this.configService.get('STRIPE_CURRENCY'),\n      off_session: true,\n      confirm: true,\n    });\n  }\n\n  public async attachCreditCard(paymentMethodId: string, customerId: string) {\n    return this.stripe.setupIntents.create({\n      customer: customerId,\n      payment_method: paymentMethodId,\n    });\n  }\n\n  public async listCreditCards(customerId: string) {\n    return this.stripe.paymentMethods.list({\n      customer: customerId,\n      type: 'card',\n      expand: ['data.latest_invoice', 'data.latest_invoice.payment_intent'],\n    });\n  }\n\n  public async setDefaultCreditCard(\n    paymentMethodId: string,\n    customerId: string,\n  ) {\n    try {\n      return await this.stripe.customers.update(customerId, {\n        invoice_settings: {\n          default_payment_method: paymentMethodId,\n        },\n      });\n    } catch (error) {\n      if (error?.type === StripeError.InvalidRequest) {\n        throw new BadRequestException('Wrong credit card chosen');\n      }\n      throw new InternalServerErrorException();\n    }\n  }\n\n  public async createSubscription(priceId: string, customerId: string) {\n    try {\n      return await this.stripe.subscriptions.create({\n        customer: customerId,\n        items: [\n          {\n            price: priceId,\n          },\n        ],\n      });\n    } catch (error) {\n      if (error?.code === StripeError.ResourceMissing) {\n        throw new BadRequestException('Credit card not set up');\n      }\n      throw new InternalServerErrorException();\n    }\n  }\n\n  public async listSubscriptions(priceId: string, customerId: string) {\n    return this.stripe.subscriptions.list({\n      customer: customerId,\n      price: priceId,\n    });\n  }\n\n  public async constructEventFromPayload(signature: string, payload: Buffer) {\n    const webhookSecret = this.configService.get('STRIPE_WEBHOOK_SECRET');\n    return this.stripe.webhooks.constructEvent(\n      payload,\n      signature,\n      webhookSecret,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StripeWebhookController.html":{"url":"controllers/StripeWebhookController.html","title":"controller - StripeWebhookController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StripeWebhookController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripeWebhook/stripeWebhook.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                webhook\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleIncomingEvents\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleIncomingEvents\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleIncomingEvents(signature: string, request: RequestWithRawBody)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/stripeWebhook/stripeWebhook.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signature\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithRawBody\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  BadRequestException,\n  Req,\n  Headers,\n} from '@nestjs/common';\nimport { UserService } from 'src/users/user.service';\nimport Stripe from 'stripe';\nimport StripeService from '../stripe/stripe.service';\nimport RequestWithRawBody from '../stripeWebhook/requestWithRawBody.interface';\nimport stripeWebhookService from './stripeWebhook.service';\n\n@Controller('webhook')\nexport default class StripeWebhookController {\n  constructor(\n    private readonly stripeService: StripeService,\n    private readonly userService: UserService,\n    private readonly stripeWebhookService: stripeWebhookService,\n  ) {}\n\n  @Post()\n  async handleIncomingEvents(\n    @Headers('stripe-signature') signature: string,\n    @Req() request: RequestWithRawBody,\n  ) {\n    console.log(['ooo'], request.rawBody);\n\n    if (!signature) {\n      throw new BadRequestException('Missing stripe-signature header');\n    }\n    const event = await this.stripeService.constructEventFromPayload(\n      signature,\n      request.rawBody,\n    );\n\n    if (\n      event.type === 'customer.subscription.updated' ||\n      event.type === 'customer.subscription.created'\n    ) {\n      return this.stripeWebhookService.processSubscriptionUpdate(event);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeWebhookModule.html":{"url":"modules/StripeWebhookModule.html","title":"module - StripeWebhookModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeWebhookModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeWebhookModule\n\n\n\ncluster_StripeWebhookModule_imports\n\n\n\n\nStripeModule\n\nStripeModule\n\n\n\nStripeWebhookModule\n\nStripeWebhookModule\n\nStripeWebhookModule -->\n\nStripeModule->StripeWebhookModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nStripeWebhookModule -->\n\nUserModule->StripeWebhookModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stripeWebhook/stripeWebhook.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            StripeWebhookController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StripeModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport StripeWebhookController from './stripeWebhook.controller';\nimport { StripeModule } from '../stripe/stripe.module';\nimport { UserModule } from '../users/users.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport StripeEvent from './stripeEvent.entity';\nimport StripeWebhookService from './stripeWebhook.service';\n\n@Module({\n  imports: [StripeModule, UserModule, TypeOrmModule.forFeature([StripeEvent])],\n  controllers: [StripeWebhookController],\n  providers: [StripeWebhookService],\n})\nexport class StripeWebhookModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SubscriptionsController.html":{"url":"controllers/SubscriptionsController.html","title":"controller - SubscriptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SubscriptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscriptions/subscriptions.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                subscriptions\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createMonthlySubscription\n                            \n                            \n                                    Async\n                                getMonthlySubscription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createMonthlySubscription\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMonthlySubscription(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('monthly')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/subscriptions/subscriptions.controller.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getMonthlySubscription\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMonthlySubscription(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('monthly')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/subscriptions/subscriptions.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Req, UseGuards, Get } from '@nestjs/common';\nimport JwtAuthenticationGuard from '../authentication/jwt-authentication.guard';\nimport RequestWithUser from '../authentication/requestWithUser.interface';\nimport SubscriptionsService from './subscriptions.service';\n\n@Controller('subscriptions')\nexport default class SubscriptionsController {\n  constructor(private readonly subscriptionsService: SubscriptionsService) {}\n\n  @Post('monthly')\n  @UseGuards(JwtAuthenticationGuard)\n  async createMonthlySubscription(@Req() request: RequestWithUser) {\n    return this.subscriptionsService.createMonthlySubscription(\n      request.user.stripeCustomerId,\n    );\n  }\n\n  @Get('monthly')\n  @UseGuards(JwtAuthenticationGuard)\n  async getMonthlySubscription(@Req() request: RequestWithUser) {\n    return this.subscriptionsService.getMonthlySubscription(\n      request.user.stripeCustomerId,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SubscriptionsModule.html":{"url":"modules/SubscriptionsModule.html","title":"module - SubscriptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    SubscriptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SubscriptionsModule\n\n\n\ncluster_SubscriptionsModule_imports\n\n\n\n\nStripeModule\n\nStripeModule\n\n\n\nSubscriptionsModule\n\nSubscriptionsModule\n\nSubscriptionsModule -->\n\nStripeModule->SubscriptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/subscriptions/subscriptions.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            SubscriptionsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StripeModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { StripeModule } from '../stripe/stripe.module';\nimport { ConfigModule } from '@nestjs/config';\nimport SubscriptionsController from './subscriptions.controller';\nimport SubscriptionsService from './subscriptions.service';\n\n@Module({\n  imports: [StripeModule, ConfigModule],\n  controllers: [SubscriptionsController],\n  providers: [SubscriptionsService],\n})\nexport class SubscriptionsModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/tokenPayload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            isSecondFactorAuthenticated\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isSecondFactorAuthenticated\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isSecondFactorAuthenticated:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface TokenPayload {\n  userId: number;\n  isSecondFactorAuthenticated?: boolean;\n}\n\nexport default TokenPayload;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenVerificationDto.html":{"url":"classes/TokenVerificationDto.html","title":"class - TokenVerificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenVerificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/googleAuthentication/dto/tokenVerification.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/googleAuthentication/dto/tokenVerification.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n \nexport class TokenVerificationDto {\n  @IsString()\n  @IsNotEmpty()\n  token: string;\n}\n \nexport default TokenVerificationDto;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TwoFactorAuthenticationCodeDto.html":{"url":"classes/TwoFactorAuthenticationCodeDto.html","title":"class - TwoFactorAuthenticationCodeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TwoFactorAuthenticationCodeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/twoFactor/dto/twoFactorAuthenticationCode.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                twoFactorAuthenticationCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        twoFactorAuthenticationCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/twoFactor/dto/twoFactorAuthenticationCode.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class TwoFactorAuthenticationCodeDto {\n  @IsString()\n  @IsNotEmpty()\n  twoFactorAuthenticationCode: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TwoFactorAuthenticationController.html":{"url":"controllers/TwoFactorAuthenticationController.html","title":"controller - TwoFactorAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TwoFactorAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/twoFactor/twoFactorAuthentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                2fa\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authenticate\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                turnOnTwoFactorAuthentication\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticate(request: RequestWithUser, undefined: TwoFactorAuthenticationCodeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('authenticate')@HttpCode(200)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/authentication/twoFactor/twoFactorAuthentication.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                TwoFactorAuthenticationCodeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(response: Response, request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('generate')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/authentication/twoFactor/twoFactorAuthentication.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        turnOnTwoFactorAuthentication\n                        \n                    \n                \n            \n            \n                \n                    \n                    turnOnTwoFactorAuthentication(request: RequestWithUser, undefined: TwoFactorAuthenticationCodeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('turn-on')@HttpCode(200)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/authentication/twoFactor/twoFactorAuthentication.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                TwoFactorAuthenticationCodeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  ClassSerializerInterceptor,\n  Controller,\n  Header,\n  Post,\n  UseInterceptors,\n  Res,\n  UseGuards,\n  Req,\n  HttpCode,\n  Body,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { TwoFactorAuthenticationService } from './twoFactorAuthentication.service';\nimport { Response } from 'express';\nimport JwtAuthenticationGuard from '../jwt-authentication.guard';\nimport RequestWithUser from '../requestWithUser.interface';\nimport { UserService } from '../../users/user.service';\nimport { TwoFactorAuthenticationCodeDto } from './dto/twoFactorAuthenticationCode.dto';\nimport { AuthenticationServices } from '../authentication.service';\n\n@Controller('2fa')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class TwoFactorAuthenticationController {\n  constructor(\n    private readonly twoFactorAuthenticationService: TwoFactorAuthenticationService,\n    private readonly userService: UserService,\n    private readonly authenticationService: AuthenticationServices,\n  ) {}\n\n  @Post('generate')\n  @UseGuards(JwtAuthenticationGuard)\n  async register(@Res() response: Response, @Req() request: RequestWithUser) {\n    const { otpauthUrl } =\n      await this.twoFactorAuthenticationService.generateTwoFactorAuthenticationSecret(\n        request.user,\n      );\n\n    return this.twoFactorAuthenticationService.pipeQrCodeStream(\n      response,\n      otpauthUrl,\n    );\n  }\n\n  @Post('turn-on')\n  @HttpCode(200)\n  @UseGuards(JwtAuthenticationGuard)\n  async turnOnTwoFactorAuthentication(\n    @Req() request: RequestWithUser,\n    @Body() { twoFactorAuthenticationCode }: TwoFactorAuthenticationCodeDto,\n  ) {\n    const isCodeValid =\n      this.twoFactorAuthenticationService.isTwoFactorAuthenticationCodeValid(\n        twoFactorAuthenticationCode,\n        request.user,\n      );\n    if (!isCodeValid) {\n      throw new UnauthorizedException('Wrong authentication code');\n    }\n    await this.userService.turnOnTwoFactorAuthentication(request.user.id);\n  }\n\n  @Post('authenticate')\n  @HttpCode(200)\n  @UseGuards(JwtAuthenticationGuard)\n  async authenticate(\n    @Req() request: RequestWithUser,\n    @Body() { twoFactorAuthenticationCode }: TwoFactorAuthenticationCodeDto,\n  ) {\n    const isCodeValid =\n      this.twoFactorAuthenticationService.isTwoFactorAuthenticationCodeValid(\n        twoFactorAuthenticationCode,\n        request.user,\n      );\n    if (!isCodeValid) {\n      throw new UnauthorizedException('Wrong authentication code');\n    }\n    const accessTokenCookie =\n      this.authenticationService.getCookieWithJwtAccessToken(\n        request.user.id,\n        true,\n      );\n    request.res.setHeader('Set-Cookie', [accessTokenCookie]);\n    return request.user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TwoFactorAuthenticationService.html":{"url":"injectables/TwoFactorAuthenticationService.html","title":"injectable - TwoFactorAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TwoFactorAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/twoFactor/twoFactorAuthentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                generateTwoFactorAuthenticationSecret\n                            \n                            \n                                    Public\n                                isTwoFactorAuthenticationCodeValid\n                            \n                            \n                                    Public\n                                    Async\n                                pipeQrCodeStream\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/twoFactor/twoFactorAuthentication.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        generateTwoFactorAuthenticationSecret\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateTwoFactorAuthenticationSecret(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/twoFactor/twoFactorAuthentication.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        isTwoFactorAuthenticationCodeValid\n                        \n                    \n                \n            \n            \n                \n                    \n                    isTwoFactorAuthenticationCodeValid(twoFactorAuthenticationCode: string, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/twoFactor/twoFactorAuthentication.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    twoFactorAuthenticationCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        pipeQrCodeStream\n                        \n                    \n                \n            \n            \n                \n                    \n                    pipeQrCodeStream(stream: Response, otpauthUrl: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/twoFactor/twoFactorAuthentication.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stream\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    otpauthUrl\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Response } from 'express';\nimport { authenticator } from 'otplib';\nimport User from '../../users/user.entity';\nimport { UserService } from '../../users/user.service';\nimport { toFileStream } from 'qrcode';\n\n@Injectable()\nexport class TwoFactorAuthenticationService {\n  constructor(\n    private readonly userService: UserService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  public async generateTwoFactorAuthenticationSecret(user: User) {\n    const secret = authenticator.generateSecret();\n\n    const otpauthUrl = authenticator.keyuri(\n      user.email,\n      this.configService.get('TWO_FACTOR_AUTHENTICATION_APP_NAME'),\n      secret,\n    );\n    await this.userService.seTwoFactorAuthenticationSecret(secret, user.id);\n\n    return { secret, otpauthUrl };\n  }\n\n  public async pipeQrCodeStream(stream: Response, otpauthUrl: string) {\n    return toFileStream(stream, otpauthUrl);\n  }\n\n  public isTwoFactorAuthenticationCodeValid(\n    twoFactorAuthenticationCode: string,\n    user: User,\n  ) {\n    return authenticator.verify({\n      token: twoFactorAuthenticationCode,\n      secret: user.twoFactorAuthenticationSecret,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCategoryDto.html":{"url":"classes/UpdateCategoryDto.html","title":"class - UpdateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/dto/updateCategory.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dto/updateCategory.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dto/updateCategory.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsNumber, IsOptional } from 'class-validator';\n\nexport class UpdateCategoryDto {\n  @IsNumber()\n  @IsOptional()\n  id: number;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  name: string;\n}\n\nexport default UpdateCategoryDto;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                address\n                            \n                            \n                                    Public\n                                    Optional\n                                avatar\n                            \n                            \n                                    Public\n                                    Optional\n                                currentHashedRefreshToken\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                    Optional\n                                files\n                            \n                            \n                                    Public\n                                    Optional\n                                id\n                            \n                            \n                                    Public\n                                isEmailConfirmed\n                            \n                            \n                                    Public\n                                isPhoneNumberConfirmed\n                            \n                            \n                                    Public\n                                isRegisterWithGoogle\n                            \n                            \n                                    Public\n                                isTwoFactorAuthenticationEnabled\n                            \n                            \n                                    Public\n                                    Optional\n                                monthlySubscriptionStatus\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                password\n                            \n                            \n                                    Public\n                                phoneNumber\n                            \n                            \n                                    Public\n                                    Optional\n                                posts\n                            \n                            \n                                    Public\n                                stripeCustomerId\n                            \n                            \n                                    Public\n                                    Optional\n                                twoFactorAuthenticationSecret\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Address\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, {eager: true, cascade: true})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PublicFile\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @JoinColumn()@OneToOne(undefined, {eager: true, cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        currentHashedRefreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        files\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PrivateFile[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, file => file.owner)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isEmailConfirmed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isPhoneNumberConfirmed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isRegisterWithGoogle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isTwoFactorAuthenticationEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        monthlySubscriptionStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        stripeCustomerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        twoFactorAuthenticationSecret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:56\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  PrimaryGeneratedColumn,\n  JoinColumn,\n  OneToOne,\n  OneToMany,\n} from 'typeorm';\nimport { Exclude } from 'class-transformer';\nimport Address from './address.entity';\nimport Post from '../posts/post.entity';\nimport PublicFile from '../files/publicFile.entity';\nimport PrivateFile from '../privateFiles/privateFile.entity';\n@Entity()\nclass User {\n  @PrimaryGeneratedColumn()\n  public id?: number;\n\n  @Column({ unique: true })\n  public email: string;\n\n  @Column()\n  public name: string;\n\n  @Column({ nullable: true })\n  @Exclude()\n  public password?: string; // Loại bỏ password ra khỏi trước khi phản hồi\n\n  @OneToOne(() => Address, {\n    eager: true, // bao gồm cả địa chỉ khi truy vấn\n    cascade: true, // Thay vì tạo địa chỉ riêng, ta có thể tạo địa chỉ thông qua request người dùng\n  })\n  @JoinColumn()\n  public address: Address;\n\n  @OneToMany(() => Post, (post: Post) => post.author)\n  public posts?: Post[];\n\n  @JoinColumn()\n  @OneToOne(() => PublicFile, {\n    eager: true,\n    cascade: true,\n  })\n  public avatar?: PublicFile;\n\n  @OneToMany(() => PrivateFile, (file: PrivateFile) => file.owner)\n  public files?: PrivateFile[];\n\n  @Column({\n    nullable: true,\n  })\n  @Exclude()\n  public currentHashedRefreshToken?: string;\n\n  @Column({ nullable: true })\n  public twoFactorAuthenticationSecret?: string;\n\n  @Column({ default: false })\n  public isTwoFactorAuthenticationEnabled: boolean;\n\n  @Column({ nullable: true })\n  public stripeCustomerId: string;\n\n  @Column({ nullable: true })\n  public monthlySubscriptionStatus?: string;\n\n  @Column({ default: false })\n  public isEmailConfirmed: boolean;\n\n  @Column({ nullable: true })\n  public phoneNumber: string;\n\n  @Column({ default: false })\n  public isPhoneNumberConfirmed: boolean;\n\n  @Column({ default: false })\n  public isRegisterWithGoogle: boolean;\n}\n\nexport default User;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nFileModule\n\nFileModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nFileModule->UserModule\n\n\n\n\n\nPrivateFilesModule\n\nPrivateFilesModule\n\nUserModule -->\n\nPrivateFilesModule->UserModule\n\n\n\n\n\nStripeModule\n\nStripeModule\n\nUserModule -->\n\nStripeModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FileModule\n                        \n                        \n                            PrivateFilesModule\n                        \n                        \n                            StripeModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport User from './user.entity';\nimport { FileModule } from '../files/files.module';\nimport { UsersController } from './users.controller';\nimport { PrivateFilesModule } from 'src/privateFiles/privateFiles.module';\nimport { StripeModule } from 'src/stripe/stripe.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User]),\n    FileModule,\n    PrivateFilesModule,\n    StripeModule,\n  ],\n  providers: [UserService],\n  exports: [UserService],\n  controllers: [UsersController],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addAvatar\n                            \n                            \n                                    Async\n                                addPrivateFile\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                createWithGoogle\n                            \n                            \n                                    Async\n                                deletePublicAvatar\n                            \n                            \n                                    Async\n                                getAllPrivateFiles\n                            \n                            \n                                    Async\n                                getByEmail\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getPrivateFile\n                            \n                            \n                                    Async\n                                getUserIfRefreshTokenMatches\n                            \n                            \n                                    Async\n                                markEmailAsConfirmed\n                            \n                            \n                                markPhoneNumberAsConfirmed\n                            \n                            \n                                    Async\n                                removeRefreshToken\n                            \n                            \n                                    Async\n                                setCurrentRefreshToken\n                            \n                            \n                                    Async\n                                seTwoFactorAuthenticationSecret\n                            \n                            \n                                    Async\n                                turnOnTwoFactorAuthentication\n                            \n                            \n                                    Async\n                                updateMonthlySubscriptionStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, fileService: FileService, privateFilesService: PrivateFileService, connection: Connection, stripeService: StripeService)\n                    \n                \n                        \n                            \n                                Defined in src/users/user.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fileService\n                                                  \n                                                        \n                                                                        FileService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        privateFilesService\n                                                  \n                                                        \n                                                                        PrivateFileService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        connection\n                                                  \n                                                        \n                                                                    Connection\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        stripeService\n                                                  \n                                                        \n                                                                        StripeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    addAvatar(userId: number, imageBuffer: Buffer, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/user.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imageBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addPrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    addPrivateFile(userId: number, imageBuffer: Buffer, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/user.service.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imageBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userData: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/user.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userData\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createWithGoogle\n                        \n                    \n                \n            \n            \n                \n                    \n                    createWithGoogle(email: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/user.service.ts:219\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePublicAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePublicAvatar(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/user.service.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPrivateFiles\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPrivateFiles(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/user.service.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/user.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/user.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrivateFile(userId: number, fileId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/user.service.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserIfRefreshTokenMatches\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserIfRefreshTokenMatches(refreshToken: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/user.service.ts:155\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        markEmailAsConfirmed\n                        \n                    \n                \n            \n            \n                \n                    \n                    markEmailAsConfirmed(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/user.service.ts:199\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        markPhoneNumberAsConfirmed\n                        \n                    \n                \n            \n            \n                \nmarkPhoneNumberAsConfirmed(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/user.service.ts:208\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeRefreshToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/user.service.ts:169\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setCurrentRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    setCurrentRefreshToken(refreshToken: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/user.service.ts:148\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        seTwoFactorAuthenticationSecret\n                        \n                    \n                \n            \n            \n                \n                    \n                    seTwoFactorAuthenticationSecret(secret: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/user.service.ts:175\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    secret\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        turnOnTwoFactorAuthentication\n                        \n                    \n                \n            \n            \n                \n                    \n                    turnOnTwoFactorAuthentication(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/user.service.ts:181\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateMonthlySubscriptionStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMonthlySubscriptionStatus(stripeCustomerId: string, monthlySubscriptionStatus: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/user.service.ts:187\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stripeCustomerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    monthlySubscriptionStatus\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpException,\n  HttpStatus,\n  Injectable,\n  InternalServerErrorException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Connection, Repository } from 'typeorm';\nimport User from './user.entity';\nimport CreateUserDto from './dto/createUser.dto';\nimport { FileService } from '../files/files.service';\nimport { PrivateFileService } from '../privateFiles/privateFiles.service';\nimport * as bcrypt from 'bcrypt';\nimport StripeService from 'src/stripe/stripe.service';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(User)\n    private userRepository: Repository,\n    private readonly fileService: FileService,\n    private readonly privateFilesService: PrivateFileService,\n    private connection: Connection,\n    private stripeService: StripeService,\n  ) {}\n\n  async getByEmail(email: string) {\n    const user = await this.userRepository.findOne({\n      where: { email: email },\n    });\n    if (user) {\n      return user;\n    }\n\n    throw new HttpException(\n      'User with this email does not exist',\n      HttpStatus.NOT_FOUND,\n    );\n  }\n\n  async getById(id: number) {\n    const user = await this.userRepository.findOne({\n      where: { id: id },\n    });\n    if (user) {\n      return user;\n    }\n    throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n  }\n\n  async create(userData: CreateUserDto) {\n    const stripeCustomer = await this.stripeService.createCustomer(\n      userData.name,\n      userData.email,\n    );\n    const newUser = await this.userRepository.create({\n      ...userData,\n      stripeCustomerId: stripeCustomer.id,\n    });\n    await this.userRepository.save(newUser);\n    return newUser;\n  }\n\n  async addAvatar(userId: number, imageBuffer: Buffer, filename: string) {\n    const avatar = await this.fileService.uploadPublicFile(\n      imageBuffer,\n      filename,\n    );\n    const user = await this.getById(userId);\n    await this.userRepository.update(userId, {\n      ...user,\n      avatar,\n    });\n    return avatar;\n  }\n\n  async deletePublicAvatar(userId: number) {\n    const queryRunner = this.connection.createQueryRunner();\n    const user = await this.getById(userId);\n    const fileId = user.avatar?.id;\n    if (fileId) {\n      // Sử dụng queryRunner và connection để tạo giao dịch tránh thất thoát dữ liệu\n      // await this.userRepository.update(userId, {\n      //   ...user,\n      //   avatar: null,\n      // });\n      // await this.fileService.deletePublicFile(fileId);\n      await queryRunner.connect();\n      await queryRunner.startTransaction();\n\n      try {\n        await queryRunner.manager.update(User, userId, {\n          ...user,\n          avatar: null,\n        });\n        await this.fileService.deletePublicFileWithQueryRunner(\n          fileId,\n          queryRunner,\n        );\n        await queryRunner.commitTransaction();\n      } catch (error) {\n        await queryRunner.rollbackTransaction();\n        throw new InternalServerErrorException();\n      } finally {\n        await queryRunner.release();\n      }\n    }\n  }\n\n  async addPrivateFile(userId: number, imageBuffer: Buffer, filename: string) {\n    return this.privateFilesService.uploadPrivateFile(\n      imageBuffer,\n      userId,\n      filename,\n    );\n  }\n\n  async getPrivateFile(userId: number, fileId: number) {\n    const file = await this.privateFilesService.getPrivateFile(fileId);\n    if (file.info.owner.id === userId) {\n      return file;\n    }\n    throw new UnauthorizedException();\n  }\n\n  async getAllPrivateFiles(userId: number) {\n    const userWithFiles = await this.userRepository.findOne({\n      where: { id: userId },\n      relations: ['files'],\n    });\n\n    if (userWithFiles) {\n      return Promise.all(\n        userWithFiles.files.map(async (file) => {\n          const url = await this.privateFilesService.generatePresignedUrl(\n            file.key,\n          );\n          return {\n            ...file,\n            url,\n          };\n        }),\n      );\n    }\n  }\n\n  async setCurrentRefreshToken(refreshToken: string, userId: number) {\n    const currentHashedRefreshToken = await bcrypt.hash(refreshToken, 10);\n    await this.userRepository.update(userId, {\n      currentHashedRefreshToken,\n    });\n  }\n\n  async getUserIfRefreshTokenMatches(refreshToken: string, userId: number) {\n    const user = await this.getById(userId);\n\n    console.log(['adaj'], refreshToken, user.currentHashedRefreshToken);\n\n    const isRefreshTokenMatching = await bcrypt.compare(\n      refreshToken,\n      user.currentHashedRefreshToken,\n    );\n    if (isRefreshTokenMatching) {\n      return user;\n    }\n  }\n\n  async removeRefreshToken(userId: number) {\n    return this.userRepository.update(userId, {\n      currentHashedRefreshToken: null,\n    });\n  }\n\n  async seTwoFactorAuthenticationSecret(secret: string, userId: number) {\n    return this.userRepository.update(userId, {\n      twoFactorAuthenticationSecret: secret,\n    });\n  }\n\n  async turnOnTwoFactorAuthentication(userId: number) {\n    return this.userRepository.update(userId, {\n      isTwoFactorAuthenticationEnabled: true,\n    });\n  }\n\n  async updateMonthlySubscriptionStatus(\n    stripeCustomerId: string,\n    monthlySubscriptionStatus: string,\n  ) {\n    return this.userRepository.update(\n      { stripeCustomerId },\n      {\n        monthlySubscriptionStatus,\n      },\n    );\n  }\n\n  async markEmailAsConfirmed(email: string) {\n    return this.userRepository.update(\n      { email },\n      {\n        isEmailConfirmed: true,\n      },\n    );\n  }\n\n  markPhoneNumberAsConfirmed(userId: number) {\n    return this.userRepository.update(\n      {\n        id: userId,\n      },\n      {\n        isPhoneNumberConfirmed: true,\n      },\n    );\n  }\n\n  async createWithGoogle(email: string, name: string) {\n    const stripeCustomer = await this.stripeService.createCustomer(name, email);\n    const newUser = await this.userRepository.create({\n      email,\n      name,\n      isRegisterWithGoogle: true,\n      stripeCustomerId: stripeCustomer.id,\n    });\n    await this.userRepository.save(newUser);\n    return newUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addAvatar\n                            \n                            \n                                    Async\n                                addPrivateFile\n                            \n                            \n                                    Async\n                                deletePublicFile\n                            \n                            \n                                    Async\n                                getAllPrivateFiles\n                            \n                            \n                                    Async\n                                getPrivateFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    addAvatar(request: RequestWithUser, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('avatar')@UseGuards(JwtAuthenticationGuard)@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addPrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    addPrivateFile(request: RequestWithUser, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('files')@UseGuards(JwtAuthenticationGuard)@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePublicFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePublicFile(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('delete/avatar')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPrivateFiles\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPrivateFiles(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('files')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrivateFile(request: RequestWithUser, undefined: FindOneParams, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('files/:id')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Param,\n  Post,\n  Req,\n  Res,\n  UploadedFile,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport JwtAuthenticationGuard from '../authentication/jwt-authentication.guard';\nimport RequestWithUser from '../authentication/requestWithUser.interface';\nimport { UserService } from './user.service';\nimport { Response } from 'express';\nimport FindOneParams from 'src/utils/findOneParams';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly userService: UserService) {}\n\n  @Post('avatar')\n  @UseGuards(JwtAuthenticationGuard)\n  @UseInterceptors(FileInterceptor('file'))\n  async addAvatar(\n    @Req() request: RequestWithUser,\n    @UploadedFile() file: Express.Multer.File,\n  ) {\n    return this.userService.addAvatar(\n      request.user.id,\n      file.buffer,\n      file.originalname,\n    );\n  }\n\n  @Post('delete/avatar')\n  @UseGuards(JwtAuthenticationGuard)\n  async deletePublicFile(@Req() request: RequestWithUser) {\n    return this.userService.deletePublicAvatar(request.user.id);\n  }\n\n  @Post('files')\n  @UseGuards(JwtAuthenticationGuard)\n  @UseInterceptors(FileInterceptor('file'))\n  async addPrivateFile(\n    @Req() request: RequestWithUser,\n    @UploadedFile() file: Express.Multer.File,\n  ) {\n    return this.userService.addPrivateFile(\n      request.user.id,\n      file.buffer,\n      file.originalname,\n    );\n  }\n\n  @Get('files/:id')\n  @UseGuards(JwtAuthenticationGuard)\n  async getPrivateFile(\n    @Req() request: RequestWithUser,\n    @Param() { id }: FindOneParams,\n    @Res() res: Response,\n  ) {\n    const file = await this.userService.getPrivateFile(\n      request.user.id,\n      Number(id),\n    );\n    file.stream.pipe(res);\n  }\n\n  @Get('files')\n  @UseGuards(JwtAuthenticationGuard)\n  async getAllPrivateFiles(@Req() request: RequestWithUser) {\n    return this.userService.getAllPrivateFiles(request.user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/categoriesService.html":{"url":"injectables/categoriesService.html","title":"injectable - categoriesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  categoriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/category.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCategory\n                            \n                            \n                                    Async\n                                deleteCategory\n                            \n                            \n                                    Async\n                                deleteCategoryById\n                            \n                            \n                                getAllCategories\n                            \n                            \n                                    Async\n                                getCategoryById\n                            \n                            \n                                    Async\n                                updateCategory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCategory(category: CreateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/category.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    category\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteCategory(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/category.service.ts:83\n                \n            \n\n\n            \n                \n                    A method that deletes a category from the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        An id of a category. A category with this id should exist in the database\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteCategoryById\n                        \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n                    \n                    deleteCategoryById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/category.service.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllCategories\n                        \n                    \n                \n            \n            \n                \ngetAllCategories()\n                \n            \n\n\n            \n                \n                    Defined in src/categories/category.service.ts:25\n                \n            \n\n\n            \n                \n                    A method that fetches the categories from the database\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        A promise with the list of categories\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCategoryById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCategoryById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/category.service.ts:34\n                \n            \n\n\n            \n                \n                    A method that fetches a category with a given id. Example:\nconst category = await categoriesService.getCategoryById(1);\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            const category = await categoriesService.getCategoryById(1);\n                        \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateCategory(id: number, category: UpdateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/category.service.ts:51\n                \n            \n\n\n            \n                \n                    See the definition of the UpdateCategoryDto file to see a list of required properties\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    category\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport CategoriesNotFoundException from 'src/categories/exception/categoriesNotFound.exception';\nimport { Repository } from 'typeorm';\nimport Category from './category.entity';\nimport CreateCategoryDto from './dto/createCategory.dto';\nimport UpdateCategoryDto from './dto/updateCategory.dto';\n\n@Injectable()\nexport class categoriesService {\n  /**\n   * @ignore\n   *\n   */\n  constructor(\n    @InjectRepository(Category)\n    private categoriesRepository: Repository,\n  ) {}\n\n  /**\n   *\n   * A method that fetches the categories from the database\n   * @returns A promise with the list of categories\n   */\n  getAllCategories() {\n    return this.categoriesRepository.find({ relations: ['posts'] });\n  }\n\n  /**\n * A method that fetches a category with a given id. Example:\n * @example\n * const category = await categoriesService.getCategoryById(1);\n */\n  async getCategoryById(id: number) {\n    const category = await this.categoriesRepository.findOne({\n      where: { id: id },\n      relations: ['posts'],\n    });\n    if (category) {\n      return category;\n    }\n    throw new CategoriesNotFoundException(id);\n  }\n\n  /**\n   * See the [definition of the UpdateCategoryDto file]{@link UpdateCategoryDto} to see a list of required properties\n   * @param id \n   * @param category \n   * @returns\n   */\n  async updateCategory(id: number, category: UpdateCategoryDto) {\n    await this.categoriesRepository.update(id, category);\n    const updatedCategory = await this.categoriesRepository.findOne({\n      where: { id: id },\n      relations: ['posts'],\n    });\n    if (updatedCategory) {\n      return updatedCategory;\n    }\n    throw new CategoriesNotFoundException(id);\n  }\n\n  async createCategory(category: CreateCategoryDto) {\n    const newCategory = await this.categoriesRepository.create(category);\n    await this.categoriesRepository.save(newCategory);\n    return newCategory;\n  }\n\n  /**\n   * @deprecated\n   * @param id\n   * @returns\n   */\n  async deleteCategoryById(id: number): Promise {\n    return this.deleteCategory(id);\n  }\n\n  /**\n   * A method that deletes a category from the database\n   * @param id An id of a category. A category with this id should exist in the database\n   */\n\n  async deleteCategory(id: number): Promise {\n    console.log(['id'], id);\n\n    const deleteResponse = await this.categoriesRepository.softDelete(id);\n    if (!deleteResponse.affected) {\n      throw new CategoriesNotFoundException(id);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/authentication.controller.ts\n            \n            controller\n            AuthenticationController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/authentication/authentication.service.ts\n            \n            injectable\n            AuthenticationServices\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/authentication/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/authentication/jwt-authentication.guard.ts\n            \n            injectable\n            JwtAuthenticationGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/jwt-refresh-token.strategy.ts\n            \n            injectable\n            JwtRefreshTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/jwt-refresh.guard.ts\n            \n            injectable\n            JwtRefreshGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/jwt-two-factor.guards.ts\n            \n            injectable\n            JwtTwoFactorGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/jwt-two-factor.strategy.ts\n            \n            injectable\n            JwtTwoFactorStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/jwt.strategy.ts\n            \n            injectable\n            jwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/localAuthentication.guard.ts\n            \n            injectable\n            LocalAuthentication\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/requestWithUser.interface.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/test/user.mock.ts\n            \n            variable\n            mockedUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/tokenPayload.interface.ts\n            \n            interface\n            TokenPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/twoFactor/dto/twoFactorAuthenticationCode.dto.ts\n            \n            class\n            TwoFactorAuthenticationCodeDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/twoFactor/twoFactorAuthentication.controller.ts\n            \n            controller\n            TwoFactorAuthenticationController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/authentication/twoFactor/twoFactorAuthentication.service.ts\n            \n            injectable\n            TwoFactorAuthenticationService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/categories/category.controller.ts\n            \n            controller\n            CategoriesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/categories/category.entity.ts\n            \n            entity\n            Category\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/categories/category.service.ts\n            \n            injectable\n            categoriesService\n            \n                57 %\n                (4/7)\n            \n        \n        \n            \n                \n                src/categories/dto/createCategory.dto.ts\n            \n            class\n            CreateCategoryDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/categories/dto/updateCategory.dto.ts\n            \n            class\n            UpdateCategoryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/categories/exception/categoriesNotFound.exception.ts\n            \n            class\n            CategoriesNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/charge/charge.controller.ts\n            \n            controller\n            ChargeController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/charge/dto/createCharge.dto.ts\n            \n            class\n            CreateChargeDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/chat/chat.gateway.ts\n            \n            class\n            ChatGateway\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/chat/chat.service.ts\n            \n            injectable\n            ChatService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/chat/message.entity.ts\n            \n            entity\n            Message\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/credit-cards/creditCards.controller.ts\n            \n            controller\n            CreditCardsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/credit-cards/dto/addCreditCardDto.ts\n            \n            class\n            AddCreditCardDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/credit-cards/dto/setDefaultCreditCard.dto.ts\n            \n            class\n            SetDefaultCreditCardDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/database/databaseLogger.ts\n            \n            class\n            DatabaseLogger\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/email/email.service.ts\n            \n            injectable\n            EmailService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/emailConfirmation/dto/confirmEmail.dto.ts\n            \n            class\n            ConfirmEmailDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/emailConfirmation/emailConfirmation.controller.ts\n            \n            controller\n            EmailConfirmationController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/emailConfirmation/emailConfirmation.guard.ts\n            \n            guard\n            emailConfirmationGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/emailConfirmation/emailConfirmation.service.ts\n            \n            injectable\n            EmailConfirmationService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/emailConfirmation/verificationTokenPayload.interface.ts\n            \n            interface\n            verificationTokenPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/emaillScheduling/dto/emailScheduling.dto.ts\n            \n            class\n            EmailScheduleDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/emaillScheduling/emailScheduling.controller.ts\n            \n            controller\n            EmailModuleController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/emaillScheduling/emailScheduling.service.ts\n            \n            injectable\n            EmailSchedulingService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/files/files.service.ts\n            \n            injectable\n            FileService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/files/publicFile.entity.ts\n            \n            entity\n            PublicFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/googleAuthentication/dto/tokenVerification.dto.ts\n            \n            class\n            TokenVerificationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/googleAuthentication/googleAuthencation.controller.ts\n            \n            controller\n            GoogleAuthenticationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/googleAuthentication/googleAuthentication.service.ts\n            \n            injectable\n            GoogleAuthenticationService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/logger/customLogger.ts\n            \n            injectable\n            CustomLogger\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/logger/dto/createLog.dto.ts\n            \n            class\n            CreateLogDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/logger/log.entity.ts\n            \n            entity\n            Log\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/logger/logs.service.ts\n            \n            injectable\n            LogsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/optimize/image.processor.ts\n            \n            class\n            ImageProcessor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/optimize/optimize.controller.ts\n            \n            controller\n            OptimizeController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dto/createPost.dto.ts\n            \n            class\n            createPostDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dto/updatePost.dto.ts\n            \n            class\n            updatePostDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/exception/postNotFound.exception.ts\n            \n            class\n            PostNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/httpCache.interceptor.ts\n            \n            injectable\n            HttpCacheInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/post.interface.ts\n            \n            interface\n            Post\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/postsCacheKey.constant.ts\n            \n            variable\n            GET_POSTS_CACHE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/postsSearch.service.ts\n            \n            injectable\n            PostSearchService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/posts/types/postCountBody.interface.ts\n            \n            interface\n            PostCountResult\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/types/postSearchResponse.interface.ts\n            \n            interface\n            PostSearchResult\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/types/postsSearchBody.interface.ts\n            \n            interface\n            PostSearchBody\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/privateFiles/privateFile.entity.ts\n            \n            entity\n            PrivateFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/privateFiles/privateFiles.service.ts\n            \n            injectable\n            PrivateFileService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/productCategories/dto/createProductCategory.dto.ts\n            \n            class\n            CreateProductCategoryDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/productCategories/productCategories.controller.ts\n            \n            controller\n            ProductCategoriesController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/productCategories/productCategories.entity.ts\n            \n            entity\n            ProductCategory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/productCategories/productCategories.service.ts\n            \n            injectable\n            productCategoriesService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/products/dto/createProduct.dto.ts\n            \n            class\n            CreateProductDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/products/product.entity.ts\n            \n            entity\n            Product\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/products/products.controller.ts\n            \n            controller\n            ProductsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/products/products.service.ts\n            \n            injectable\n            ProductService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/products/types/bookProperties.interface.ts\n            \n            interface\n            BookProperties\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/products/types/carProperties.interface.ts\n            \n            interface\n            CarProperties\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/sms/dto/checkVerificationCode.dto.ts\n            \n            class\n            CheckVerificationCodeDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/sms/sms.controller.ts\n            \n            controller\n            SmsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/sms/sms.service.ts\n            \n            injectable\n            SmsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/stripe/stripe.service.ts\n            \n            injectable\n            StripeService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/stripeWebhook/requestWithRawBody.interface.ts\n            \n            interface\n            RequestWithRawBody\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/stripeWebhook/stripeEvent.entity.ts\n            \n            entity\n            StripeEvent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/stripeWebhook/stripeWebhook.controller.ts\n            \n            controller\n            StripeWebhookController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/stripeWebhook/stripeWebhook.service.ts\n            \n            injectable\n            stripeWebhookService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/subscriptions/subscriptions.controller.ts\n            \n            controller\n            SubscriptionsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/subscriptions/subscriptions.service.ts\n            \n            injectable\n            subscriptionsService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/address.entity.ts\n            \n            entity\n            Address\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/createUser.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/utils/exceptionsLogger.filter.ts\n            \n            class\n            ExceptionsLoggerFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/excludeNull.interceptor.ts\n            \n            injectable\n            ExcludeNullInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/findOneParams.ts\n            \n            class\n            FindOneParams\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/getLogLevels.ts\n            \n            function\n            getLogLevels\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/log.middlware.ts\n            \n            injectable\n            LogsMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/mocks/config.service.ts\n            \n            variable\n            mockerConfigService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/mocks/jwt.service.ts\n            \n            variable\n            mockedJwtService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/rawBody.middleware.ts\n            \n            function\n            rawBodyMiddleware\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/recursivelyStripNullValues.ts\n            \n            function\n            recursivelyStripNullValues\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/runInCluster.ts\n            \n            function\n            runInCluster\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/types/objectWithId.dto.ts\n            \n            class\n            ObjectWithDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/types/paginationParam.ts\n            \n            class\n            PaginationParams\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/createPostDto.html":{"url":"classes/createPostDto.html","title":"class - createPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  createPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/createPost.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                paragraphs\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        paragraphs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({each: true})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/createPost.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/createPost.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\nexport default class createPostDto {\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n  // content: string;\n  @IsString({ each: true })\n  @IsNotEmpty()\n  paragraphs: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.19\n        \n            @elastic/elasticsearch : ^7.9.0\n        \n            @hapi/joi : ^17.1.1\n        \n            @nestjs/bull : ^0.5.4\n        \n            @nestjs/common : ^8.1.1\n        \n            @nestjs/config : ^2.0.0\n        \n            @nestjs/core : ^8.1.1\n        \n            @nestjs/elasticsearch : ^8.1.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/passport : ^8.2.1\n        \n            @nestjs/platform-express : ^8.1.1\n        \n            @nestjs/platform-socket.io : ^8.4.4\n        \n            @nestjs/schedule : ^1.1.0\n        \n            @nestjs/typeorm : ^8.0.3\n        \n            @nestjs/websockets : ^8.4.4\n        \n            @types/component-emitter : ^1.2.11\n        \n            @types/cookie : ^0.5.1\n        \n            adm-zip : ^0.5.9\n        \n            aws-sdk : ^2.1109.0\n        \n            bcrypt : ^5.0.0\n        \n            bull : ^4.8.2\n        \n            cache-manager : ^3.6.1\n        \n            cache-manager-redis-store : ^2.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            component-emitter : ^1.3.0\n        \n            cookie : ^0.5.0\n        \n            cookie-parser : ^1.4.6\n        \n            googleapis : ^100.0.0\n        \n            imagemin : ^8.0.1\n        \n            imagemin-pngquant : ^9.0.2\n        \n            nodemailer : ^6.7.3\n        \n            otplib : ^12.0.1\n        \n            passport : ^0.5.2\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.7.3\n        \n            qrcode : ^1.5.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.4.0\n        \n            stripe : ^8.219.0\n        \n            twilio : ^3.77.0\n        \n            typeorm : ^0.3.4\n        \n            uuid : ^8.3.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/emailConfirmationGuard.html":{"url":"guards/emailConfirmationGuard.html","title":"guard - emailConfirmationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    emailConfirmationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/emailConfirmation/emailConfirmation.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/emailConfirmation/emailConfirmation.guard.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  Injectable,\n  CanActivate,\n  ExecutionContext,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport RequestWithUser from 'src/authentication/requestWithUser.interface';\n\n@Injectable()\nexport class emailConfirmationGuard implements CanActivate {\n  canActivate(context: ExecutionContext) {\n    const request: RequestWithUser = context.switchToHttp().getRequest();\n    if (!request.user?.isEmailConfirmed) {\n      throw new UnauthorizedException('Confirm your email first');\n    }\n    return true;\n  }\n}\n\nexport default emailConfirmationGuard;\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PosgresErrorCode   (src/.../posgresErrorCodes.enum.ts)\n                        \n                        \n                            StripeError   (src/.../stripeError.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/database/posgresErrorCodes.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PosgresErrorCode\n                    \n                \n                        \n                            \n                                 UniqueViolation\n                            \n                        \n                        \n                            \n                                Value : 23505\n                            \n                        \n            \n        \n\n    src/utils/stripeError.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        StripeError\n                    \n                \n                        \n                            \n                                 InvalidRequest\n                            \n                        \n                        \n                            \n                                Value : StripeInvalidRequestError\n                            \n                        \n                        \n                            \n                                 ResourceMissing\n                            \n                        \n                        \n                            \n                                Value : resource_missing\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            getLogLevels   (src/.../getLogLevels.ts)\n                        \n                        \n                            rawBodyMiddleware   (src/.../rawBody.middleware.ts)\n                        \n                        \n                            recursivelyStripNullValues   (src/.../recursivelyStripNullValues.ts)\n                        \n                        \n                            runInCluster   (src/.../runInCluster.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/utils/getLogLevels.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getLogLevels\n                        \n                    \n                \n            \n            \n                \ngetLogLevels(isProduction: boolean)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    isProduction\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LogLevel[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/utils/rawBody.middleware.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        rawBodyMiddleware\n                        \n                    \n                \n            \n            \n                \nrawBodyMiddleware()\n                \n            \n\n\n\n\n        \n    \n    src/utils/recursivelyStripNullValues.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        recursivelyStripNullValues\n                        \n                    \n                \n            \n            \n                \nrecursivelyStripNullValues(value)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/utils/runInCluster.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        runInCluster\n                        \n                    \n                \n            \n            \n                \nrunInCluster(bootstrap)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bootstrap\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/jwtStrategy.html":{"url":"injectables/jwtStrategy.html","title":"injectable - jwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  jwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/jwt.strategy.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UserService } from '../users/user.service';\nimport TokenPayload from './tokenPayload.interface';\n\n@Injectable()\nexport class jwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UserService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          console.log(['req'], request?.cookies);\n\n          return request?.cookies?.Authentication;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_SECRET'),\n    });\n  }\n\n  async validate(payload: TokenPayload) {\n    return this.userService.getById(payload.userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthenticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ChargeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ChatModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CreditCardsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailConfirmationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailSchedulingModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FileModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GoogleAuthenticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LoggerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OptimizeModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrivateFilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductCategoriesModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductsModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SearchModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SmsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeWebhookModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SubscriptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_exports\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_providers\n\n\n\ncluster_ChatModule\n\n\n\ncluster_ChatModule_providers\n\n\n\ncluster_EmailConfirmationModule\n\n\n\ncluster_EmailConfirmationModule_imports\n\n\n\ncluster_EmailConfirmationModule_exports\n\n\n\ncluster_EmailConfirmationModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_EmailSchedulingModule\n\n\n\ncluster_EmailSchedulingModule_providers\n\n\n\ncluster_FileModule\n\n\n\ncluster_FileModule_exports\n\n\n\ncluster_FileModule_providers\n\n\n\ncluster_GoogleAuthenticationModule\n\n\n\ncluster_GoogleAuthenticationModule_providers\n\n\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_exports\n\n\n\ncluster_LoggerModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PrivateFilesModule\n\n\n\ncluster_PrivateFilesModule_exports\n\n\n\ncluster_PrivateFilesModule_providers\n\n\n\ncluster_SmsModule\n\n\n\ncluster_SmsModule_exports\n\n\n\ncluster_SmsModule_providers\n\n\n\ncluster_StripeModule\n\n\n\ncluster_StripeModule_exports\n\n\n\ncluster_StripeModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nChatModule\n\nChatModule\n\nChatModule -->\n\nAuthenticationModule->ChatModule\n\n\n\n\n\nGoogleAuthenticationModule\n\nGoogleAuthenticationModule\n\nGoogleAuthenticationModule -->\n\nAuthenticationModule->GoogleAuthenticationModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nAuthenticationServices \n\nAuthenticationServices \n\nAuthenticationServices  -->\n\nAuthenticationModule->AuthenticationServices \n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nChargeModule\n\nChargeModule\n\nAppModule -->\n\nChargeModule->AppModule\n\n\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nCreditCardsModule\n\nCreditCardsModule\n\nAppModule -->\n\nCreditCardsModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmailConfirmationModule\n\nEmailConfirmationModule\n\nAuthenticationModule -->\n\nEmailConfirmationModule->AuthenticationModule\n\n\n\nAppModule -->\n\nEmailConfirmationModule->AppModule\n\n\n\n\n\nEmailConfirmationService \n\nEmailConfirmationService \n\nEmailConfirmationService  -->\n\nEmailConfirmationModule->EmailConfirmationService \n\n\n\n\n\nEmailSchedulingModule\n\nEmailSchedulingModule\n\nAppModule -->\n\nEmailSchedulingModule->AppModule\n\n\n\n\n\nFileModule\n\nFileModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nFileModule->UserModule\n\n\n\nAppModule -->\n\nFileModule->AppModule\n\n\n\n\n\nFileService \n\nFileService \n\nFileService  -->\n\nFileModule->FileService \n\n\n\nAppModule -->\n\nGoogleAuthenticationModule->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nCustomLogger \n\nCustomLogger \n\nCustomLogger  -->\n\nLoggerModule->CustomLogger \n\n\n\n\n\nOptimizeModule\n\nOptimizeModule\n\nAppModule -->\n\nOptimizeModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPrivateFilesModule\n\nPrivateFilesModule\n\nUserModule -->\n\nPrivateFilesModule->UserModule\n\n\n\nAppModule -->\n\nPrivateFilesModule->AppModule\n\n\n\n\n\nPrivateFileService \n\nPrivateFileService \n\nPrivateFileService  -->\n\nPrivateFilesModule->PrivateFileService \n\n\n\n\n\nProductCategoriesModule\n\nProductCategoriesModule\n\nAppModule -->\n\nProductCategoriesModule->AppModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nSearchModule\n\nSearchModule\n\nPostsModule -->\n\nSearchModule->PostsModule\n\n\n\nAppModule -->\n\nSearchModule->AppModule\n\n\n\n\n\nSmsModule\n\nSmsModule\n\nAppModule -->\n\nSmsModule->AppModule\n\n\n\n\n\nSmsService \n\nSmsService \n\nSmsService  -->\n\nSmsModule->SmsService \n\n\n\n\n\nStripeModule\n\nStripeModule\n\nChargeModule -->\n\nStripeModule->ChargeModule\n\n\n\nCreditCardsModule -->\n\nStripeModule->CreditCardsModule\n\n\n\n\n\nStripeWebhookModule\n\nStripeWebhookModule\n\nStripeWebhookModule -->\n\nStripeModule->StripeWebhookModule\n\n\n\n\n\nSubscriptionsModule\n\nSubscriptionsModule\n\nSubscriptionsModule -->\n\nStripeModule->SubscriptionsModule\n\n\n\nUserModule -->\n\nStripeModule->UserModule\n\n\n\nAppModule -->\n\nStripeModule->AppModule\n\n\n\n\n\nStripeService \n\nStripeService \n\nStripeService  -->\n\nStripeModule->StripeService \n\n\n\nAppModule -->\n\nStripeWebhookModule->AppModule\n\n\n\nAppModule -->\n\nSubscriptionsModule->AppModule\n\n\n\nAuthenticationModule -->\n\nUserModule->AuthenticationModule\n\n\n\nEmailConfirmationModule -->\n\nUserModule->EmailConfirmationModule\n\n\n\nGoogleAuthenticationModule -->\n\nUserModule->GoogleAuthenticationModule\n\n\n\nSmsModule -->\n\nUserModule->SmsModule\n\n\n\nStripeWebhookModule -->\n\nUserModule->StripeWebhookModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAuthenticationServices\n\nAuthenticationServices\n\nAuthenticationModule -->\n\nAuthenticationServices->AuthenticationModule\n\n\n\n\n\nJwtRefreshTokenStrategy\n\nJwtRefreshTokenStrategy\n\nAuthenticationModule -->\n\nJwtRefreshTokenStrategy->AuthenticationModule\n\n\n\n\n\nJwtTwoFactorStrategy\n\nJwtTwoFactorStrategy\n\nAuthenticationModule -->\n\nJwtTwoFactorStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\nTwoFactorAuthenticationService\n\nTwoFactorAuthenticationService\n\nAuthenticationModule -->\n\nTwoFactorAuthenticationService->AuthenticationModule\n\n\n\n\n\njwtStrategy\n\njwtStrategy\n\nAuthenticationModule -->\n\njwtStrategy->AuthenticationModule\n\n\n\n\n\ncategoriesService\n\ncategoriesService\n\nCategoryModule -->\n\ncategoriesService->CategoryModule\n\n\n\n\n\nChatService\n\nChatService\n\nChatModule -->\n\nChatService->ChatModule\n\n\n\n\n\nEmailModule\n\nEmailModule\n\nEmailConfirmationModule -->\n\nEmailModule->EmailConfirmationModule\n\n\n\nEmailSchedulingModule -->\n\nEmailModule->EmailSchedulingModule\n\n\n\n\n\nEmailService \n\nEmailService \n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailConfirmationService\n\nEmailConfirmationService\n\nEmailConfirmationModule -->\n\nEmailConfirmationService->EmailConfirmationModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\nEmailSchedulingService\n\nEmailSchedulingService\n\nEmailSchedulingModule -->\n\nEmailSchedulingService->EmailSchedulingModule\n\n\n\n\n\nFileService\n\nFileService\n\nFileModule -->\n\nFileService->FileModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nGoogleAuthenticationModule -->\n\nGoogleAuthenticationService->GoogleAuthenticationModule\n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLoggerModule -->\n\nCustomLogger->LoggerModule\n\n\n\n\n\nLogsService\n\nLogsService\n\nLoggerModule -->\n\nLogsService->LoggerModule\n\n\n\n\n\nPostSearchService\n\nPostSearchService\n\nPostsModule -->\n\nPostSearchService->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nPrivateFileService\n\nPrivateFileService\n\nPrivateFilesModule -->\n\nPrivateFileService->PrivateFilesModule\n\n\n\n\n\nSmsService\n\nSmsService\n\nSmsModule -->\n\nSmsService->SmsModule\n\n\n\n\n\nStripeService\n\nStripeService\n\nStripeModule -->\n\nStripeService->StripeModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        24 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    17 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    11 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    33 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    26 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    10 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/productCategoriesService.html":{"url":"injectables/productCategoriesService.html","title":"injectable - productCategoriesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  productCategoriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/productCategories/productCategories.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createProductCategory\n                            \n                            \n                                getAllProductCategories\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productCategoriesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/productCategories/productCategories.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productCategoriesRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createProductCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    createProductCategory(category: CreateProductCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/productCategories/productCategories.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    category\n                                    \n                                                CreateProductCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllProductCategories\n                        \n                    \n                \n            \n            \n                \ngetAllProductCategories()\n                \n            \n\n\n            \n                \n                    Defined in src/productCategories/productCategories.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport ProductCategory from './productCategories.entity';\nimport { CreateProductCategoryDto } from './dto/createProductCategory.dto';\n\n@Injectable()\nexport default class productCategoriesService {\n  constructor(\n    @InjectRepository(ProductCategory)\n    private productCategoriesRepository: Repository,\n  ) {}\n\n  getAllProductCategories(){\n      return this.productCategoriesRepository.find();\n  }\n\n  async createProductCategory(category:CreateProductCategoryDto){\n      const newProductCategory = await this.productCategoriesRepository.create(category);\n      await this.productCategoriesRepository.save(newProductCategory);\n      return newProductCategory;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.0\n        \n            Description : Nest TypeScript starter repository\n        \n            License : MIT\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/stripeWebhookService.html":{"url":"injectables/stripeWebhookService.html","title":"injectable - stripeWebhookService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  stripeWebhookService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripeWebhook/stripeWebhook.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createEvent\n                            \n                            \n                                    Async\n                                processSubscriptionUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventRepository: Repository, usersService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/stripeWebhook/stripeWebhook.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createEvent\n                        \n                    \n                \n            \n            \n                \ncreateEvent(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripeWebhook/stripeWebhook.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        processSubscriptionUpdate\n                        \n                    \n                \n            \n            \n                \n                    \n                    processSubscriptionUpdate(event: Stripe.Event)\n                \n            \n\n\n            \n                \n                    Defined in src/stripeWebhook/stripeWebhook.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            Stripe.Event\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport StripeEvent from './stripeEvent.entity';\nimport { Repository } from 'typeorm';\nimport Stripe from 'stripe';\nimport PosgresErrorCode from 'src/database/posgresErrorCodes.enum';\nimport { UserService } from 'src/users/user.service';\n\n@Injectable()\nexport default class stripeWebhookService {\n  constructor(\n    @InjectRepository(StripeEvent)\n    private eventRepository: Repository,\n    private readonly usersService: UserService,\n  ) {}\n\n  createEvent(id: string) {\n    return this.eventRepository.insert({ id });\n  }\n\n  async processSubscriptionUpdate(event: Stripe.Event) {\n    try {\n      await this.createEvent(event.id);\n    } catch (error) {\n      if (error?.code === PosgresErrorCode.UniqueViolation) {\n        throw new BadRequestException('This event was already processed');\n      }\n    }\n    const data = event.data.object as Stripe.Subscription;\n\n    const customerId: string = data.customer as string;\n    const subscriptionStatus = data.status;\n\n    await this.usersService.updateMonthlySubscriptionStatus(\n      customerId,\n      subscriptionStatus,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/subscriptionsService.html":{"url":"injectables/subscriptionsService.html","title":"injectable - subscriptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  subscriptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscriptions/subscriptions.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMonthlySubscription\n                            \n                            \n                                    Public\n                                    Async\n                                getMonthlySubscription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(stripeService: StripeService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/subscriptions/subscriptions.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        stripeService\n                                                  \n                                                        \n                                                                        StripeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createMonthlySubscription\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMonthlySubscription(customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/subscriptions/subscriptions.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getMonthlySubscription\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMonthlySubscription(customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/subscriptions/subscriptions.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport StripeService from '../stripe/stripe.service';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport default class subscriptionsService {\n  constructor(\n    private readonly stripeService: StripeService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  public async createMonthlySubscription(customerId: string) {\n    const priceId = this.configService.get('MONTHLY_SUBSCRIPTION_PRICE_ID');\n\n    const subscriptions = await this.stripeService.listSubscriptions(\n      priceId,\n      customerId,\n    );\n    if (subscriptions.data.length) {\n      throw new BadRequestException('Customer already subscribed');\n    }\n    return this.stripeService.createSubscription(priceId, customerId);\n  }\n\n  public async getMonthlySubscription(customerId: string) {\n    const priceId = this.configService.get('MONTHLY_SUBSCRIPTION_PRICE_ID');\n    const subscriptions = await this.stripeService.listSubscriptions(\n      priceId,\n      customerId,\n    );\n    if (!subscriptions.data.length) {\n      return new NotFoundException('Customer not subscribed');\n    }\n    return subscriptions.data[0];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/updatePostDto.html":{"url":"classes/updatePostDto.html","title":"class - updatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  updatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/updatePost.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                paragraphs\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/updatePost.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        paragraphs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({each: true})@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/updatePost.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/updatePost.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsNumber, IsOptional } from 'class-validator';\nexport default class updatePostDto {\n  @IsNumber()\n  @IsOptional()\n  id: number;\n\n  @IsString({ each: true })\n  @IsNotEmpty()\n  @IsOptional()\n  // content: string;\n  paragraphs: string[];\n\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  title: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GET_POSTS_CACHE_KEY   (src/.../postsCacheKey.constant.ts)\n                        \n                        \n                            mockedJwtService   (src/.../jwt.service.ts)\n                        \n                        \n                            mockedUser   (src/.../user.mock.ts)\n                        \n                        \n                            mockerConfigService   (src/.../config.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/postsCacheKey.constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GET_POSTS_CACHE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'GET_POSTS_CACHE'\n                    \n                \n\n\n        \n    \n\n    src/utils/mocks/jwt.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockedJwtService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  sign: () => '',\n}\n                    \n                \n\n\n        \n    \n\n    src/authentication/test/user.mock.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockedUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Default value : {\n  id: 1,\n  email: 'user@email.com',\n  name: 'John',\n  password: '$2b$10$1A0wm81IcdCHkABDHEgHveMDZ9q/Q/L0YZLApRt4sSWzLTAK0UhJa',\n  phoneNumber: '+840987623513',\n  address: {\n    id: 1,\n    street: 'streetName',\n    city: 'cityName',\n    country: 'countryName',\n  },\n  isTwoFactorAuthenticationEnabled: false,\n  stripeCustomerId: 'stripe_customer_id',\n  isEmailConfirmed: false,\n  isPhoneNumberConfirmed: false,\n  isRegisterWithGoogle: false,\n}\n                    \n                \n\n\n        \n    \n\n    src/utils/mocks/config.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockerConfigService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  get(key: string) {\n    switch (key) {\n      case 'JWT_EXPIRATION_TIME':\n        return '3600';\n    }\n  },\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/verificationTokenPayload.html":{"url":"interfaces/verificationTokenPayload.html","title":"interface - verificationTokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  verificationTokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emailConfirmation/verificationTokenPayload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface verificationTokenPayload {\n  email: string;\n}\n\nexport default verificationTokenPayload;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
